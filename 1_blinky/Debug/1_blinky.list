
1_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003edc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004030  08004030  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004030  08004030  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004030  08004030  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004030  08004030  00014030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000078  080040b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080040b0  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010edd  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b2  00000000  00000000  00030f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00033730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000345b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001906c  00000000  00000000  00035318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f330  00000000  00000000  0004e384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090030  00000000  00000000  0005d6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed6e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  000ed738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003fd4 	.word	0x08003fd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003fd4 	.word	0x08003fd4

08000150 <led_ON>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


static void led_ON( void *pvParameters) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]

	while (1){
		if (HAL_GPIO_ReadPin(PULS_GPIO_Port, PULS_Pin)){
 8000158:	2108      	movs	r1, #8
 800015a:	480d      	ldr	r0, [pc, #52]	; (8000190 <led_ON+0x40>)
 800015c:	f000 fcec 	bl	8000b38 <HAL_GPIO_ReadPin>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d004      	beq.n	8000170 <led_ON+0x20>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000166:	2201      	movs	r2, #1
 8000168:	2110      	movs	r1, #16
 800016a:	4809      	ldr	r0, [pc, #36]	; (8000190 <led_ON+0x40>)
 800016c:	f000 fcfb 	bl	8000b66 <HAL_GPIO_WritePin>
		}

		vTaskDelay(400 / portTICK_PERIOD_MS);
 8000170:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000174:	f001 fcfc 	bl	8001b70 <vTaskDelay>
		vTaskResume( led_OFF_Handle );
 8000178:	4b06      	ldr	r3, [pc, #24]	; (8000194 <led_ON+0x44>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4618      	mov	r0, r3
 800017e:	f001 fddd 	bl	8001d3c <vTaskResume>
		vTaskSuspend( led_ON_Handle );
 8000182:	4b05      	ldr	r3, [pc, #20]	; (8000198 <led_ON+0x48>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4618      	mov	r0, r3
 8000188:	f001 fd26 	bl	8001bd8 <vTaskSuspend>
		if (HAL_GPIO_ReadPin(PULS_GPIO_Port, PULS_Pin)){
 800018c:	e7e4      	b.n	8000158 <led_ON+0x8>
 800018e:	bf00      	nop
 8000190:	40010c00 	.word	0x40010c00
 8000194:	200001f8 	.word	0x200001f8
 8000198:	200001f4 	.word	0x200001f4

0800019c <led_OFF>:

	}

}

static void led_OFF( void *pvParameters) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]

	while (1){
		if (HAL_GPIO_ReadPin(PULS_GPIO_Port, PULS_Pin)){
 80001a4:	2108      	movs	r1, #8
 80001a6:	480d      	ldr	r0, [pc, #52]	; (80001dc <led_OFF+0x40>)
 80001a8:	f000 fcc6 	bl	8000b38 <HAL_GPIO_ReadPin>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d004      	beq.n	80001bc <led_OFF+0x20>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80001b2:	2200      	movs	r2, #0
 80001b4:	2110      	movs	r1, #16
 80001b6:	4809      	ldr	r0, [pc, #36]	; (80001dc <led_OFF+0x40>)
 80001b8:	f000 fcd5 	bl	8000b66 <HAL_GPIO_WritePin>
		}

		vTaskDelay(600 / portTICK_PERIOD_MS);
 80001bc:	f44f 7016 	mov.w	r0, #600	; 0x258
 80001c0:	f001 fcd6 	bl	8001b70 <vTaskDelay>
		vTaskResume( led_ON_Handle );
 80001c4:	4b06      	ldr	r3, [pc, #24]	; (80001e0 <led_OFF+0x44>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fdb7 	bl	8001d3c <vTaskResume>
		vTaskSuspend( led_OFF_Handle );
 80001ce:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <led_OFF+0x48>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fd00 	bl	8001bd8 <vTaskSuspend>
		if (HAL_GPIO_ReadPin(PULS_GPIO_Port, PULS_Pin)){
 80001d8:	e7e4      	b.n	80001a4 <led_OFF+0x8>
 80001da:	bf00      	nop
 80001dc:	40010c00 	.word	0x40010c00
 80001e0:	200001f4 	.word	0x200001f4
 80001e4:	200001f8 	.word	0x200001f8

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ee:	f000 fa0d 	bl	800060c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f82b 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f6:	f000 f86f 	bl	80002d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  xTaskCreate(led_ON,
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <main+0x50>)
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	2301      	movs	r3, #1
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2280      	movs	r2, #128	; 0x80
 8000206:	490d      	ldr	r1, [pc, #52]	; (800023c <main+0x54>)
 8000208:	480d      	ldr	r0, [pc, #52]	; (8000240 <main+0x58>)
 800020a:	f001 fb45 	bl	8001898 <xTaskCreate>
		  configMINIMAL_STACK_SIZE,
		  NULL,
		  1,
		  &led_ON_Handle);

  xTaskCreate(led_OFF,
 800020e:	4b0d      	ldr	r3, [pc, #52]	; (8000244 <main+0x5c>)
 8000210:	9301      	str	r3, [sp, #4]
 8000212:	2301      	movs	r3, #1
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	2300      	movs	r3, #0
 8000218:	2280      	movs	r2, #128	; 0x80
 800021a:	4908      	ldr	r1, [pc, #32]	; (800023c <main+0x54>)
 800021c:	480a      	ldr	r0, [pc, #40]	; (8000248 <main+0x60>)
 800021e:	f001 fb3b 	bl	8001898 <xTaskCreate>
  		  configMINIMAL_STACK_SIZE,
  		  NULL,
  		  1,
  		  &led_OFF_Handle);

  vTaskSuspend( led_OFF_Handle );
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <main+0x5c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4618      	mov	r0, r3
 8000228:	f001 fcd6 	bl	8001bd8 <vTaskSuspend>
  /* USER CODE END 2 */

  /* Infinite loop */

    /* USER CODE BEGIN 3 */
  vTaskStartScheduler();
 800022c:	f001 fe0c 	bl	8001e48 <vTaskStartScheduler>
 8000230:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000232:	4618      	mov	r0, r3
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	200001f4 	.word	0x200001f4
 800023c:	08003fec 	.word	0x08003fec
 8000240:	08000151 	.word	0x08000151
 8000244:	200001f8 	.word	0x200001f8
 8000248:	0800019d 	.word	0x0800019d

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	; 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fdee 	bl	8003e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026e:	2301      	movs	r3, #1
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000272:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	2302      	movs	r3, #2
 8000282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000288:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fc7f 	bl	8000b98 <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a0:	f000 f8a4 	bl	80003ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 feea 	bl	8001098 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ca:	f000 f88f 	bl	80003ec <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	; 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ec:	4b33      	ldr	r3, [pc, #204]	; (80003bc <MX_GPIO_Init+0xe4>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a32      	ldr	r2, [pc, #200]	; (80003bc <MX_GPIO_Init+0xe4>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b30      	ldr	r3, [pc, #192]	; (80003bc <MX_GPIO_Init+0xe4>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0310 	and.w	r3, r3, #16
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000304:	4b2d      	ldr	r3, [pc, #180]	; (80003bc <MX_GPIO_Init+0xe4>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a2c      	ldr	r2, [pc, #176]	; (80003bc <MX_GPIO_Init+0xe4>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <MX_GPIO_Init+0xe4>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0320 	and.w	r3, r3, #32
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b27      	ldr	r3, [pc, #156]	; (80003bc <MX_GPIO_Init+0xe4>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a26      	ldr	r2, [pc, #152]	; (80003bc <MX_GPIO_Init+0xe4>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b24      	ldr	r3, [pc, #144]	; (80003bc <MX_GPIO_Init+0xe4>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <MX_GPIO_Init+0xe4>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a20      	ldr	r2, [pc, #128]	; (80003bc <MX_GPIO_Init+0xe4>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_GPIO_Init+0xe4>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0308 	and.w	r3, r3, #8
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000352:	481b      	ldr	r0, [pc, #108]	; (80003c0 <MX_GPIO_Init+0xe8>)
 8000354:	f000 fc07 	bl	8000b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2110      	movs	r1, #16
 800035c:	4819      	ldr	r0, [pc, #100]	; (80003c4 <MX_GPIO_Init+0xec>)
 800035e:	f000 fc02 	bl	8000b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	2301      	movs	r3, #1
 800036a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000370:	2302      	movs	r3, #2
 8000372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000374:	f107 0310 	add.w	r3, r7, #16
 8000378:	4619      	mov	r1, r3
 800037a:	4811      	ldr	r0, [pc, #68]	; (80003c0 <MX_GPIO_Init+0xe8>)
 800037c:	f000 fa58 	bl	8000830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULS_Pin */
  GPIO_InitStruct.Pin = PULS_Pin;
 8000380:	2308      	movs	r3, #8
 8000382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000388:	2300      	movs	r3, #0
 800038a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PULS_GPIO_Port, &GPIO_InitStruct);
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	4619      	mov	r1, r3
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <MX_GPIO_Init+0xec>)
 8000394:	f000 fa4c 	bl	8000830 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000398:	2310      	movs	r3, #16
 800039a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	2301      	movs	r3, #1
 800039e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a4:	2302      	movs	r3, #2
 80003a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	4619      	mov	r1, r3
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_GPIO_Init+0xec>)
 80003b0:	f000 fa3e 	bl	8000830 <HAL_GPIO_Init>

}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40011000 	.word	0x40011000
 80003c4:	40010c00 	.word	0x40010c00

080003c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a04      	ldr	r2, [pc, #16]	; (80003e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d101      	bne.n	80003de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003da:	f000 f92d 	bl	8000638 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003de:	bf00      	nop
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40012c00 	.word	0x40012c00

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
}
 80003f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <Error_Handler+0x8>
	...

080003f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <HAL_MspInit+0x5c>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	4a14      	ldr	r2, [pc, #80]	; (8000454 <HAL_MspInit+0x5c>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4b12      	ldr	r3, [pc, #72]	; (8000454 <HAL_MspInit+0x5c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <HAL_MspInit+0x5c>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <HAL_MspInit+0x5c>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000420:	61d3      	str	r3, [r2, #28]
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <HAL_MspInit+0x5c>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <HAL_MspInit+0x60>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <HAL_MspInit+0x60>)
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000

0800045c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08c      	sub	sp, #48	; 0x30
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800046c:	2200      	movs	r2, #0
 800046e:	6879      	ldr	r1, [r7, #4]
 8000470:	2019      	movs	r0, #25
 8000472:	f000 f9b2 	bl	80007da <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000476:	2019      	movs	r0, #25
 8000478:	f000 f9cb 	bl	8000812 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <HAL_InitTick+0x9c>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a1d      	ldr	r2, [pc, #116]	; (80004f8 <HAL_InitTick+0x9c>)
 8000482:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <HAL_InitTick+0x9c>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000494:	f107 0210 	add.w	r2, r7, #16
 8000498:	f107 0314 	add.w	r3, r7, #20
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 ff62 	bl	8001368 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004a4:	f000 ff4c 	bl	8001340 <HAL_RCC_GetPCLK2Freq>
 80004a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ac:	4a13      	ldr	r2, [pc, #76]	; (80004fc <HAL_InitTick+0xa0>)
 80004ae:	fba2 2303 	umull	r2, r3, r2, r3
 80004b2:	0c9b      	lsrs	r3, r3, #18
 80004b4:	3b01      	subs	r3, #1
 80004b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <HAL_InitTick+0xa4>)
 80004ba:	4a12      	ldr	r2, [pc, #72]	; (8000504 <HAL_InitTick+0xa8>)
 80004bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004be:	4b10      	ldr	r3, [pc, #64]	; (8000500 <HAL_InitTick+0xa4>)
 80004c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <HAL_InitTick+0xa4>)
 80004c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_InitTick+0xa4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <HAL_InitTick+0xa4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80004d8:	4809      	ldr	r0, [pc, #36]	; (8000500 <HAL_InitTick+0xa4>)
 80004da:	f000 ff93 	bl	8001404 <HAL_TIM_Base_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d104      	bne.n	80004ee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004e4:	4806      	ldr	r0, [pc, #24]	; (8000500 <HAL_InitTick+0xa4>)
 80004e6:	f000 ffe5 	bl	80014b4 <HAL_TIM_Base_Start_IT>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e000      	b.n	80004f0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3730      	adds	r7, #48	; 0x30
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	431bde83 	.word	0x431bde83
 8000500:	200001fc 	.word	0x200001fc
 8000504:	40012c00 	.word	0x40012c00

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800050c:	e7fe      	b.n	800050c <NMI_Handler+0x4>

0800050e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler+0x4>

08000514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <MemManage_Handler+0x4>

0800051a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <BusFault_Handler+0x4>

08000520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <UsageFault_Handler+0x4>

08000526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
	...

08000534 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <TIM1_UP_IRQHandler+0x10>)
 800053a:	f001 f80d 	bl	8001558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200001fc 	.word	0x200001fc

08000548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000550:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <_sbrk+0x5c>)
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <_sbrk+0x60>)
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <_sbrk+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d102      	bne.n	800056a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <_sbrk+0x64>)
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <_sbrk+0x68>)
 8000568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <_sbrk+0x64>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	693a      	ldr	r2, [r7, #16]
 8000574:	429a      	cmp	r2, r3
 8000576:	d207      	bcs.n	8000588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000578:	f003 fc18 	bl	8003dac <__errno>
 800057c:	4603      	mov	r3, r0
 800057e:	220c      	movs	r2, #12
 8000580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	e009      	b.n	800059c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <_sbrk+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <_sbrk+0x64>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <_sbrk+0x64>)
 8000598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800059a:	68fb      	ldr	r3, [r7, #12]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20005000 	.word	0x20005000
 80005a8:	00000400 	.word	0x00000400
 80005ac:	20000094 	.word	0x20000094
 80005b0:	20000298 	.word	0x20000298

080005b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr

080005c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005c2:	490d      	ldr	r1, [pc, #52]	; (80005f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005d8:	4c0a      	ldr	r4, [pc, #40]	; (8000604 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005e6:	f7ff ffe5 	bl	80005b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f003 fbe5 	bl	8003db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ee:	f7ff fdfb 	bl	80001e8 <main>
  bx lr
 80005f2:	4770      	bx	lr
  ldr r0, =_sdata
 80005f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005fc:	08004038 	.word	0x08004038
  ldr r2, =_sbss
 8000600:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000604:	20000298 	.word	0x20000298

08000608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000608:	e7fe      	b.n	8000608 <ADC1_2_IRQHandler>
	...

0800060c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_Init+0x28>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_Init+0x28>)
 8000616:	f043 0310 	orr.w	r3, r3, #16
 800061a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800061c:	2003      	movs	r0, #3
 800061e:	f000 f8d1 	bl	80007c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff ff1a 	bl	800045c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000628:	f7ff fee6 	bl	80003f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40022000 	.word	0x40022000

08000638 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <HAL_IncTick+0x1c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_IncTick+0x20>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4413      	add	r3, r2
 8000648:	4a03      	ldr	r2, [pc, #12]	; (8000658 <HAL_IncTick+0x20>)
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	20000008 	.word	0x20000008
 8000658:	20000244 	.word	0x20000244

0800065c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b02      	ldr	r3, [pc, #8]	; (800066c <HAL_GetTick+0x10>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	20000244 	.word	0x20000244

08000670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000698:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <__NVIC_SetPriorityGrouping+0x44>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	60d3      	str	r3, [r2, #12]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <__NVIC_GetPriorityGrouping+0x18>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	0a1b      	lsrs	r3, r3, #8
 80006c2:	f003 0307 	and.w	r3, r3, #7
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db0b      	blt.n	80006fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f003 021f 	and.w	r2, r3, #31
 80006ec:	4906      	ldr	r1, [pc, #24]	; (8000708 <__NVIC_EnableIRQ+0x34>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	095b      	lsrs	r3, r3, #5
 80006f4:	2001      	movs	r0, #1
 80006f6:	fa00 f202 	lsl.w	r2, r0, r2
 80006fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	e000e100 	.word	0xe000e100

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db0a      	blt.n	8000736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	490c      	ldr	r1, [pc, #48]	; (8000758 <__NVIC_SetPriority+0x4c>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000734:	e00a      	b.n	800074c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <__NVIC_SetPriority+0x50>)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	3b04      	subs	r3, #4
 8000744:	0112      	lsls	r2, r2, #4
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	440b      	add	r3, r1
 800074a:	761a      	strb	r2, [r3, #24]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000e100 	.word	0xe000e100
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000760:	b480      	push	{r7}
 8000762:	b089      	sub	sp, #36	; 0x24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	f1c3 0307 	rsb	r3, r3, #7
 800077a:	2b04      	cmp	r3, #4
 800077c:	bf28      	it	cs
 800077e:	2304      	movcs	r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3304      	adds	r3, #4
 8000786:	2b06      	cmp	r3, #6
 8000788:	d902      	bls.n	8000790 <NVIC_EncodePriority+0x30>
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3b03      	subs	r3, #3
 800078e:	e000      	b.n	8000792 <NVIC_EncodePriority+0x32>
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43da      	mvns	r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	401a      	ands	r2, r3
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43d9      	mvns	r1, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	4313      	orrs	r3, r2
         );
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3724      	adds	r7, #36	; 0x24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ff4f 	bl	8000670 <__NVIC_SetPriorityGrouping>
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ec:	f7ff ff64 	bl	80006b8 <__NVIC_GetPriorityGrouping>
 80007f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	6978      	ldr	r0, [r7, #20]
 80007f8:	f7ff ffb2 	bl	8000760 <NVIC_EncodePriority>
 80007fc:	4602      	mov	r2, r0
 80007fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff81 	bl	800070c <__NVIC_SetPriority>
}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	4603      	mov	r3, r0
 800081a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff57 	bl	80006d4 <__NVIC_EnableIRQ>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000830:	b480      	push	{r7}
 8000832:	b08b      	sub	sp, #44	; 0x2c
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000842:	e169      	b.n	8000b18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000844:	2201      	movs	r2, #1
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	4013      	ands	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	429a      	cmp	r2, r3
 800085e:	f040 8158 	bne.w	8000b12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	4a9a      	ldr	r2, [pc, #616]	; (8000ad0 <HAL_GPIO_Init+0x2a0>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d05e      	beq.n	800092a <HAL_GPIO_Init+0xfa>
 800086c:	4a98      	ldr	r2, [pc, #608]	; (8000ad0 <HAL_GPIO_Init+0x2a0>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d875      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 8000872:	4a98      	ldr	r2, [pc, #608]	; (8000ad4 <HAL_GPIO_Init+0x2a4>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d058      	beq.n	800092a <HAL_GPIO_Init+0xfa>
 8000878:	4a96      	ldr	r2, [pc, #600]	; (8000ad4 <HAL_GPIO_Init+0x2a4>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d86f      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 800087e:	4a96      	ldr	r2, [pc, #600]	; (8000ad8 <HAL_GPIO_Init+0x2a8>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d052      	beq.n	800092a <HAL_GPIO_Init+0xfa>
 8000884:	4a94      	ldr	r2, [pc, #592]	; (8000ad8 <HAL_GPIO_Init+0x2a8>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d869      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 800088a:	4a94      	ldr	r2, [pc, #592]	; (8000adc <HAL_GPIO_Init+0x2ac>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d04c      	beq.n	800092a <HAL_GPIO_Init+0xfa>
 8000890:	4a92      	ldr	r2, [pc, #584]	; (8000adc <HAL_GPIO_Init+0x2ac>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d863      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 8000896:	4a92      	ldr	r2, [pc, #584]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d046      	beq.n	800092a <HAL_GPIO_Init+0xfa>
 800089c:	4a90      	ldr	r2, [pc, #576]	; (8000ae0 <HAL_GPIO_Init+0x2b0>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d85d      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 80008a2:	2b12      	cmp	r3, #18
 80008a4:	d82a      	bhi.n	80008fc <HAL_GPIO_Init+0xcc>
 80008a6:	2b12      	cmp	r3, #18
 80008a8:	d859      	bhi.n	800095e <HAL_GPIO_Init+0x12e>
 80008aa:	a201      	add	r2, pc, #4	; (adr r2, 80008b0 <HAL_GPIO_Init+0x80>)
 80008ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b0:	0800092b 	.word	0x0800092b
 80008b4:	08000905 	.word	0x08000905
 80008b8:	08000917 	.word	0x08000917
 80008bc:	08000959 	.word	0x08000959
 80008c0:	0800095f 	.word	0x0800095f
 80008c4:	0800095f 	.word	0x0800095f
 80008c8:	0800095f 	.word	0x0800095f
 80008cc:	0800095f 	.word	0x0800095f
 80008d0:	0800095f 	.word	0x0800095f
 80008d4:	0800095f 	.word	0x0800095f
 80008d8:	0800095f 	.word	0x0800095f
 80008dc:	0800095f 	.word	0x0800095f
 80008e0:	0800095f 	.word	0x0800095f
 80008e4:	0800095f 	.word	0x0800095f
 80008e8:	0800095f 	.word	0x0800095f
 80008ec:	0800095f 	.word	0x0800095f
 80008f0:	0800095f 	.word	0x0800095f
 80008f4:	0800090d 	.word	0x0800090d
 80008f8:	08000921 	.word	0x08000921
 80008fc:	4a79      	ldr	r2, [pc, #484]	; (8000ae4 <HAL_GPIO_Init+0x2b4>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d013      	beq.n	800092a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000902:	e02c      	b.n	800095e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e029      	b.n	8000960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	3304      	adds	r3, #4
 8000912:	623b      	str	r3, [r7, #32]
          break;
 8000914:	e024      	b.n	8000960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	3308      	adds	r3, #8
 800091c:	623b      	str	r3, [r7, #32]
          break;
 800091e:	e01f      	b.n	8000960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	330c      	adds	r3, #12
 8000926:	623b      	str	r3, [r7, #32]
          break;
 8000928:	e01a      	b.n	8000960 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d102      	bne.n	8000938 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000932:	2304      	movs	r3, #4
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e013      	b.n	8000960 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d105      	bne.n	800094c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000940:	2308      	movs	r3, #8
 8000942:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	69fa      	ldr	r2, [r7, #28]
 8000948:	611a      	str	r2, [r3, #16]
          break;
 800094a:	e009      	b.n	8000960 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800094c:	2308      	movs	r3, #8
 800094e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	69fa      	ldr	r2, [r7, #28]
 8000954:	615a      	str	r2, [r3, #20]
          break;
 8000956:	e003      	b.n	8000960 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
          break;
 800095c:	e000      	b.n	8000960 <HAL_GPIO_Init+0x130>
          break;
 800095e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	2bff      	cmp	r3, #255	; 0xff
 8000964:	d801      	bhi.n	800096a <HAL_GPIO_Init+0x13a>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	e001      	b.n	800096e <HAL_GPIO_Init+0x13e>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3304      	adds	r3, #4
 800096e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	2bff      	cmp	r3, #255	; 0xff
 8000974:	d802      	bhi.n	800097c <HAL_GPIO_Init+0x14c>
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	e002      	b.n	8000982 <HAL_GPIO_Init+0x152>
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	3b08      	subs	r3, #8
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	210f      	movs	r1, #15
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	401a      	ands	r2, r3
 8000994:	6a39      	ldr	r1, [r7, #32]
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	431a      	orrs	r2, r3
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 80b1 	beq.w	8000b12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009b0:	4b4d      	ldr	r3, [pc, #308]	; (8000ae8 <HAL_GPIO_Init+0x2b8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a4c      	ldr	r2, [pc, #304]	; (8000ae8 <HAL_GPIO_Init+0x2b8>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b4a      	ldr	r3, [pc, #296]	; (8000ae8 <HAL_GPIO_Init+0x2b8>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009c8:	4a48      	ldr	r2, [pc, #288]	; (8000aec <HAL_GPIO_Init+0x2bc>)
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	089b      	lsrs	r3, r3, #2
 80009ce:	3302      	adds	r3, #2
 80009d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	220f      	movs	r2, #15
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	4013      	ands	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a40      	ldr	r2, [pc, #256]	; (8000af0 <HAL_GPIO_Init+0x2c0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d013      	beq.n	8000a1c <HAL_GPIO_Init+0x1ec>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a3f      	ldr	r2, [pc, #252]	; (8000af4 <HAL_GPIO_Init+0x2c4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d00d      	beq.n	8000a18 <HAL_GPIO_Init+0x1e8>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a3e      	ldr	r2, [pc, #248]	; (8000af8 <HAL_GPIO_Init+0x2c8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d007      	beq.n	8000a14 <HAL_GPIO_Init+0x1e4>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a3d      	ldr	r2, [pc, #244]	; (8000afc <HAL_GPIO_Init+0x2cc>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d101      	bne.n	8000a10 <HAL_GPIO_Init+0x1e0>
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	e006      	b.n	8000a1e <HAL_GPIO_Init+0x1ee>
 8000a10:	2304      	movs	r3, #4
 8000a12:	e004      	b.n	8000a1e <HAL_GPIO_Init+0x1ee>
 8000a14:	2302      	movs	r3, #2
 8000a16:	e002      	b.n	8000a1e <HAL_GPIO_Init+0x1ee>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e000      	b.n	8000a1e <HAL_GPIO_Init+0x1ee>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a20:	f002 0203 	and.w	r2, r2, #3
 8000a24:	0092      	lsls	r2, r2, #2
 8000a26:	4093      	lsls	r3, r2
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a2e:	492f      	ldr	r1, [pc, #188]	; (8000aec <HAL_GPIO_Init+0x2bc>)
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	089b      	lsrs	r3, r3, #2
 8000a34:	3302      	adds	r3, #2
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d006      	beq.n	8000a56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a48:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	492c      	ldr	r1, [pc, #176]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	600b      	str	r3, [r1, #0]
 8000a54:	e006      	b.n	8000a64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a56:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	4928      	ldr	r1, [pc, #160]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a60:	4013      	ands	r3, r2
 8000a62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	4922      	ldr	r1, [pc, #136]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	604b      	str	r3, [r1, #4]
 8000a7c:	e006      	b.n	8000a8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	491e      	ldr	r1, [pc, #120]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	4918      	ldr	r1, [pc, #96]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	608b      	str	r3, [r1, #8]
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4914      	ldr	r1, [pc, #80]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d021      	beq.n	8000b04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	490e      	ldr	r1, [pc, #56]	; (8000b00 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	60cb      	str	r3, [r1, #12]
 8000acc:	e021      	b.n	8000b12 <HAL_GPIO_Init+0x2e2>
 8000ace:	bf00      	nop
 8000ad0:	10320000 	.word	0x10320000
 8000ad4:	10310000 	.word	0x10310000
 8000ad8:	10220000 	.word	0x10220000
 8000adc:	10210000 	.word	0x10210000
 8000ae0:	10120000 	.word	0x10120000
 8000ae4:	10110000 	.word	0x10110000
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010000 	.word	0x40010000
 8000af0:	40010800 	.word	0x40010800
 8000af4:	40010c00 	.word	0x40010c00
 8000af8:	40011000 	.word	0x40011000
 8000afc:	40011400 	.word	0x40011400
 8000b00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	4909      	ldr	r1, [pc, #36]	; (8000b34 <HAL_GPIO_Init+0x304>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	3301      	adds	r3, #1
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f47f ae8e 	bne.w	8000844 <HAL_GPIO_Init+0x14>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	372c      	adds	r7, #44	; 0x2c
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	e001      	b.n	8000b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr

08000b66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b76:	787b      	ldrb	r3, [r7, #1]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7c:	887a      	ldrh	r2, [r7, #2]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b82:	e003      	b.n	8000b8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b84:	887b      	ldrh	r3, [r7, #2]
 8000b86:	041a      	lsls	r2, r3, #16
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	611a      	str	r2, [r3, #16]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
	...

08000b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e26c      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 8087 	beq.w	8000cc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bb8:	4b92      	ldr	r3, [pc, #584]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f003 030c 	and.w	r3, r3, #12
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d00c      	beq.n	8000bde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bc4:	4b8f      	ldr	r3, [pc, #572]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 030c 	and.w	r3, r3, #12
 8000bcc:	2b08      	cmp	r3, #8
 8000bce:	d112      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x5e>
 8000bd0:	4b8c      	ldr	r3, [pc, #560]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bde:	4b89      	ldr	r3, [pc, #548]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d06c      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x12c>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d168      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e246      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfe:	d106      	bne.n	8000c0e <HAL_RCC_OscConfig+0x76>
 8000c00:	4b80      	ldr	r3, [pc, #512]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a7f      	ldr	r2, [pc, #508]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	e02e      	b.n	8000c6c <HAL_RCC_OscConfig+0xd4>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10c      	bne.n	8000c30 <HAL_RCC_OscConfig+0x98>
 8000c16:	4b7b      	ldr	r3, [pc, #492]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a7a      	ldr	r2, [pc, #488]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	4b78      	ldr	r3, [pc, #480]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a77      	ldr	r2, [pc, #476]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	e01d      	b.n	8000c6c <HAL_RCC_OscConfig+0xd4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c38:	d10c      	bne.n	8000c54 <HAL_RCC_OscConfig+0xbc>
 8000c3a:	4b72      	ldr	r3, [pc, #456]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a71      	ldr	r2, [pc, #452]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	4b6f      	ldr	r3, [pc, #444]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a6e      	ldr	r2, [pc, #440]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e00b      	b.n	8000c6c <HAL_RCC_OscConfig+0xd4>
 8000c54:	4b6b      	ldr	r3, [pc, #428]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a6a      	ldr	r2, [pc, #424]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5e:	6013      	str	r3, [r2, #0]
 8000c60:	4b68      	ldr	r3, [pc, #416]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a67      	ldr	r2, [pc, #412]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d013      	beq.n	8000c9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c74:	f7ff fcf2 	bl	800065c <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c7c:	f7ff fcee 	bl	800065c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b64      	cmp	r3, #100	; 0x64
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e1fa      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8e:	4b5d      	ldr	r3, [pc, #372]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f0      	beq.n	8000c7c <HAL_RCC_OscConfig+0xe4>
 8000c9a:	e014      	b.n	8000cc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fcde 	bl	800065c <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fcda 	bl	800065c <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e1e6      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb6:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f0      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x10c>
 8000cc2:	e000      	b.n	8000cc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d063      	beq.n	8000d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 030c 	and.w	r3, r3, #12
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00b      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cde:	4b49      	ldr	r3, [pc, #292]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d11c      	bne.n	8000d24 <HAL_RCC_OscConfig+0x18c>
 8000cea:	4b46      	ldr	r3, [pc, #280]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d116      	bne.n	8000d24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf6:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d005      	beq.n	8000d0e <HAL_RCC_OscConfig+0x176>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d001      	beq.n	8000d0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e1ba      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	4939      	ldr	r1, [pc, #228]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d22:	e03a      	b.n	8000d9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	691b      	ldr	r3, [r3, #16]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d020      	beq.n	8000d6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d2c:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d32:	f7ff fc93 	bl	800065c <HAL_GetTick>
 8000d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d38:	e008      	b.n	8000d4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d3a:	f7ff fc8f 	bl	800065c <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d901      	bls.n	8000d4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e19b      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f0      	beq.n	8000d3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d58:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	4927      	ldr	r1, [pc, #156]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	600b      	str	r3, [r1, #0]
 8000d6c:	e015      	b.n	8000d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <HAL_RCC_OscConfig+0x270>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fc72 	bl	800065c <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fc6e 	bl	800065c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e17a      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d03a      	beq.n	8000e1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d019      	beq.n	8000de2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_RCC_OscConfig+0x274>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db4:	f7ff fc52 	bl	800065c <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dbc:	f7ff fc4e 	bl	800065c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e15a      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f0      	beq.n	8000dbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f000 faf4 	bl	80013c8 <RCC_Delay>
 8000de0:	e01c      	b.n	8000e1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_RCC_OscConfig+0x274>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de8:	f7ff fc38 	bl	800065c <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dee:	e00f      	b.n	8000e10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df0:	f7ff fc34 	bl	800065c <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d908      	bls.n	8000e10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e140      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
 8000e02:	bf00      	nop
 8000e04:	40021000 	.word	0x40021000
 8000e08:	42420000 	.word	0x42420000
 8000e0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e10:	4b9e      	ldr	r3, [pc, #632]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1e9      	bne.n	8000df0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80a6 	beq.w	8000f76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2e:	4b97      	ldr	r3, [pc, #604]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10d      	bne.n	8000e56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b94      	ldr	r3, [pc, #592]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a93      	ldr	r2, [pc, #588]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b91      	ldr	r3, [pc, #580]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e52:	2301      	movs	r3, #1
 8000e54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e56:	4b8e      	ldr	r3, [pc, #568]	; (8001090 <HAL_RCC_OscConfig+0x4f8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d118      	bne.n	8000e94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e62:	4b8b      	ldr	r3, [pc, #556]	; (8001090 <HAL_RCC_OscConfig+0x4f8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a8a      	ldr	r2, [pc, #552]	; (8001090 <HAL_RCC_OscConfig+0x4f8>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fbf5 	bl	800065c <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e74:	e008      	b.n	8000e88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e76:	f7ff fbf1 	bl	800065c <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b64      	cmp	r3, #100	; 0x64
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e0fd      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e88:	4b81      	ldr	r3, [pc, #516]	; (8001090 <HAL_RCC_OscConfig+0x4f8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f0      	beq.n	8000e76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d106      	bne.n	8000eaa <HAL_RCC_OscConfig+0x312>
 8000e9c:	4b7b      	ldr	r3, [pc, #492]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	4a7a      	ldr	r2, [pc, #488]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6213      	str	r3, [r2, #32]
 8000ea8:	e02d      	b.n	8000f06 <HAL_RCC_OscConfig+0x36e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x334>
 8000eb2:	4b76      	ldr	r3, [pc, #472]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a75      	ldr	r2, [pc, #468]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	6213      	str	r3, [r2, #32]
 8000ebe:	4b73      	ldr	r3, [pc, #460]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	4a72      	ldr	r2, [pc, #456]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	f023 0304 	bic.w	r3, r3, #4
 8000ec8:	6213      	str	r3, [r2, #32]
 8000eca:	e01c      	b.n	8000f06 <HAL_RCC_OscConfig+0x36e>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	2b05      	cmp	r3, #5
 8000ed2:	d10c      	bne.n	8000eee <HAL_RCC_OscConfig+0x356>
 8000ed4:	4b6d      	ldr	r3, [pc, #436]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	4a6c      	ldr	r2, [pc, #432]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6213      	str	r3, [r2, #32]
 8000ee0:	4b6a      	ldr	r3, [pc, #424]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4a69      	ldr	r2, [pc, #420]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6213      	str	r3, [r2, #32]
 8000eec:	e00b      	b.n	8000f06 <HAL_RCC_OscConfig+0x36e>
 8000eee:	4b67      	ldr	r3, [pc, #412]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	4a66      	ldr	r2, [pc, #408]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	6213      	str	r3, [r2, #32]
 8000efa:	4b64      	ldr	r3, [pc, #400]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4a63      	ldr	r2, [pc, #396]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	f023 0304 	bic.w	r3, r3, #4
 8000f04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d015      	beq.n	8000f3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fba5 	bl	800065c <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f14:	e00a      	b.n	8000f2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f16:	f7ff fba1 	bl	800065c <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e0ab      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f2c:	4b57      	ldr	r3, [pc, #348]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0ee      	beq.n	8000f16 <HAL_RCC_OscConfig+0x37e>
 8000f38:	e014      	b.n	8000f64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fb8f 	bl	800065c <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f40:	e00a      	b.n	8000f58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f42:	f7ff fb8b 	bl	800065c <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e095      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f58:	4b4c      	ldr	r3, [pc, #304]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1ee      	bne.n	8000f42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d105      	bne.n	8000f76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f6a:	4b48      	ldr	r3, [pc, #288]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a47      	ldr	r2, [pc, #284]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8081 	beq.w	8001082 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f80:	4b42      	ldr	r3, [pc, #264]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d061      	beq.n	8001050 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d146      	bne.n	8001022 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f94:	4b3f      	ldr	r3, [pc, #252]	; (8001094 <HAL_RCC_OscConfig+0x4fc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fb5f 	bl	800065c <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff fb5b 	bl	800065c <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e067      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f0      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc8:	d108      	bne.n	8000fdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fca:	4b30      	ldr	r3, [pc, #192]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	492d      	ldr	r1, [pc, #180]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a19      	ldr	r1, [r3, #32]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	430b      	orrs	r3, r1
 8000fee:	4927      	ldr	r1, [pc, #156]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff4:	4b27      	ldr	r3, [pc, #156]	; (8001094 <HAL_RCC_OscConfig+0x4fc>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fb2f 	bl	800065c <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001002:	f7ff fb2b 	bl	800065c <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e037      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f0      	beq.n	8001002 <HAL_RCC_OscConfig+0x46a>
 8001020:	e02f      	b.n	8001082 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <HAL_RCC_OscConfig+0x4fc>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fb18 	bl	800065c <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001030:	f7ff fb14 	bl	800065c <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e020      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001042:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x498>
 800104e:	e018      	b.n	8001082 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e013      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_RCC_OscConfig+0x4f4>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	429a      	cmp	r2, r3
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800107a:	429a      	cmp	r2, r3
 800107c:	d001      	beq.n	8001082 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	40007000 	.word	0x40007000
 8001094:	42420060 	.word	0x42420060

08001098 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0d0      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ac:	4b6a      	ldr	r3, [pc, #424]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d910      	bls.n	80010dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ba:	4b67      	ldr	r3, [pc, #412]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 0207 	bic.w	r2, r3, #7
 80010c2:	4965      	ldr	r1, [pc, #404]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ca:	4b63      	ldr	r3, [pc, #396]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0b8      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d020      	beq.n	800112a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f4:	4b59      	ldr	r3, [pc, #356]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	4a58      	ldr	r2, [pc, #352]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800110c:	4b53      	ldr	r3, [pc, #332]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	4a52      	ldr	r2, [pc, #328]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001116:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001118:	4b50      	ldr	r3, [pc, #320]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	494d      	ldr	r1, [pc, #308]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d040      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d107      	bne.n	800114e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d115      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e07f      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d107      	bne.n	8001166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001156:	4b41      	ldr	r3, [pc, #260]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d109      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e073      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e06b      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001176:	4b39      	ldr	r3, [pc, #228]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f023 0203 	bic.w	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4936      	ldr	r1, [pc, #216]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001188:	f7ff fa68 	bl	800065c <HAL_GetTick>
 800118c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118e:	e00a      	b.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001190:	f7ff fa64 	bl	800065c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f241 3288 	movw	r2, #5000	; 0x1388
 800119e:	4293      	cmp	r3, r2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e053      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 020c 	and.w	r2, r3, #12
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d1eb      	bne.n	8001190 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d210      	bcs.n	80011e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 0207 	bic.w	r2, r3, #7
 80011ce:	4922      	ldr	r1, [pc, #136]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e032      	b.n	800124e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d008      	beq.n	8001206 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	4916      	ldr	r1, [pc, #88]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	2b00      	cmp	r3, #0
 8001210:	d009      	beq.n	8001226 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	490e      	ldr	r1, [pc, #56]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001226:	f000 f821 	bl	800126c <HAL_RCC_GetSysClockFreq>
 800122a:	4602      	mov	r2, r0
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	490a      	ldr	r1, [pc, #40]	; (8001260 <HAL_RCC_ClockConfig+0x1c8>)
 8001238:	5ccb      	ldrb	r3, [r1, r3]
 800123a:	fa22 f303 	lsr.w	r3, r2, r3
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <HAL_RCC_ClockConfig+0x1cc>)
 8001240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_RCC_ClockConfig+0x1d0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f908 	bl	800045c <HAL_InitTick>

  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40022000 	.word	0x40022000
 800125c:	40021000 	.word	0x40021000
 8001260:	08004018 	.word	0x08004018
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004

0800126c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800126c:	b490      	push	{r4, r7}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001274:	1d3c      	adds	r4, r7, #4
 8001276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800127c:	f240 2301 	movw	r3, #513	; 0x201
 8001280:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d002      	beq.n	80012ac <HAL_RCC_GetSysClockFreq+0x40>
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d003      	beq.n	80012b2 <HAL_RCC_GetSysClockFreq+0x46>
 80012aa:	e02d      	b.n	8001308 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ae:	623b      	str	r3, [r7, #32]
      break;
 80012b0:	e02d      	b.n	800130e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	0c9b      	lsrs	r3, r3, #18
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012be:	4413      	add	r3, r2
 80012c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d013      	beq.n	80012f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	0c5b      	lsrs	r3, r3, #17
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012de:	4413      	add	r3, r2
 80012e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ea:	fb02 f203 	mul.w	r2, r2, r3
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
 80012f6:	e004      	b.n	8001302 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	623b      	str	r3, [r7, #32]
      break;
 8001306:	e002      	b.n	800130e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_RCC_GetSysClockFreq+0xb8>)
 800130a:	623b      	str	r3, [r7, #32]
      break;
 800130c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800130e:	6a3b      	ldr	r3, [r7, #32]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bc90      	pop	{r4, r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	08003ff0 	.word	0x08003ff0
 8001320:	40021000 	.word	0x40021000
 8001324:	007a1200 	.word	0x007a1200
 8001328:	003d0900 	.word	0x003d0900

0800132c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <HAL_RCC_GetHCLKFreq+0x10>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	20000000 	.word	0x20000000

08001340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001344:	f7ff fff2 	bl	800132c <HAL_RCC_GetHCLKFreq>
 8001348:	4602      	mov	r2, r0
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	0adb      	lsrs	r3, r3, #11
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	4903      	ldr	r1, [pc, #12]	; (8001364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001356:	5ccb      	ldrb	r3, [r1, r3]
 8001358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800135c:	4618      	mov	r0, r3
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40021000 	.word	0x40021000
 8001364:	08004028 	.word	0x08004028

08001368 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	220f      	movs	r2, #15
 8001376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_RCC_GetClockConfig+0x58>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0203 	and.w	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_RCC_GetClockConfig+0x58>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_RCC_GetClockConfig+0x58>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_RCC_GetClockConfig+0x58>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	08db      	lsrs	r3, r3, #3
 80013a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_RCC_GetClockConfig+0x5c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0207 	and.w	r2, r3, #7
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40022000 	.word	0x40022000

080013c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <RCC_Delay+0x34>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <RCC_Delay+0x38>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0a5b      	lsrs	r3, r3, #9
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013e4:	bf00      	nop
  }
  while (Delay --);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	60fa      	str	r2, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f9      	bne.n	80013e4 <RCC_Delay+0x1c>
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000000 	.word	0x20000000
 8001400:	10624dd3 	.word	0x10624dd3

08001404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e041      	b.n	800149a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d106      	bne.n	8001430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f839 	bl	80014a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3304      	adds	r3, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4610      	mov	r0, r2
 8001444:	f000 f9b4 	bl	80017b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d001      	beq.n	80014cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e03a      	b.n	8001542 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2202      	movs	r2, #2
 80014d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <HAL_TIM_Base_Start_IT+0x98>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d00e      	beq.n	800150c <HAL_TIM_Base_Start_IT+0x58>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014f6:	d009      	beq.n	800150c <HAL_TIM_Base_Start_IT+0x58>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <HAL_TIM_Base_Start_IT+0x9c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d004      	beq.n	800150c <HAL_TIM_Base_Start_IT+0x58>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <HAL_TIM_Base_Start_IT+0xa0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d111      	bne.n	8001530 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2b06      	cmp	r3, #6
 800151c:	d010      	beq.n	8001540 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0201 	orr.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800152e:	e007      	b.n	8001540 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0201 	orr.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	40012c00 	.word	0x40012c00
 8001550:	40000400 	.word	0x40000400
 8001554:	40000800 	.word	0x40000800

08001558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b02      	cmp	r3, #2
 800156c:	d122      	bne.n	80015b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b02      	cmp	r3, #2
 800157a:	d11b      	bne.n	80015b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f06f 0202 	mvn.w	r2, #2
 8001584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f8ed 	bl	800177a <HAL_TIM_IC_CaptureCallback>
 80015a0:	e005      	b.n	80015ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f8e0 	bl	8001768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 f8ef 	bl	800178c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b04      	cmp	r3, #4
 80015c0:	d122      	bne.n	8001608 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d11b      	bne.n	8001608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f06f 0204 	mvn.w	r2, #4
 80015d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2202      	movs	r2, #2
 80015de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f8c3 	bl	800177a <HAL_TIM_IC_CaptureCallback>
 80015f4:	e005      	b.n	8001602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f8b6 	bl	8001768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f8c5 	bl	800178c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b08      	cmp	r3, #8
 8001614:	d122      	bne.n	800165c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b08      	cmp	r3, #8
 8001622:	d11b      	bne.n	800165c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f06f 0208 	mvn.w	r2, #8
 800162c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2204      	movs	r2, #4
 8001632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f899 	bl	800177a <HAL_TIM_IC_CaptureCallback>
 8001648:	e005      	b.n	8001656 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f88c 	bl	8001768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f89b 	bl	800178c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b10      	cmp	r3, #16
 8001668:	d122      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b10      	cmp	r3, #16
 8001676:	d11b      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f06f 0210 	mvn.w	r2, #16
 8001680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2208      	movs	r2, #8
 8001686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f86f 	bl	800177a <HAL_TIM_IC_CaptureCallback>
 800169c:	e005      	b.n	80016aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f862 	bl	8001768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f871 	bl	800178c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10e      	bne.n	80016dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d107      	bne.n	80016dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0201 	mvn.w	r2, #1
 80016d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7fe fe76 	bl	80003c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e6:	2b80      	cmp	r3, #128	; 0x80
 80016e8:	d10e      	bne.n	8001708 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f4:	2b80      	cmp	r3, #128	; 0x80
 80016f6:	d107      	bne.n	8001708 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8bf 	bl	8001886 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001712:	2b40      	cmp	r3, #64	; 0x40
 8001714:	d10e      	bne.n	8001734 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001720:	2b40      	cmp	r3, #64	; 0x40
 8001722:	d107      	bne.n	8001734 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800172c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f835 	bl	800179e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	2b20      	cmp	r3, #32
 8001740:	d10e      	bne.n	8001760 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0320 	and.w	r3, r3, #32
 800174c:	2b20      	cmp	r3, #32
 800174e:	d107      	bne.n	8001760 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0220 	mvn.w	r2, #32
 8001758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f88a 	bl	8001874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a29      	ldr	r2, [pc, #164]	; (8001868 <TIM_Base_SetConfig+0xb8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00b      	beq.n	80017e0 <TIM_Base_SetConfig+0x30>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ce:	d007      	beq.n	80017e0 <TIM_Base_SetConfig+0x30>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a26      	ldr	r2, [pc, #152]	; (800186c <TIM_Base_SetConfig+0xbc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d003      	beq.n	80017e0 <TIM_Base_SetConfig+0x30>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a25      	ldr	r2, [pc, #148]	; (8001870 <TIM_Base_SetConfig+0xc0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d108      	bne.n	80017f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <TIM_Base_SetConfig+0xb8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00b      	beq.n	8001812 <TIM_Base_SetConfig+0x62>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001800:	d007      	beq.n	8001812 <TIM_Base_SetConfig+0x62>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a19      	ldr	r2, [pc, #100]	; (800186c <TIM_Base_SetConfig+0xbc>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d003      	beq.n	8001812 <TIM_Base_SetConfig+0x62>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a18      	ldr	r2, [pc, #96]	; (8001870 <TIM_Base_SetConfig+0xc0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d108      	bne.n	8001824 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4313      	orrs	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	4313      	orrs	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <TIM_Base_SetConfig+0xb8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d103      	bne.n	8001858 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	615a      	str	r2, [r3, #20]
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40012c00 	.word	0x40012c00
 800186c:	40000400 	.word	0x40000400
 8001870:	40000800 	.word	0x40000800

08001874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <xTaskCreate>:
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af04      	add	r7, sp, #16
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 fc20 	bl	80030f0 <pvPortMalloc>
 80018b0:	6178      	str	r0, [r7, #20]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <xTaskCreate+0x48>
 80018b8:	207c      	movs	r0, #124	; 0x7c
 80018ba:	f001 fc19 	bl	80030f0 <pvPortMalloc>
 80018be:	61f8      	str	r0, [r7, #28]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d008      	beq.n	80018d8 <xTaskCreate+0x40>
 80018c6:	227c      	movs	r2, #124	; 0x7c
 80018c8:	2100      	movs	r1, #0
 80018ca:	69f8      	ldr	r0, [r7, #28]
 80018cc:	f002 fab6 	bl	8003e3c <memset>
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	631a      	str	r2, [r3, #48]	; 0x30
 80018d6:	e005      	b.n	80018e4 <xTaskCreate+0x4c>
 80018d8:	6978      	ldr	r0, [r7, #20]
 80018da:	f001 fc1b 	bl	8003114 <vPortFree>
 80018de:	e001      	b.n	80018e4 <xTaskCreate+0x4c>
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d013      	beq.n	8001912 <xTaskCreate+0x7a>
 80018ea:	2300      	movs	r3, #0
 80018ec:	9303      	str	r3, [sp, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	9302      	str	r3, [sp, #8]
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f80e 	bl	8001922 <prvInitialiseNewTask>
 8001906:	69f8      	ldr	r0, [r7, #28]
 8001908:	f000 f89a 	bl	8001a40 <prvAddNewTaskToReadyList>
 800190c:	2301      	movs	r3, #1
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	e002      	b.n	8001918 <xTaskCreate+0x80>
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	61bb      	str	r3, [r7, #24]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	4618      	mov	r0, r3
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <prvInitialiseNewTask>:
 8001922:	b580      	push	{r7, lr}
 8001924:	b088      	sub	sp, #32
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001932:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	461a      	mov	r2, r3
 800193a:	21a5      	movs	r1, #165	; 0xa5
 800193c:	f002 fa7e 	bl	8003e3c <memset>
 8001940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800194a:	3b01      	subs	r3, #1
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	f023 0307 	bic.w	r3, r3, #7
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00a      	beq.n	800197a <prvInitialiseNewTask+0x58>
 8001964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001968:	f383 8811 	msr	BASEPRI, r3
 800196c:	f3bf 8f6f 	isb	sy
 8001970:	f3bf 8f4f 	dsb	sy
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	bf00      	nop
 8001978:	e7fe      	b.n	8001978 <prvInitialiseNewTask+0x56>
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01e      	beq.n	80019be <prvInitialiseNewTask+0x9c>
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	e012      	b.n	80019ac <prvInitialiseNewTask+0x8a>
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	7819      	ldrb	r1, [r3, #0]
 800198e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	4413      	add	r3, r2
 8001994:	3334      	adds	r3, #52	; 0x34
 8001996:	460a      	mov	r2, r1
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <prvInitialiseNewTask+0x92>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3301      	adds	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b13      	cmp	r3, #19
 80019b0:	d9e9      	bls.n	8001986 <prvInitialiseNewTask+0x64>
 80019b2:	e000      	b.n	80019b6 <prvInitialiseNewTask+0x94>
 80019b4:	bf00      	nop
 80019b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80019be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d90a      	bls.n	80019da <prvInitialiseNewTask+0xb8>
 80019c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c8:	f383 8811 	msr	BASEPRI, r3
 80019cc:	f3bf 8f6f 	isb	sy
 80019d0:	f3bf 8f4f 	dsb	sy
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	bf00      	nop
 80019d8:	e7fe      	b.n	80019d8 <prvInitialiseNewTask+0xb6>
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d901      	bls.n	80019e4 <prvInitialiseNewTask+0xc2>
 80019e0:	2304      	movs	r3, #4
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ee:	651a      	str	r2, [r3, #80]	; 0x50
 80019f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f2:	3304      	adds	r3, #4
 80019f4:	4618      	mov	r0, r3
 80019f6:	f001 fbbe 	bl	8003176 <vListInitialiseItem>
 80019fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fc:	3318      	adds	r3, #24
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 fbb9 	bl	8003176 <vListInitialiseItem>
 8001a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	f1c3 0205 	rsb	r2, r3, #5
 8001a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a12:	619a      	str	r2, [r3, #24]
 8001a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	69b8      	ldr	r0, [r7, #24]
 8001a20:	f001 fc3a 	bl	8003298 <pxPortInitialiseStack>
 8001a24:	4602      	mov	r2, r0
 8001a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <prvInitialiseNewTask+0x114>
 8001a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	bf00      	nop
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <prvAddNewTaskToReadyList>:
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	f001 fd1a 	bl	8003480 <vPortEnterCritical>
 8001a4c:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <prvAddNewTaskToReadyList+0x114>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	4a40      	ldr	r2, [pc, #256]	; (8001b54 <prvAddNewTaskToReadyList+0x114>)
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <prvAddNewTaskToReadyList+0x118>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <prvAddNewTaskToReadyList+0x32>
 8001a5e:	4a3e      	ldr	r2, [pc, #248]	; (8001b58 <prvAddNewTaskToReadyList+0x118>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <prvAddNewTaskToReadyList+0x114>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d110      	bne.n	8001a8e <prvAddNewTaskToReadyList+0x4e>
 8001a6c:	f000 ff9a 	bl	80029a4 <prvInitialiseTaskLists>
 8001a70:	e00d      	b.n	8001a8e <prvAddNewTaskToReadyList+0x4e>
 8001a72:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <prvAddNewTaskToReadyList+0x11c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <prvAddNewTaskToReadyList+0x4e>
 8001a7a:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <prvAddNewTaskToReadyList+0x118>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d802      	bhi.n	8001a8e <prvAddNewTaskToReadyList+0x4e>
 8001a88:	4a33      	ldr	r2, [pc, #204]	; (8001b58 <prvAddNewTaskToReadyList+0x118>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <prvAddNewTaskToReadyList+0x120>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	4a32      	ldr	r2, [pc, #200]	; (8001b60 <prvAddNewTaskToReadyList+0x120>)
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <prvAddNewTaskToReadyList+0x120>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	649a      	str	r2, [r3, #72]	; 0x48
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <prvAddNewTaskToReadyList+0x124>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d903      	bls.n	8001ab4 <prvAddNewTaskToReadyList+0x74>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	4a2c      	ldr	r2, [pc, #176]	; (8001b64 <prvAddNewTaskToReadyList+0x124>)
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab8:	492b      	ldr	r1, [pc, #172]	; (8001b68 <prvAddNewTaskToReadyList+0x128>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	3204      	adds	r2, #4
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	1d1a      	adds	r2, r3, #4
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <prvAddNewTaskToReadyList+0x128>)
 8001af8:	441a      	add	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	615a      	str	r2, [r3, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b02:	4919      	ldr	r1, [pc, #100]	; (8001b68 <prvAddNewTaskToReadyList+0x128>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	1c59      	adds	r1, r3, #1
 8001b12:	4815      	ldr	r0, [pc, #84]	; (8001b68 <prvAddNewTaskToReadyList+0x128>)
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4403      	add	r3, r0
 8001b1e:	6019      	str	r1, [r3, #0]
 8001b20:	f001 fcde 	bl	80034e0 <vPortExitCritical>
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <prvAddNewTaskToReadyList+0x11c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00e      	beq.n	8001b4a <prvAddNewTaskToReadyList+0x10a>
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <prvAddNewTaskToReadyList+0x118>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d207      	bcs.n	8001b4a <prvAddNewTaskToReadyList+0x10a>
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <prvAddNewTaskToReadyList+0x12c>)
 8001b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	f3bf 8f4f 	dsb	sy
 8001b46:	f3bf 8f6f 	isb	sy
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000170 	.word	0x20000170
 8001b58:	20000098 	.word	0x20000098
 8001b5c:	2000017c 	.word	0x2000017c
 8001b60:	2000018c 	.word	0x2000018c
 8001b64:	20000178 	.word	0x20000178
 8001b68:	2000009c 	.word	0x2000009c
 8001b6c:	e000ed04 	.word	0xe000ed04

08001b70 <vTaskDelay>:
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d017      	beq.n	8001bb2 <vTaskDelay+0x42>
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <vTaskDelay+0x60>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00a      	beq.n	8001ba0 <vTaskDelay+0x30>
 8001b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8e:	f383 8811 	msr	BASEPRI, r3
 8001b92:	f3bf 8f6f 	isb	sy
 8001b96:	f3bf 8f4f 	dsb	sy
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	bf00      	nop
 8001b9e:	e7fe      	b.n	8001b9e <vTaskDelay+0x2e>
 8001ba0:	f000 f9a4 	bl	8001eec <vTaskSuspendAll>
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 ffb2 	bl	8002b10 <prvAddCurrentTaskToDelayedList>
 8001bac:	f000 f9e2 	bl	8001f74 <xTaskResumeAll>
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d107      	bne.n	8001bc8 <vTaskDelay+0x58>
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <vTaskDelay+0x64>)
 8001bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	f3bf 8f4f 	dsb	sy
 8001bc4:	f3bf 8f6f 	isb	sy
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000198 	.word	0x20000198
 8001bd4:	e000ed04 	.word	0xe000ed04

08001bd8 <vTaskSuspend>:
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	f001 fc4e 	bl	8003480 <vPortEnterCritical>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <vTaskSuspend+0x18>
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <vTaskSuspend+0xec>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	e000      	b.n	8001bf2 <vTaskSuspend+0x1a>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 fb23 	bl	8003244 <uxListRemove>
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <vTaskSuspend+0x38>
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	3318      	adds	r3, #24
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f001 fb1a 	bl	8003244 <uxListRemove>
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	3304      	adds	r3, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	482c      	ldr	r0, [pc, #176]	; (8001cc8 <vTaskSuspend+0xf0>)
 8001c18:	f001 fab9 	bl	800318e <vListInsertEnd>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e010      	b.n	8001c44 <vTaskSuspend+0x6c>
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	4413      	add	r3, r2
 8001c28:	3378      	adds	r3, #120	; 0x78
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d105      	bne.n	8001c3e <vTaskSuspend+0x66>
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	4413      	add	r3, r2
 8001c38:	3378      	adds	r3, #120	; 0x78
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	ddeb      	ble.n	8001c22 <vTaskSuspend+0x4a>
 8001c4a:	f001 fc49 	bl	80034e0 <vPortExitCritical>
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <vTaskSuspend+0xf4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d005      	beq.n	8001c62 <vTaskSuspend+0x8a>
 8001c56:	f001 fc13 	bl	8003480 <vPortEnterCritical>
 8001c5a:	f000 ff21 	bl	8002aa0 <prvResetNextTaskUnblockTime>
 8001c5e:	f001 fc3f 	bl	80034e0 <vPortExitCritical>
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <vTaskSuspend+0xec>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d127      	bne.n	8001cbc <vTaskSuspend+0xe4>
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <vTaskSuspend+0xf4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d017      	beq.n	8001ca4 <vTaskSuspend+0xcc>
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <vTaskSuspend+0xf8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00a      	beq.n	8001c92 <vTaskSuspend+0xba>
 8001c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c80:	f383 8811 	msr	BASEPRI, r3
 8001c84:	f3bf 8f6f 	isb	sy
 8001c88:	f3bf 8f4f 	dsb	sy
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	bf00      	nop
 8001c90:	e7fe      	b.n	8001c90 <vTaskSuspend+0xb8>
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <vTaskSuspend+0xfc>)
 8001c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	f3bf 8f4f 	dsb	sy
 8001c9e:	f3bf 8f6f 	isb	sy
 8001ca2:	e00b      	b.n	8001cbc <vTaskSuspend+0xe4>
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <vTaskSuspend+0xf0>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <vTaskSuspend+0x100>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d103      	bne.n	8001cb8 <vTaskSuspend+0xe0>
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <vTaskSuspend+0xec>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e001      	b.n	8001cbc <vTaskSuspend+0xe4>
 8001cb8:	f000 fbd8 	bl	800246c <vTaskSwitchContext>
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000098 	.word	0x20000098
 8001cc8:	2000015c 	.word	0x2000015c
 8001ccc:	2000017c 	.word	0x2000017c
 8001cd0:	20000198 	.word	0x20000198
 8001cd4:	e000ed04 	.word	0xe000ed04
 8001cd8:	20000170 	.word	0x20000170

08001cdc <prvTaskIsTaskSuspended>:
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10a      	bne.n	8001d08 <prvTaskIsTaskSuspended+0x2c>
 8001cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf6:	f383 8811 	msr	BASEPRI, r3
 8001cfa:	f3bf 8f6f 	isb	sy
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	bf00      	nop
 8001d06:	e7fe      	b.n	8001d06 <prvTaskIsTaskSuspended+0x2a>
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <prvTaskIsTaskSuspended+0x58>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10a      	bne.n	8001d28 <prvTaskIsTaskSuspended+0x4c>
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <prvTaskIsTaskSuspended+0x5c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d005      	beq.n	8001d28 <prvTaskIsTaskSuspended+0x4c>
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <prvTaskIsTaskSuspended+0x4c>
 8001d24:	2301      	movs	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	371c      	adds	r7, #28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	2000015c 	.word	0x2000015c
 8001d38:	20000130 	.word	0x20000130

08001d3c <vTaskResume>:
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10a      	bne.n	8001d64 <vTaskResume+0x28>
 8001d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d52:	f383 8811 	msr	BASEPRI, r3
 8001d56:	f3bf 8f6f 	isb	sy
 8001d5a:	f3bf 8f4f 	dsb	sy
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	bf00      	nop
 8001d62:	e7fe      	b.n	8001d62 <vTaskResume+0x26>
 8001d64:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <vTaskResume+0xfc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d060      	beq.n	8001e30 <vTaskResume+0xf4>
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d05d      	beq.n	8001e30 <vTaskResume+0xf4>
 8001d74:	f001 fb84 	bl	8003480 <vPortEnterCritical>
 8001d78:	6978      	ldr	r0, [r7, #20]
 8001d7a:	f7ff ffaf 	bl	8001cdc <prvTaskIsTaskSuspended>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d053      	beq.n	8001e2c <vTaskResume+0xf0>
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 fa5b 	bl	8003244 <uxListRemove>
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d92:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <vTaskResume+0x100>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d903      	bls.n	8001da2 <vTaskResume+0x66>
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	4a27      	ldr	r2, [pc, #156]	; (8001e3c <vTaskResume+0x100>)
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da6:	4926      	ldr	r1, [pc, #152]	; (8001e40 <vTaskResume+0x104>)
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	3304      	adds	r3, #4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	3204      	adds	r2, #4
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	1d1a      	adds	r2, r3, #4
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <vTaskResume+0x104>)
 8001de6:	441a      	add	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	615a      	str	r2, [r3, #20]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df0:	4913      	ldr	r1, [pc, #76]	; (8001e40 <vTaskResume+0x104>)
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1c59      	adds	r1, r3, #1
 8001e00:	480f      	ldr	r0, [pc, #60]	; (8001e40 <vTaskResume+0x104>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4403      	add	r3, r0
 8001e0c:	6019      	str	r1, [r3, #0]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <vTaskResume+0xfc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d307      	bcc.n	8001e2c <vTaskResume+0xf0>
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <vTaskResume+0x108>)
 8001e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	f001 fb58 	bl	80034e0 <vPortExitCritical>
 8001e30:	bf00      	nop
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000098 	.word	0x20000098
 8001e3c:	20000178 	.word	0x20000178
 8001e40:	2000009c 	.word	0x2000009c
 8001e44:	e000ed04 	.word	0xe000ed04

08001e48 <vTaskStartScheduler>:
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <vTaskStartScheduler+0x88>)
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2300      	movs	r3, #0
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	2280      	movs	r2, #128	; 0x80
 8001e5a:	491e      	ldr	r1, [pc, #120]	; (8001ed4 <vTaskStartScheduler+0x8c>)
 8001e5c:	481e      	ldr	r0, [pc, #120]	; (8001ed8 <vTaskStartScheduler+0x90>)
 8001e5e:	f7ff fd1b 	bl	8001898 <xTaskCreate>
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d102      	bne.n	8001e70 <vTaskStartScheduler+0x28>
 8001e6a:	f000 febf 	bl	8002bec <xTimerCreateTimerTask>
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d116      	bne.n	8001ea4 <vTaskStartScheduler+0x5c>
 8001e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7a:	f383 8811 	msr	BASEPRI, r3
 8001e7e:	f3bf 8f6f 	isb	sy
 8001e82:	f3bf 8f4f 	dsb	sy
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	bf00      	nop
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <vTaskStartScheduler+0x94>)
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <vTaskStartScheduler+0x98>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <vTaskStartScheduler+0x9c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	f001 fa7d 	bl	800339c <xPortStartScheduler>
 8001ea2:	e00e      	b.n	8001ec2 <vTaskStartScheduler+0x7a>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eaa:	d10a      	bne.n	8001ec2 <vTaskStartScheduler+0x7a>
 8001eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb0:	f383 8811 	msr	BASEPRI, r3
 8001eb4:	f3bf 8f6f 	isb	sy
 8001eb8:	f3bf 8f4f 	dsb	sy
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	bf00      	nop
 8001ec0:	e7fe      	b.n	8001ec0 <vTaskStartScheduler+0x78>
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <vTaskStartScheduler+0xa0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000194 	.word	0x20000194
 8001ed4:	08004000 	.word	0x08004000
 8001ed8:	080028b9 	.word	0x080028b9
 8001edc:	20000190 	.word	0x20000190
 8001ee0:	2000017c 	.word	0x2000017c
 8001ee4:	20000174 	.word	0x20000174
 8001ee8:	2000000c 	.word	0x2000000c

08001eec <vTaskSuspendAll>:
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <vTaskSuspendAll+0x18>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	4a03      	ldr	r2, [pc, #12]	; (8001f04 <vTaskSuspendAll+0x18>)
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000198 	.word	0x20000198

08001f08 <prvGetExpectedIdleTime>:
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <prvGetExpectedIdleTime+0x58>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <prvGetExpectedIdleTime+0x16>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <prvGetExpectedIdleTime+0x5c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <prvGetExpectedIdleTime+0x26>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	e012      	b.n	8001f54 <prvGetExpectedIdleTime+0x4c>
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <prvGetExpectedIdleTime+0x60>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d902      	bls.n	8001f3c <prvGetExpectedIdleTime+0x34>
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	e00b      	b.n	8001f54 <prvGetExpectedIdleTime+0x4c>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <prvGetExpectedIdleTime+0x40>
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	e005      	b.n	8001f54 <prvGetExpectedIdleTime+0x4c>
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <prvGetExpectedIdleTime+0x64>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <prvGetExpectedIdleTime+0x68>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	20000178 	.word	0x20000178
 8001f64:	20000098 	.word	0x20000098
 8001f68:	2000009c 	.word	0x2000009c
 8001f6c:	20000190 	.word	0x20000190
 8001f70:	20000174 	.word	0x20000174

08001f74 <xTaskResumeAll>:
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	4b71      	ldr	r3, [pc, #452]	; (8002148 <xTaskResumeAll+0x1d4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10a      	bne.n	8001fa0 <xTaskResumeAll+0x2c>
 8001f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8e:	f383 8811 	msr	BASEPRI, r3
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	bf00      	nop
 8001f9e:	e7fe      	b.n	8001f9e <xTaskResumeAll+0x2a>
 8001fa0:	f001 fa6e 	bl	8003480 <vPortEnterCritical>
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <xTaskResumeAll+0x1d4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	4a67      	ldr	r2, [pc, #412]	; (8002148 <xTaskResumeAll+0x1d4>)
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b66      	ldr	r3, [pc, #408]	; (8002148 <xTaskResumeAll+0x1d4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 80c1 	bne.w	800213a <xTaskResumeAll+0x1c6>
 8001fb8:	4b64      	ldr	r3, [pc, #400]	; (800214c <xTaskResumeAll+0x1d8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80bc 	beq.w	800213a <xTaskResumeAll+0x1c6>
 8001fc2:	e08b      	b.n	80020dc <xTaskResumeAll+0x168>
 8001fc4:	4b62      	ldr	r3, [pc, #392]	; (8002150 <xTaskResumeAll+0x1dc>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	6a12      	ldr	r2, [r2, #32]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	69d2      	ldr	r2, [r2, #28]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3318      	adds	r3, #24
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d103      	bne.n	8001ffa <xTaskResumeAll+0x86>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	6a1a      	ldr	r2, [r3, #32]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	1e5a      	subs	r2, r3, #1
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	68d2      	ldr	r2, [r2, #12]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	6892      	ldr	r2, [r2, #8]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	3304      	adds	r3, #4
 800202c:	429a      	cmp	r2, r3
 800202e:	d103      	bne.n	8002038 <xTaskResumeAll+0xc4>
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2200      	movs	r2, #0
 800203c:	615a      	str	r2, [r3, #20]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1e5a      	subs	r2, r3, #1
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204c:	4b41      	ldr	r3, [pc, #260]	; (8002154 <xTaskResumeAll+0x1e0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d903      	bls.n	800205c <xTaskResumeAll+0xe8>
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	4a3e      	ldr	r2, [pc, #248]	; (8002154 <xTaskResumeAll+0x1e0>)
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002060:	493d      	ldr	r1, [pc, #244]	; (8002158 <xTaskResumeAll+0x1e4>)
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3304      	adds	r3, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	3204      	adds	r2, #4
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	1d1a      	adds	r2, r3, #4
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4a2e      	ldr	r2, [pc, #184]	; (8002158 <xTaskResumeAll+0x1e4>)
 80020a0:	441a      	add	r2, r3
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	615a      	str	r2, [r3, #20]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020aa:	492b      	ldr	r1, [pc, #172]	; (8002158 <xTaskResumeAll+0x1e4>)
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1c59      	adds	r1, r3, #1
 80020ba:	4827      	ldr	r0, [pc, #156]	; (8002158 <xTaskResumeAll+0x1e4>)
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4403      	add	r3, r0
 80020c6:	6019      	str	r1, [r3, #0]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <xTaskResumeAll+0x1e8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d302      	bcc.n	80020dc <xTaskResumeAll+0x168>
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <xTaskResumeAll+0x1ec>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <xTaskResumeAll+0x1dc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f47f af6f 	bne.w	8001fc4 <xTaskResumeAll+0x50>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <xTaskResumeAll+0x17c>
 80020ec:	f000 fcd8 	bl	8002aa0 <prvResetNextTaskUnblockTime>
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <xTaskResumeAll+0x1f0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d010      	beq.n	800211e <xTaskResumeAll+0x1aa>
 80020fc:	f000 f89e 	bl	800223c <xTaskIncrementTick>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <xTaskResumeAll+0x198>
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <xTaskResumeAll+0x1ec>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3b01      	subs	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f1      	bne.n	80020fc <xTaskResumeAll+0x188>
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <xTaskResumeAll+0x1f0>)
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <xTaskResumeAll+0x1ec>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <xTaskResumeAll+0x1c6>
 8002126:	2301      	movs	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <xTaskResumeAll+0x1f4>)
 800212c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f3bf 8f4f 	dsb	sy
 8002136:	f3bf 8f6f 	isb	sy
 800213a:	f001 f9d1 	bl	80034e0 <vPortExitCritical>
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4618      	mov	r0, r3
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000198 	.word	0x20000198
 800214c:	20000170 	.word	0x20000170
 8002150:	20000130 	.word	0x20000130
 8002154:	20000178 	.word	0x20000178
 8002158:	2000009c 	.word	0x2000009c
 800215c:	20000098 	.word	0x20000098
 8002160:	20000184 	.word	0x20000184
 8002164:	20000180 	.word	0x20000180
 8002168:	e000ed04 	.word	0xe000ed04

0800216c <xTaskGetTickCount>:
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <xTaskGetTickCount+0x18>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	20000174 	.word	0x20000174

08002188 <vTaskStepTick>:
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <vTaskStepTick+0xa4>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	441a      	add	r2, r3
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <vTaskStepTick+0xa8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d90a      	bls.n	80021b6 <vTaskStepTick+0x2e>
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	bf00      	nop
 80021b4:	e7fe      	b.n	80021b4 <vTaskStepTick+0x2c>
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <vTaskStepTick+0xa4>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	441a      	add	r2, r3
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <vTaskStepTick+0xa8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d128      	bne.n	8002218 <vTaskStepTick+0x90>
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <vTaskStepTick+0xac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10a      	bne.n	80021e4 <vTaskStepTick+0x5c>
 80021ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d2:	f383 8811 	msr	BASEPRI, r3
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	bf00      	nop
 80021e2:	e7fe      	b.n	80021e2 <vTaskStepTick+0x5a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10a      	bne.n	8002200 <vTaskStepTick+0x78>
 80021ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ee:	f383 8811 	msr	BASEPRI, r3
 80021f2:	f3bf 8f6f 	isb	sy
 80021f6:	f3bf 8f4f 	dsb	sy
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	bf00      	nop
 80021fe:	e7fe      	b.n	80021fe <vTaskStepTick+0x76>
 8002200:	f001 f93e 	bl	8003480 <vPortEnterCritical>
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <vTaskStepTick+0xb0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	4a0b      	ldr	r2, [pc, #44]	; (8002238 <vTaskStepTick+0xb0>)
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	f001 f967 	bl	80034e0 <vPortExitCritical>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3b01      	subs	r3, #1
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <vTaskStepTick+0xa4>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4413      	add	r3, r2
 8002220:	4a02      	ldr	r2, [pc, #8]	; (800222c <vTaskStepTick+0xa4>)
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	bf00      	nop
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20000174 	.word	0x20000174
 8002230:	20000190 	.word	0x20000190
 8002234:	20000198 	.word	0x20000198
 8002238:	20000180 	.word	0x20000180

0800223c <xTaskIncrementTick>:
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	4b7e      	ldr	r3, [pc, #504]	; (8002440 <xTaskIncrementTick+0x204>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 80ed 	bne.w	800242a <xTaskIncrementTick+0x1ee>
 8002250:	4b7c      	ldr	r3, [pc, #496]	; (8002444 <xTaskIncrementTick+0x208>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	4a7a      	ldr	r2, [pc, #488]	; (8002444 <xTaskIncrementTick+0x208>)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d120      	bne.n	80022a6 <xTaskIncrementTick+0x6a>
 8002264:	4b78      	ldr	r3, [pc, #480]	; (8002448 <xTaskIncrementTick+0x20c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00a      	beq.n	8002284 <xTaskIncrementTick+0x48>
 800226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	bf00      	nop
 8002282:	e7fe      	b.n	8002282 <xTaskIncrementTick+0x46>
 8002284:	4b70      	ldr	r3, [pc, #448]	; (8002448 <xTaskIncrementTick+0x20c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	4b70      	ldr	r3, [pc, #448]	; (800244c <xTaskIncrementTick+0x210>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a6e      	ldr	r2, [pc, #440]	; (8002448 <xTaskIncrementTick+0x20c>)
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4a6e      	ldr	r2, [pc, #440]	; (800244c <xTaskIncrementTick+0x210>)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <xTaskIncrementTick+0x214>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a6c      	ldr	r2, [pc, #432]	; (8002450 <xTaskIncrementTick+0x214>)
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	f000 fbfd 	bl	8002aa0 <prvResetNextTaskUnblockTime>
 80022a6:	4b6b      	ldr	r3, [pc, #428]	; (8002454 <xTaskIncrementTick+0x218>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a3a      	ldr	r2, [r7, #32]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f0c0 80a7 	bcc.w	8002400 <xTaskIncrementTick+0x1c4>
 80022b2:	4b65      	ldr	r3, [pc, #404]	; (8002448 <xTaskIncrementTick+0x20c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d104      	bne.n	80022c6 <xTaskIncrementTick+0x8a>
 80022bc:	4b65      	ldr	r3, [pc, #404]	; (8002454 <xTaskIncrementTick+0x218>)
 80022be:	f04f 32ff 	mov.w	r2, #4294967295
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e09c      	b.n	8002400 <xTaskIncrementTick+0x1c4>
 80022c6:	4b60      	ldr	r3, [pc, #384]	; (8002448 <xTaskIncrementTick+0x20c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	6a3a      	ldr	r2, [r7, #32]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d203      	bcs.n	80022e6 <xTaskIncrementTick+0xaa>
 80022de:	4a5d      	ldr	r2, [pc, #372]	; (8002454 <xTaskIncrementTick+0x218>)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e08c      	b.n	8002400 <xTaskIncrementTick+0x1c4>
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	68d2      	ldr	r2, [r2, #12]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	6892      	ldr	r2, [r2, #8]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	3304      	adds	r3, #4
 8002308:	429a      	cmp	r2, r3
 800230a:	d103      	bne.n	8002314 <xTaskIncrementTick+0xd8>
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2200      	movs	r2, #0
 8002318:	615a      	str	r2, [r3, #20]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	1e5a      	subs	r2, r3, #1
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01e      	beq.n	800236a <xTaskIncrementTick+0x12e>
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	6a12      	ldr	r2, [r2, #32]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	69d2      	ldr	r2, [r2, #28]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	3318      	adds	r3, #24
 800234e:	429a      	cmp	r2, r3
 8002350:	d103      	bne.n	800235a <xTaskIncrementTick+0x11e>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	6a1a      	ldr	r2, [r3, #32]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2200      	movs	r2, #0
 800235e:	629a      	str	r2, [r3, #40]	; 0x28
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236e:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <xTaskIncrementTick+0x21c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d903      	bls.n	800237e <xTaskIncrementTick+0x142>
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	4a37      	ldr	r2, [pc, #220]	; (8002458 <xTaskIncrementTick+0x21c>)
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002382:	4936      	ldr	r1, [pc, #216]	; (800245c <xTaskIncrementTick+0x220>)
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	3304      	adds	r3, #4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	3204      	adds	r2, #4
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1d1a      	adds	r2, r3, #4
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4a26      	ldr	r2, [pc, #152]	; (800245c <xTaskIncrementTick+0x220>)
 80023c2:	441a      	add	r2, r3
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	615a      	str	r2, [r3, #20]
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	4923      	ldr	r1, [pc, #140]	; (800245c <xTaskIncrementTick+0x220>)
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	1c59      	adds	r1, r3, #1
 80023dc:	481f      	ldr	r0, [pc, #124]	; (800245c <xTaskIncrementTick+0x220>)
 80023de:	4613      	mov	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4403      	add	r3, r0
 80023e8:	6019      	str	r1, [r3, #0]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <xTaskIncrementTick+0x224>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f67f af5c 	bls.w	80022b2 <xTaskIncrementTick+0x76>
 80023fa:	2301      	movs	r3, #1
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
 80023fe:	e758      	b.n	80022b2 <xTaskIncrementTick+0x76>
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <xTaskIncrementTick+0x224>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002406:	4915      	ldr	r1, [pc, #84]	; (800245c <xTaskIncrementTick+0x220>)
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d901      	bls.n	800241c <xTaskIncrementTick+0x1e0>
 8002418:	2301      	movs	r3, #1
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <xTaskIncrementTick+0x228>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <xTaskIncrementTick+0x1f8>
 8002424:	2301      	movs	r3, #1
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
 8002428:	e004      	b.n	8002434 <xTaskIncrementTick+0x1f8>
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <xTaskIncrementTick+0x22c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <xTaskIncrementTick+0x22c>)
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	4618      	mov	r0, r3
 8002438:	3728      	adds	r7, #40	; 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000198 	.word	0x20000198
 8002444:	20000174 	.word	0x20000174
 8002448:	20000128 	.word	0x20000128
 800244c:	2000012c 	.word	0x2000012c
 8002450:	20000188 	.word	0x20000188
 8002454:	20000190 	.word	0x20000190
 8002458:	20000178 	.word	0x20000178
 800245c:	2000009c 	.word	0x2000009c
 8002460:	20000098 	.word	0x20000098
 8002464:	20000184 	.word	0x20000184
 8002468:	20000180 	.word	0x20000180

0800246c <vTaskSwitchContext>:
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	4b27      	ldr	r3, [pc, #156]	; (8002510 <vTaskSwitchContext+0xa4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <vTaskSwitchContext+0x16>
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <vTaskSwitchContext+0xa8>)
 800247c:	2201      	movs	r2, #1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e041      	b.n	8002506 <vTaskSwitchContext+0x9a>
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <vTaskSwitchContext+0xa8>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <vTaskSwitchContext+0xac>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e010      	b.n	80024b2 <vTaskSwitchContext+0x46>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <vTaskSwitchContext+0x40>
 8002496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	bf00      	nop
 80024aa:	e7fe      	b.n	80024aa <vTaskSwitchContext+0x3e>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	491a      	ldr	r1, [pc, #104]	; (800251c <vTaskSwitchContext+0xb0>)
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0e4      	beq.n	8002490 <vTaskSwitchContext+0x24>
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4a12      	ldr	r2, [pc, #72]	; (800251c <vTaskSwitchContext+0xb0>)
 80024d2:	4413      	add	r3, r2
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	3308      	adds	r3, #8
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d104      	bne.n	80024f6 <vTaskSwitchContext+0x8a>
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a08      	ldr	r2, [pc, #32]	; (8002520 <vTaskSwitchContext+0xb4>)
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4a05      	ldr	r2, [pc, #20]	; (8002518 <vTaskSwitchContext+0xac>)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	20000198 	.word	0x20000198
 8002514:	20000184 	.word	0x20000184
 8002518:	20000178 	.word	0x20000178
 800251c:	2000009c 	.word	0x2000009c
 8002520:	20000098 	.word	0x20000098

08002524 <vTaskPlaceOnEventList>:
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <vTaskPlaceOnEventList+0x26>
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	bf00      	nop
 8002548:	e7fe      	b.n	8002548 <vTaskPlaceOnEventList+0x24>
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <vTaskPlaceOnEventList+0x44>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3318      	adds	r3, #24
 8002550:	4619      	mov	r1, r3
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fe3e 	bl	80031d4 <vListInsert>
 8002558:	2101      	movs	r1, #1
 800255a:	6838      	ldr	r0, [r7, #0]
 800255c:	f000 fad8 	bl	8002b10 <prvAddCurrentTaskToDelayedList>
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000098 	.word	0x20000098

0800256c <vTaskPlaceOnEventListRestricted>:
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <vTaskPlaceOnEventListRestricted+0x28>
 800257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	bf00      	nop
 8002592:	e7fe      	b.n	8002592 <vTaskPlaceOnEventListRestricted+0x26>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <vTaskPlaceOnEventListRestricted+0x88>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	61da      	str	r2, [r3, #28]
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	621a      	str	r2, [r3, #32]
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	3218      	adds	r2, #24
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f103 0218 	add.w	r2, r3, #24
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <vTaskPlaceOnEventListRestricted+0x76>
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	68b8      	ldr	r0, [r7, #8]
 80025e6:	f000 fa93 	bl	8002b10 <prvAddCurrentTaskToDelayedList>
 80025ea:	bf00      	nop
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000098 	.word	0x20000098

080025f8 <xTaskRemoveFromEventList>:
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	623b      	str	r3, [r7, #32]
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <xTaskRemoveFromEventList+0x2c>
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	bf00      	nop
 8002622:	e7fe      	b.n	8002622 <xTaskRemoveFromEventList+0x2a>
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	6a3a      	ldr	r2, [r7, #32]
 8002630:	6a12      	ldr	r2, [r2, #32]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	69d2      	ldr	r2, [r2, #28]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	3318      	adds	r3, #24
 8002646:	429a      	cmp	r2, r3
 8002648:	d103      	bne.n	8002652 <xTaskRemoveFromEventList+0x5a>
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	6a1a      	ldr	r2, [r3, #32]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	2200      	movs	r2, #0
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	4b4b      	ldr	r3, [pc, #300]	; (8002790 <xTaskRemoveFromEventList+0x198>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d161      	bne.n	800272e <xTaskRemoveFromEventList+0x136>
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	6a3a      	ldr	r2, [r7, #32]
 8002676:	68d2      	ldr	r2, [r2, #12]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	6a3a      	ldr	r2, [r7, #32]
 8002680:	6892      	ldr	r2, [r2, #8]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	3304      	adds	r3, #4
 800268c:	429a      	cmp	r2, r3
 800268e:	d103      	bne.n	8002698 <xTaskRemoveFromEventList+0xa0>
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	2200      	movs	r2, #0
 800269c:	615a      	str	r2, [r3, #20]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ac:	4b39      	ldr	r3, [pc, #228]	; (8002794 <xTaskRemoveFromEventList+0x19c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d903      	bls.n	80026bc <xTaskRemoveFromEventList+0xc4>
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	4a36      	ldr	r2, [pc, #216]	; (8002794 <xTaskRemoveFromEventList+0x19c>)
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c0:	4935      	ldr	r1, [pc, #212]	; (8002798 <xTaskRemoveFromEventList+0x1a0>)
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	3304      	adds	r3, #4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	60da      	str	r2, [r3, #12]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	6a3a      	ldr	r2, [r7, #32]
 80026e6:	3204      	adds	r2, #4
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	1d1a      	adds	r2, r3, #4
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4a26      	ldr	r2, [pc, #152]	; (8002798 <xTaskRemoveFromEventList+0x1a0>)
 8002700:	441a      	add	r2, r3
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	615a      	str	r2, [r3, #20]
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270a:	4923      	ldr	r1, [pc, #140]	; (8002798 <xTaskRemoveFromEventList+0x1a0>)
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1c59      	adds	r1, r3, #1
 800271a:	481f      	ldr	r0, [pc, #124]	; (8002798 <xTaskRemoveFromEventList+0x1a0>)
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4403      	add	r3, r0
 8002726:	6019      	str	r1, [r3, #0]
 8002728:	f000 f9ba 	bl	8002aa0 <prvResetNextTaskUnblockTime>
 800272c:	e01b      	b.n	8002766 <xTaskRemoveFromEventList+0x16e>
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <xTaskRemoveFromEventList+0x1a4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	61da      	str	r2, [r3, #28]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	621a      	str	r2, [r3, #32]
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	6a3a      	ldr	r2, [r7, #32]
 8002748:	3218      	adds	r2, #24
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f103 0218 	add.w	r2, r3, #24
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	4a10      	ldr	r2, [pc, #64]	; (800279c <xTaskRemoveFromEventList+0x1a4>)
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <xTaskRemoveFromEventList+0x1a4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <xTaskRemoveFromEventList+0x1a4>)
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <xTaskRemoveFromEventList+0x1a8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	429a      	cmp	r2, r3
 8002772:	d905      	bls.n	8002780 <xTaskRemoveFromEventList+0x188>
 8002774:	2301      	movs	r3, #1
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <xTaskRemoveFromEventList+0x1ac>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e001      	b.n	8002784 <xTaskRemoveFromEventList+0x18c>
 8002780:	2300      	movs	r3, #0
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	4618      	mov	r0, r3
 8002788:	3728      	adds	r7, #40	; 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000198 	.word	0x20000198
 8002794:	20000178 	.word	0x20000178
 8002798:	2000009c 	.word	0x2000009c
 800279c:	20000130 	.word	0x20000130
 80027a0:	20000098 	.word	0x20000098
 80027a4:	20000184 	.word	0x20000184

080027a8 <vTaskInternalSetTimeOutState>:
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <vTaskInternalSetTimeOutState+0x24>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <vTaskInternalSetTimeOutState+0x28>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000188 	.word	0x20000188
 80027d0:	20000174 	.word	0x20000174

080027d4 <xTaskCheckForTimeOut>:
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <xTaskCheckForTimeOut+0x26>
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	bf00      	nop
 80027f8:	e7fe      	b.n	80027f8 <xTaskCheckForTimeOut+0x24>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <xTaskCheckForTimeOut+0x42>
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xTaskCheckForTimeOut+0x40>
 8002816:	f000 fe33 	bl	8003480 <vPortEnterCritical>
 800281a:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <xTaskCheckForTimeOut+0xc4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d102      	bne.n	800283a <xTaskCheckForTimeOut+0x66>
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	e026      	b.n	8002888 <xTaskCheckForTimeOut+0xb4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <xTaskCheckForTimeOut+0xc8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d00a      	beq.n	800285c <xTaskCheckForTimeOut+0x88>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	429a      	cmp	r2, r3
 800284e:	d305      	bcc.n	800285c <xTaskCheckForTimeOut+0x88>
 8002850:	2301      	movs	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e015      	b.n	8002888 <xTaskCheckForTimeOut+0xb4>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	429a      	cmp	r2, r3
 8002864:	d20b      	bcs.n	800287e <xTaskCheckForTimeOut+0xaa>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	1ad2      	subs	r2, r2, r3
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ff98 	bl	80027a8 <vTaskInternalSetTimeOutState>
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	e004      	b.n	8002888 <xTaskCheckForTimeOut+0xb4>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	2301      	movs	r3, #1
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	f000 fe2a 	bl	80034e0 <vPortExitCritical>
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4618      	mov	r0, r3
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000174 	.word	0x20000174
 800289c:	20000188 	.word	0x20000188

080028a0 <vTaskMissedYield>:
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <vTaskMissedYield+0x14>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000184 	.word	0x20000184

080028b8 <prvIdleTask>:
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	f000 f8b0 	bl	8002a24 <prvCheckTasksWaitingTermination>
 80028c4:	4b18      	ldr	r3, [pc, #96]	; (8002928 <prvIdleTask+0x70>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d907      	bls.n	80028dc <prvIdleTask+0x24>
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <prvIdleTask+0x74>)
 80028ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f7ff fb14 	bl	8001f08 <prvGetExpectedIdleTime>
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d9eb      	bls.n	80028c0 <prvIdleTask+0x8>
 80028e8:	f7ff fb00 	bl	8001eec <vTaskSuspendAll>
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <prvIdleTask+0x78>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <prvIdleTask+0x7c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d20a      	bcs.n	800290e <prvIdleTask+0x56>
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	bf00      	nop
 800290c:	e7fe      	b.n	800290c <prvIdleTask+0x54>
 800290e:	f7ff fafb 	bl	8001f08 <prvGetExpectedIdleTime>
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d902      	bls.n	8002920 <prvIdleTask+0x68>
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fe4e 	bl	80035bc <vPortSuppressTicksAndSleep>
 8002920:	f7ff fb28 	bl	8001f74 <xTaskResumeAll>
 8002924:	e7cc      	b.n	80028c0 <prvIdleTask+0x8>
 8002926:	bf00      	nop
 8002928:	2000009c 	.word	0x2000009c
 800292c:	e000ed04 	.word	0xe000ed04
 8002930:	20000190 	.word	0x20000190
 8002934:	20000174 	.word	0x20000174

08002938 <eTaskConfirmSleepModeStatus>:
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	2301      	movs	r3, #1
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	2301      	movs	r3, #1
 8002944:	71fb      	strb	r3, [r7, #7]
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <eTaskConfirmSleepModeStatus+0x58>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <eTaskConfirmSleepModeStatus+0x1c>
 800294e:	2300      	movs	r3, #0
 8002950:	71fb      	strb	r3, [r7, #7]
 8002952:	e017      	b.n	8002984 <eTaskConfirmSleepModeStatus+0x4c>
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <eTaskConfirmSleepModeStatus+0x5c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <eTaskConfirmSleepModeStatus+0x2a>
 800295c:	2300      	movs	r3, #0
 800295e:	71fb      	strb	r3, [r7, #7]
 8002960:	e010      	b.n	8002984 <eTaskConfirmSleepModeStatus+0x4c>
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <eTaskConfirmSleepModeStatus+0x60>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <eTaskConfirmSleepModeStatus+0x38>
 800296a:	2300      	movs	r3, #0
 800296c:	71fb      	strb	r3, [r7, #7]
 800296e:	e009      	b.n	8002984 <eTaskConfirmSleepModeStatus+0x4c>
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <eTaskConfirmSleepModeStatus+0x64>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <eTaskConfirmSleepModeStatus+0x68>)
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	1acb      	subs	r3, r1, r3
 800297c:	429a      	cmp	r2, r3
 800297e:	d101      	bne.n	8002984 <eTaskConfirmSleepModeStatus+0x4c>
 8002980:	2302      	movs	r3, #2
 8002982:	71fb      	strb	r3, [r7, #7]
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	20000130 	.word	0x20000130
 8002994:	20000184 	.word	0x20000184
 8002998:	20000180 	.word	0x20000180
 800299c:	2000015c 	.word	0x2000015c
 80029a0:	20000170 	.word	0x20000170

080029a4 <prvInitialiseTaskLists>:
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	e00c      	b.n	80029ca <prvInitialiseTaskLists+0x26>
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <prvInitialiseTaskLists+0x60>)
 80029bc:	4413      	add	r3, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fbba 	bl	8003138 <vListInitialise>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3301      	adds	r3, #1
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d9ef      	bls.n	80029b0 <prvInitialiseTaskLists+0xc>
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <prvInitialiseTaskLists+0x64>)
 80029d2:	f000 fbb1 	bl	8003138 <vListInitialise>
 80029d6:	480d      	ldr	r0, [pc, #52]	; (8002a0c <prvInitialiseTaskLists+0x68>)
 80029d8:	f000 fbae 	bl	8003138 <vListInitialise>
 80029dc:	480c      	ldr	r0, [pc, #48]	; (8002a10 <prvInitialiseTaskLists+0x6c>)
 80029de:	f000 fbab 	bl	8003138 <vListInitialise>
 80029e2:	480c      	ldr	r0, [pc, #48]	; (8002a14 <prvInitialiseTaskLists+0x70>)
 80029e4:	f000 fba8 	bl	8003138 <vListInitialise>
 80029e8:	480b      	ldr	r0, [pc, #44]	; (8002a18 <prvInitialiseTaskLists+0x74>)
 80029ea:	f000 fba5 	bl	8003138 <vListInitialise>
 80029ee:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <prvInitialiseTaskLists+0x78>)
 80029f0:	4a05      	ldr	r2, [pc, #20]	; (8002a08 <prvInitialiseTaskLists+0x64>)
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <prvInitialiseTaskLists+0x7c>)
 80029f6:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <prvInitialiseTaskLists+0x68>)
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000009c 	.word	0x2000009c
 8002a08:	20000100 	.word	0x20000100
 8002a0c:	20000114 	.word	0x20000114
 8002a10:	20000130 	.word	0x20000130
 8002a14:	20000144 	.word	0x20000144
 8002a18:	2000015c 	.word	0x2000015c
 8002a1c:	20000128 	.word	0x20000128
 8002a20:	2000012c 	.word	0x2000012c

08002a24 <prvCheckTasksWaitingTermination>:
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	e019      	b.n	8002a60 <prvCheckTasksWaitingTermination+0x3c>
 8002a2c:	f000 fd28 	bl	8003480 <vPortEnterCritical>
 8002a30:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <prvCheckTasksWaitingTermination+0x50>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fc01 	bl	8003244 <uxListRemove>
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <prvCheckTasksWaitingTermination+0x54>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	4a0b      	ldr	r2, [pc, #44]	; (8002a78 <prvCheckTasksWaitingTermination+0x54>)
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <prvCheckTasksWaitingTermination+0x58>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <prvCheckTasksWaitingTermination+0x58>)
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	f000 fd43 	bl	80034e0 <vPortExitCritical>
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f810 	bl	8002a80 <prvDeleteTCB>
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <prvCheckTasksWaitingTermination+0x58>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e1      	bne.n	8002a2c <prvCheckTasksWaitingTermination+0x8>
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000144 	.word	0x20000144
 8002a78:	20000170 	.word	0x20000170
 8002a7c:	20000158 	.word	0x20000158

08002a80 <prvDeleteTCB>:
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fb41 	bl	8003114 <vPortFree>
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fb3e 	bl	8003114 <vPortFree>
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <prvResetNextTaskUnblockTime>:
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <prvResetNextTaskUnblockTime+0x2c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <prvResetNextTaskUnblockTime+0x18>
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <prvResetNextTaskUnblockTime+0x30>)
 8002ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e005      	b.n	8002ac4 <prvResetNextTaskUnblockTime+0x24>
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <prvResetNextTaskUnblockTime+0x2c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <prvResetNextTaskUnblockTime+0x30>)
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	20000128 	.word	0x20000128
 8002ad0:	20000190 	.word	0x20000190

08002ad4 <xTaskGetSchedulerState>:
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <xTaskGetSchedulerState+0x34>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d102      	bne.n	8002ae8 <xTaskGetSchedulerState+0x14>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	e008      	b.n	8002afa <xTaskGetSchedulerState+0x26>
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <xTaskGetSchedulerState+0x38>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <xTaskGetSchedulerState+0x22>
 8002af0:	2302      	movs	r3, #2
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	e001      	b.n	8002afa <xTaskGetSchedulerState+0x26>
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	2000017c 	.word	0x2000017c
 8002b0c:	20000198 	.word	0x20000198

08002b10 <prvAddCurrentTaskToDelayedList>:
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3304      	adds	r3, #4
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fb8c 	bl	8003244 <uxListRemove>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b32:	d124      	bne.n	8002b7e <prvAddCurrentTaskToDelayedList+0x6e>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d021      	beq.n	8002b7e <prvAddCurrentTaskToDelayedList+0x6e>
 8002b3a:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <prvAddCurrentTaskToDelayedList+0xcc>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	6892      	ldr	r2, [r2, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	3204      	adds	r2, #4
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	1d1a      	adds	r2, r3, #4
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <prvAddCurrentTaskToDelayedList+0xcc>)
 8002b6e:	615a      	str	r2, [r3, #20]
 8002b70:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <prvAddCurrentTaskToDelayedList+0xcc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <prvAddCurrentTaskToDelayedList+0xcc>)
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	bf00      	nop
 8002b7c:	e026      	b.n	8002bcc <prvAddCurrentTaskToDelayedList+0xbc>
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d209      	bcs.n	8002baa <prvAddCurrentTaskToDelayedList+0x9a>
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <prvAddCurrentTaskToDelayedList+0xd0>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f000 fb16 	bl	80031d4 <vListInsert>
 8002ba8:	e010      	b.n	8002bcc <prvAddCurrentTaskToDelayedList+0xbc>
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f000 fb0c 	bl	80031d4 <vListInsert>
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d202      	bcs.n	8002bcc <prvAddCurrentTaskToDelayedList+0xbc>
 8002bc6:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	bf00      	nop
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000174 	.word	0x20000174
 8002bd8:	20000098 	.word	0x20000098
 8002bdc:	2000015c 	.word	0x2000015c
 8002be0:	2000012c 	.word	0x2000012c
 8002be4:	20000128 	.word	0x20000128
 8002be8:	20000190 	.word	0x20000190

08002bec <xTimerCreateTimerTask>:
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	f000 fa45 	bl	8003084 <prvCheckForValidListAndQueue>
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <xTimerCreateTimerTask+0x54>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <xTimerCreateTimerTask+0x2c>
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <xTimerCreateTimerTask+0x58>)
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	2303      	movs	r3, #3
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2280      	movs	r2, #128	; 0x80
 8002c0e:	490e      	ldr	r1, [pc, #56]	; (8002c48 <xTimerCreateTimerTask+0x5c>)
 8002c10:	480e      	ldr	r0, [pc, #56]	; (8002c4c <xTimerCreateTimerTask+0x60>)
 8002c12:	f7fe fe41 	bl	8001898 <xTaskCreate>
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10a      	bne.n	8002c34 <xTimerCreateTimerTask+0x48>
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	bf00      	nop
 8002c32:	e7fe      	b.n	8002c32 <xTimerCreateTimerTask+0x46>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200001cc 	.word	0x200001cc
 8002c44:	200001d0 	.word	0x200001d0
 8002c48:	08004008 	.word	0x08004008
 8002c4c:	08002cf5 	.word	0x08002cf5

08002c50 <prvReloadTimer>:
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	e008      	b.n	8002c70 <prvReloadTimer+0x20>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	4413      	add	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	4798      	blx	r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	699a      	ldr	r2, [r3, #24]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	18d1      	adds	r1, r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f8db 	bl	8002e38 <prvInsertTimerInActiveList>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ea      	bne.n	8002c5e <prvReloadTimer+0xe>
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <prvProcessExpiredTimer>:
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <prvProcessExpiredTimer+0x5c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fac9 	bl	8003244 <uxListRemove>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <prvProcessExpiredTimer+0x38>
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7ff ffc3 	bl	8002c50 <prvReloadTimer>
 8002cca:	e008      	b.n	8002cde <prvProcessExpiredTimer+0x4a>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	4798      	blx	r3
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200001c4 	.word	0x200001c4

08002cf4 <prvTimerTask>:
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	f107 0308 	add.w	r3, r7, #8
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f857 	bl	8002db4 <prvGetNextExpireTime>
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f803 	bl	8002d18 <prvProcessTimerOrBlockTask>
 8002d12:	f000 f8d3 	bl	8002ebc <prvProcessReceivedCommands>
 8002d16:	e7f1      	b.n	8002cfc <prvTimerTask+0x8>

08002d18 <prvProcessTimerOrBlockTask>:
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	f7ff f8e3 	bl	8001eec <vTaskSuspendAll>
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f864 	bl	8002df8 <prvSampleTimeNow>
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d130      	bne.n	8002d9a <prvProcessTimerOrBlockTask+0x82>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <prvProcessTimerOrBlockTask+0x3c>
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d806      	bhi.n	8002d54 <prvProcessTimerOrBlockTask+0x3c>
 8002d46:	f7ff f915 	bl	8001f74 <xTaskResumeAll>
 8002d4a:	68f9      	ldr	r1, [r7, #12]
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ffa1 	bl	8002c94 <prvProcessExpiredTimer>
 8002d52:	e024      	b.n	8002d9e <prvProcessTimerOrBlockTask+0x86>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <prvProcessTimerOrBlockTask+0x54>
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <prvProcessTimerOrBlockTask+0x90>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <prvProcessTimerOrBlockTask+0x50>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <prvProcessTimerOrBlockTask+0x52>
 8002d68:	2300      	movs	r3, #0
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <prvProcessTimerOrBlockTask+0x94>)
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f000 ffe3 	bl	8003d44 <vQueueWaitForMessageRestricted>
 8002d7e:	f7ff f8f9 	bl	8001f74 <xTaskResumeAll>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <prvProcessTimerOrBlockTask+0x86>
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <prvProcessTimerOrBlockTask+0x98>)
 8002d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	e001      	b.n	8002d9e <prvProcessTimerOrBlockTask+0x86>
 8002d9a:	f7ff f8eb 	bl	8001f74 <xTaskResumeAll>
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	200001c8 	.word	0x200001c8
 8002dac:	200001cc 	.word	0x200001cc
 8002db0:	e000ed04 	.word	0xe000ed04

08002db4 <prvGetNextExpireTime>:
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <prvGetNextExpireTime+0x40>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <prvGetNextExpireTime+0x16>
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	e000      	b.n	8002dcc <prvGetNextExpireTime+0x18>
 8002dca:	2200      	movs	r2, #0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <prvGetNextExpireTime+0x30>
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <prvGetNextExpireTime+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	e001      	b.n	8002de8 <prvGetNextExpireTime+0x34>
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	200001c4 	.word	0x200001c4

08002df8 <prvSampleTimeNow>:
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	f7ff f9b4 	bl	800216c <xTaskGetTickCount>
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <prvSampleTimeNow+0x3c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d205      	bcs.n	8002e1c <prvSampleTimeNow+0x24>
 8002e10:	f000 f912 	bl	8003038 <prvSwitchTimerLists>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e002      	b.n	8002e22 <prvSampleTimeNow+0x2a>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <prvSampleTimeNow+0x3c>)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200001d4 	.word	0x200001d4

08002e38 <prvInsertTimerInActiveList>:
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	611a      	str	r2, [r3, #16]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d812      	bhi.n	8002e84 <prvInsertTimerInActiveList+0x4c>
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	1ad2      	subs	r2, r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d302      	bcc.n	8002e72 <prvInsertTimerInActiveList+0x3a>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e01b      	b.n	8002eaa <prvInsertTimerInActiveList+0x72>
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <prvInsertTimerInActiveList+0x7c>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	f000 f9a9 	bl	80031d4 <vListInsert>
 8002e82:	e012      	b.n	8002eaa <prvInsertTimerInActiveList+0x72>
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d206      	bcs.n	8002e9a <prvInsertTimerInActiveList+0x62>
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d302      	bcc.n	8002e9a <prvInsertTimerInActiveList+0x62>
 8002e94:	2301      	movs	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e007      	b.n	8002eaa <prvInsertTimerInActiveList+0x72>
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <prvInsertTimerInActiveList+0x80>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f000 f995 	bl	80031d4 <vListInsert>
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	200001c8 	.word	0x200001c8
 8002eb8:	200001c4 	.word	0x200001c4

08002ebc <prvProcessReceivedCommands>:
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	e0a6      	b.n	8003012 <prvProcessReceivedCommands+0x156>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f2c0 80a2 	blt.w	8003010 <prvProcessReceivedCommands+0x154>
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <prvProcessReceivedCommands+0x26>
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	3304      	adds	r3, #4
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 f9b1 	bl	8003244 <uxListRemove>
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff87 	bl	8002df8 <prvSampleTimeNow>
 8002eea:	61b8      	str	r0, [r7, #24]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	f200 808e 	bhi.w	8003012 <prvProcessReceivedCommands+0x156>
 8002ef6:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <prvProcessReceivedCommands+0x40>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f21 	.word	0x08002f21
 8002f00:	08002f21 	.word	0x08002f21
 8002f04:	08002f89 	.word	0x08002f89
 8002f08:	08002f9d 	.word	0x08002f9d
 8002f0c:	08002fe7 	.word	0x08002fe7
 8002f10:	08002f21 	.word	0x08002f21
 8002f14:	08002f21 	.word	0x08002f21
 8002f18:	08002f89 	.word	0x08002f89
 8002f1c:	08002f9d 	.word	0x08002f9d
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	18d1      	adds	r1, r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	69f8      	ldr	r0, [r7, #28]
 8002f40:	f7ff ff7a 	bl	8002e38 <prvInsertTimerInActiveList>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d063      	beq.n	8003012 <prvProcessReceivedCommands+0x156>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <prvProcessReceivedCommands+0xb0>
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	4413      	add	r3, r2
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4619      	mov	r1, r3
 8002f64:	69f8      	ldr	r0, [r7, #28]
 8002f66:	f7ff fe73 	bl	8002c50 <prvReloadTimer>
 8002f6a:	e008      	b.n	8002f7e <prvProcessReceivedCommands+0xc2>
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	69f8      	ldr	r0, [r7, #28]
 8002f84:	4798      	blx	r3
 8002f86:	e044      	b.n	8003012 <prvProcessReceivedCommands+0x156>
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002f9a:	e03a      	b.n	8003012 <prvProcessReceivedCommands+0x156>
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	619a      	str	r2, [r3, #24]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10a      	bne.n	8002fd2 <prvProcessReceivedCommands+0x116>
 8002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc0:	f383 8811 	msr	BASEPRI, r3
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	bf00      	nop
 8002fd0:	e7fe      	b.n	8002fd0 <prvProcessReceivedCommands+0x114>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	18d1      	adds	r1, r2, r3
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	69f8      	ldr	r0, [r7, #28]
 8002fe0:	f7ff ff2a 	bl	8002e38 <prvInsertTimerInActiveList>
 8002fe4:	e015      	b.n	8003012 <prvProcessReceivedCommands+0x156>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d103      	bne.n	8002ffc <prvProcessReceivedCommands+0x140>
 8002ff4:	69f8      	ldr	r0, [r7, #28]
 8002ff6:	f000 f88d 	bl	8003114 <vPortFree>
 8002ffa:	e00a      	b.n	8003012 <prvProcessReceivedCommands+0x156>
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	b2da      	uxtb	r2, r3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800300e:	e000      	b.n	8003012 <prvProcessReceivedCommands+0x156>
 8003010:	bf00      	nop
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <prvProcessReceivedCommands+0x178>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f107 0108 	add.w	r1, r7, #8
 800301a:	2200      	movs	r2, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fcd5 	bl	80039cc <xQueueReceive>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	f47f af4d 	bne.w	8002ec4 <prvProcessReceivedCommands+0x8>
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200001cc 	.word	0x200001cc

08003038 <prvSwitchTimerLists>:
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	e009      	b.n	8003054 <prvSwitchTimerLists+0x1c>
 8003040:	4b0e      	ldr	r3, [pc, #56]	; (800307c <prvSwitchTimerLists+0x44>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	f04f 31ff 	mov.w	r1, #4294967295
 800304e:	6838      	ldr	r0, [r7, #0]
 8003050:	f7ff fe20 	bl	8002c94 <prvProcessExpiredTimer>
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <prvSwitchTimerLists+0x44>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <prvSwitchTimerLists+0x8>
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <prvSwitchTimerLists+0x44>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <prvSwitchTimerLists+0x48>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a04      	ldr	r2, [pc, #16]	; (800307c <prvSwitchTimerLists+0x44>)
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <prvSwitchTimerLists+0x48>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200001c4 	.word	0x200001c4
 8003080:	200001c8 	.word	0x200001c8

08003084 <prvCheckForValidListAndQueue>:
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
 8003088:	f000 f9fa 	bl	8003480 <vPortEnterCritical>
 800308c:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <prvCheckForValidListAndQueue+0x54>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d11d      	bne.n	80030d0 <prvCheckForValidListAndQueue+0x4c>
 8003094:	4811      	ldr	r0, [pc, #68]	; (80030dc <prvCheckForValidListAndQueue+0x58>)
 8003096:	f000 f84f 	bl	8003138 <vListInitialise>
 800309a:	4811      	ldr	r0, [pc, #68]	; (80030e0 <prvCheckForValidListAndQueue+0x5c>)
 800309c:	f000 f84c 	bl	8003138 <vListInitialise>
 80030a0:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <prvCheckForValidListAndQueue+0x60>)
 80030a2:	4a0e      	ldr	r2, [pc, #56]	; (80030dc <prvCheckForValidListAndQueue+0x58>)
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <prvCheckForValidListAndQueue+0x64>)
 80030a8:	4a0d      	ldr	r2, [pc, #52]	; (80030e0 <prvCheckForValidListAndQueue+0x5c>)
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	2200      	movs	r2, #0
 80030ae:	210c      	movs	r1, #12
 80030b0:	200a      	movs	r0, #10
 80030b2:	f000 fc19 	bl	80038e8 <xQueueGenericCreate>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <prvCheckForValidListAndQueue+0x54>)
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <prvCheckForValidListAndQueue+0x54>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <prvCheckForValidListAndQueue+0x4c>
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <prvCheckForValidListAndQueue+0x54>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4908      	ldr	r1, [pc, #32]	; (80030ec <prvCheckForValidListAndQueue+0x68>)
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fdec 	bl	8003ca8 <vQueueAddToRegistry>
 80030d0:	f000 fa06 	bl	80034e0 <vPortExitCritical>
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200001cc 	.word	0x200001cc
 80030dc:	2000019c 	.word	0x2000019c
 80030e0:	200001b0 	.word	0x200001b0
 80030e4:	200001c4 	.word	0x200001c4
 80030e8:	200001c8 	.word	0x200001c8
 80030ec:	08004010 	.word	0x08004010

080030f0 <pvPortMalloc>:
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	f7fe fef8 	bl	8001eec <vTaskSuspendAll>
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fe7f 	bl	8003e00 <malloc>
 8003102:	4603      	mov	r3, r0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	f7fe ff35 	bl	8001f74 <xTaskResumeAll>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <vPortFree>:
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <vPortFree+0x1c>
 8003122:	f7fe fee3 	bl	8001eec <vTaskSuspendAll>
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fe72 	bl	8003e10 <free>
 800312c:	f7fe ff22 	bl	8001f74 <xTaskResumeAll>
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <vListInitialise>:
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f103 0208 	add.w	r2, r3, #8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f04f 32ff 	mov.w	r2, #4294967295
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f103 0208 	add.w	r2, r3, #8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f103 0208 	add.w	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	611a      	str	r2, [r3, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <vListInitialiseItem>:
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <vListInsertEnd>:
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	611a      	str	r2, [r3, #16]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <vListInsert>:
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d103      	bne.n	80031f4 <vListInsert+0x20>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e00c      	b.n	800320e <vListInsert+0x3a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3308      	adds	r3, #8
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e002      	b.n	8003202 <vListInsert+0x2e>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	d2f6      	bcs.n	80031fc <vListInsert+0x28>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	611a      	str	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <uxListRemove>:
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6892      	ldr	r2, [r2, #8]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6852      	ldr	r2, [r2, #4]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d103      	bne.n	8003278 <uxListRemove+0x34>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1e5a      	subs	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr
	...

08003298 <pxPortInitialiseStack>:
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3b04      	subs	r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3b04      	subs	r3, #4
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f023 0201 	bic.w	r2, r3, #1
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3b04      	subs	r3, #4
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	4a08      	ldr	r2, [pc, #32]	; (80032ec <pxPortInitialiseStack+0x54>)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3b14      	subs	r3, #20
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3b20      	subs	r3, #32
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	080032f1 	.word	0x080032f1

080032f0 <prvTaskExitError>:
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	4b12      	ldr	r3, [pc, #72]	; (8003344 <prvTaskExitError+0x54>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d00a      	beq.n	800331a <prvTaskExitError+0x2a>
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	bf00      	nop
 8003318:	e7fe      	b.n	8003318 <prvTaskExitError+0x28>
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0fc      	beq.n	8003330 <prvTaskExitError+0x40>
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	20000010 	.word	0x20000010
	...

08003350 <SVC_Handler>:
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <pxCurrentTCBConst2>)
 8003352:	6819      	ldr	r1, [r3, #0]
 8003354:	6808      	ldr	r0, [r1, #0]
 8003356:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800335a:	f380 8809 	msr	PSP, r0
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f04f 0000 	mov.w	r0, #0
 8003366:	f380 8811 	msr	BASEPRI, r0
 800336a:	f04e 0e0d 	orr.w	lr, lr, #13
 800336e:	4770      	bx	lr

08003370 <pxCurrentTCBConst2>:
 8003370:	20000098 	.word	0x20000098
 8003374:	bf00      	nop
 8003376:	bf00      	nop

08003378 <prvPortStartFirstTask>:
 8003378:	4806      	ldr	r0, [pc, #24]	; (8003394 <prvPortStartFirstTask+0x1c>)
 800337a:	6800      	ldr	r0, [r0, #0]
 800337c:	6800      	ldr	r0, [r0, #0]
 800337e:	f380 8808 	msr	MSP, r0
 8003382:	b662      	cpsie	i
 8003384:	b661      	cpsie	f
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	df00      	svc	0
 8003390:	bf00      	nop
 8003392:	0000      	.short	0x0000
 8003394:	e000ed08 	.word	0xe000ed08
 8003398:	bf00      	nop
 800339a:	bf00      	nop

0800339c <xPortStartScheduler>:
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4b32      	ldr	r3, [pc, #200]	; (800346c <xPortStartScheduler+0xd0>)
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	70fb      	strb	r3, [r7, #3]
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <xPortStartScheduler+0xd4>)
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <xPortStartScheduler+0xd8>)
 80033cc:	2207      	movs	r2, #7
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e009      	b.n	80033e6 <xPortStartScheduler+0x4a>
 80033d2:	4b28      	ldr	r3, [pc, #160]	; (8003474 <xPortStartScheduler+0xd8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	4a26      	ldr	r2, [pc, #152]	; (8003474 <xPortStartScheduler+0xd8>)
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	70fb      	strb	r3, [r7, #3]
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ee:	2b80      	cmp	r3, #128	; 0x80
 80033f0:	d0ef      	beq.n	80033d2 <xPortStartScheduler+0x36>
 80033f2:	4b20      	ldr	r3, [pc, #128]	; (8003474 <xPortStartScheduler+0xd8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d00a      	beq.n	8003414 <xPortStartScheduler+0x78>
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	bf00      	nop
 8003412:	e7fe      	b.n	8003412 <xPortStartScheduler+0x76>
 8003414:	4b17      	ldr	r3, [pc, #92]	; (8003474 <xPortStartScheduler+0xd8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	4a16      	ldr	r2, [pc, #88]	; (8003474 <xPortStartScheduler+0xd8>)
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <xPortStartScheduler+0xd8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003426:	4a13      	ldr	r2, [pc, #76]	; (8003474 <xPortStartScheduler+0xd8>)
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <xPortStartScheduler+0xdc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a10      	ldr	r2, [pc, #64]	; (8003478 <xPortStartScheduler+0xdc>)
 8003438:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <xPortStartScheduler+0xdc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a0d      	ldr	r2, [pc, #52]	; (8003478 <xPortStartScheduler+0xdc>)
 8003444:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	f000 f981 	bl	8003750 <vPortSetupTimerInterrupt>
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <xPortStartScheduler+0xe0>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	f7ff ff90 	bl	8003378 <prvPortStartFirstTask>
 8003458:	f7ff f808 	bl	800246c <vTaskSwitchContext>
 800345c:	f7ff ff48 	bl	80032f0 <prvTaskExitError>
 8003460:	2300      	movs	r3, #0
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	e000e400 	.word	0xe000e400
 8003470:	200001e4 	.word	0x200001e4
 8003474:	200001e8 	.word	0x200001e8
 8003478:	e000ed20 	.word	0xe000ed20
 800347c:	20000010 	.word	0x20000010

08003480 <vPortEnterCritical>:
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	bf00      	nop
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <vPortEnterCritical+0x58>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3301      	adds	r3, #1
 80034a0:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <vPortEnterCritical+0x58>)
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <vPortEnterCritical+0x58>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d10f      	bne.n	80034cc <vPortEnterCritical+0x4c>
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <vPortEnterCritical+0x5c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <vPortEnterCritical+0x4c>
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	bf00      	nop
 80034ca:	e7fe      	b.n	80034ca <vPortEnterCritical+0x4a>
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000010 	.word	0x20000010
 80034dc:	e000ed04 	.word	0xe000ed04

080034e0 <vPortExitCritical>:
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4b11      	ldr	r3, [pc, #68]	; (800352c <vPortExitCritical+0x4c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <vPortExitCritical+0x24>
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	bf00      	nop
 8003502:	e7fe      	b.n	8003502 <vPortExitCritical+0x22>
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <vPortExitCritical+0x4c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3b01      	subs	r3, #1
 800350a:	4a08      	ldr	r2, [pc, #32]	; (800352c <vPortExitCritical+0x4c>)
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <vPortExitCritical+0x4c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <vPortExitCritical+0x42>
 8003516:	2300      	movs	r3, #0
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	20000010 	.word	0x20000010

08003530 <PendSV_Handler>:
 8003530:	f3ef 8009 	mrs	r0, PSP
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <pxCurrentTCBConst>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003540:	6010      	str	r0, [r2, #0]
 8003542:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003546:	f04f 0050 	mov.w	r0, #80	; 0x50
 800354a:	f380 8811 	msr	BASEPRI, r0
 800354e:	f7fe ff8d 	bl	800246c <vTaskSwitchContext>
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f380 8811 	msr	BASEPRI, r0
 800355a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	6808      	ldr	r0, [r1, #0]
 8003562:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003566:	f380 8809 	msr	PSP, r0
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	4770      	bx	lr

08003570 <pxCurrentTCBConst>:
 8003570:	20000098 	.word	0x20000098
 8003574:	bf00      	nop
 8003576:	bf00      	nop

08003578 <SysTick_Handler>:
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	bf00      	nop
 8003592:	f7fe fe53 	bl	800223c <xTaskIncrementTick>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <SysTick_Handler+0x2c>
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <SysTick_Handler+0x40>)
 800359e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	2300      	movs	r3, #0
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <vPortSuppressTicksAndSleep>:
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	4b5b      	ldr	r3, [pc, #364]	; (8003734 <vPortSuppressTicksAndSleep+0x178>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d902      	bls.n	80035d4 <vPortSuppressTicksAndSleep+0x18>
 80035ce:	4b59      	ldr	r3, [pc, #356]	; (8003734 <vPortSuppressTicksAndSleep+0x178>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	b672      	cpsid	i
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f7ff f9ab 	bl	8002938 <eTaskConfirmSleepModeStatus>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <vPortSuppressTicksAndSleep+0x30>
 80035e8:	b662      	cpsie	i
 80035ea:	e09e      	b.n	800372a <vPortSuppressTicksAndSleep+0x16e>
 80035ec:	4b52      	ldr	r3, [pc, #328]	; (8003738 <vPortSuppressTicksAndSleep+0x17c>)
 80035ee:	2206      	movs	r2, #6
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	4b52      	ldr	r3, [pc, #328]	; (800373c <vPortSuppressTicksAndSleep+0x180>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <vPortSuppressTicksAndSleep+0x48>
 80035fe:	4b50      	ldr	r3, [pc, #320]	; (8003740 <vPortSuppressTicksAndSleep+0x184>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	4a4d      	ldr	r2, [pc, #308]	; (8003740 <vPortSuppressTicksAndSleep+0x184>)
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	fb02 f303 	mul.w	r3, r2, r3
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4413      	add	r3, r2
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	4b4b      	ldr	r3, [pc, #300]	; (8003744 <vPortSuppressTicksAndSleep+0x188>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <vPortSuppressTicksAndSleep+0x78>
 8003622:	4b48      	ldr	r3, [pc, #288]	; (8003744 <vPortSuppressTicksAndSleep+0x188>)
 8003624:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	4b45      	ldr	r3, [pc, #276]	; (8003740 <vPortSuppressTicksAndSleep+0x184>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	4b44      	ldr	r3, [pc, #272]	; (8003748 <vPortSuppressTicksAndSleep+0x18c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	429a      	cmp	r2, r3
 800363c:	d904      	bls.n	8003648 <vPortSuppressTicksAndSleep+0x8c>
 800363e:	4b42      	ldr	r3, [pc, #264]	; (8003748 <vPortSuppressTicksAndSleep+0x18c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	4a40      	ldr	r2, [pc, #256]	; (800374c <vPortSuppressTicksAndSleep+0x190>)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <vPortSuppressTicksAndSleep+0x180>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	4b38      	ldr	r3, [pc, #224]	; (8003738 <vPortSuppressTicksAndSleep+0x17c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a37      	ldr	r2, [pc, #220]	; (8003738 <vPortSuppressTicksAndSleep+0x17c>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <vPortSuppressTicksAndSleep+0xb8>
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	bf30      	wfi
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	b662      	cpsie	i
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	b672      	cpsid	i
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <vPortSuppressTicksAndSleep+0x17c>)
 800368a:	2206      	movs	r2, #6
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <vPortSuppressTicksAndSleep+0x17c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d01d      	beq.n	80036d6 <vPortSuppressTicksAndSleep+0x11a>
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <vPortSuppressTicksAndSleep+0x184>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b27      	ldr	r3, [pc, #156]	; (800373c <vPortSuppressTicksAndSleep+0x180>)
 80036a0:	6819      	ldr	r1, [r3, #0]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	1acb      	subs	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	3b01      	subs	r3, #1
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	4b26      	ldr	r3, [pc, #152]	; (8003748 <vPortSuppressTicksAndSleep+0x18c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d904      	bls.n	80036c0 <vPortSuppressTicksAndSleep+0x104>
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <vPortSuppressTicksAndSleep+0x184>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d903      	bls.n	80036c8 <vPortSuppressTicksAndSleep+0x10c>
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <vPortSuppressTicksAndSleep+0x184>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	4a20      	ldr	r2, [pc, #128]	; (800374c <vPortSuppressTicksAndSleep+0x190>)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	e01a      	b.n	800370c <vPortSuppressTicksAndSleep+0x150>
 80036d6:	4b19      	ldr	r3, [pc, #100]	; (800373c <vPortSuppressTicksAndSleep+0x180>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	4b18      	ldr	r3, [pc, #96]	; (8003740 <vPortSuppressTicksAndSleep+0x184>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	fb02 f203 	mul.w	r2, r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	4b14      	ldr	r3, [pc, #80]	; (8003740 <vPortSuppressTicksAndSleep+0x184>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	61bb      	str	r3, [r7, #24]
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	3301      	adds	r3, #1
 80036fc:	4a10      	ldr	r2, [pc, #64]	; (8003740 <vPortSuppressTicksAndSleep+0x184>)
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	fb02 f203 	mul.w	r2, r2, r3
 8003704:	4911      	ldr	r1, [pc, #68]	; (800374c <vPortSuppressTicksAndSleep+0x190>)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	600b      	str	r3, [r1, #0]
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <vPortSuppressTicksAndSleep+0x180>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	4b09      	ldr	r3, [pc, #36]	; (8003738 <vPortSuppressTicksAndSleep+0x17c>)
 8003714:	2207      	movs	r2, #7
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <vPortSuppressTicksAndSleep+0x184>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0b      	ldr	r2, [pc, #44]	; (800374c <vPortSuppressTicksAndSleep+0x190>)
 800371e:	3b01      	subs	r3, #1
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	69b8      	ldr	r0, [r7, #24]
 8003724:	f7fe fd30 	bl	8002188 <vTaskStepTick>
 8003728:	b662      	cpsie	i
 800372a:	bf00      	nop
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	200001dc 	.word	0x200001dc
 8003738:	e000e010 	.word	0xe000e010
 800373c:	e000e018 	.word	0xe000e018
 8003740:	200001d8 	.word	0x200001d8
 8003744:	e000ed04 	.word	0xe000ed04
 8003748:	200001e0 	.word	0x200001e0
 800374c:	e000e014 	.word	0xe000e014

08003750 <vPortSetupTimerInterrupt>:
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <vPortSetupTimerInterrupt+0x58>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <vPortSetupTimerInterrupt+0x5c>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <vPortSetupTimerInterrupt+0x60>)
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b12      	ldr	r3, [pc, #72]	; (80037b0 <vPortSetupTimerInterrupt+0x60>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <vPortSetupTimerInterrupt+0x64>)
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <vPortSetupTimerInterrupt+0x68>)
 8003776:	225e      	movs	r2, #94	; 0x5e
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <vPortSetupTimerInterrupt+0x6c>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <vPortSetupTimerInterrupt+0x70>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <vPortSetupTimerInterrupt+0x58>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a08      	ldr	r2, [pc, #32]	; (80037ac <vPortSetupTimerInterrupt+0x5c>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <vPortSetupTimerInterrupt+0x74>)
 8003794:	3b01      	subs	r3, #1
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <vPortSetupTimerInterrupt+0x6c>)
 800379a:	2207      	movs	r2, #7
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000000 	.word	0x20000000
 80037ac:	10624dd3 	.word	0x10624dd3
 80037b0:	200001d8 	.word	0x200001d8
 80037b4:	200001dc 	.word	0x200001dc
 80037b8:	200001e0 	.word	0x200001e0
 80037bc:	e000e010 	.word	0xe000e010
 80037c0:	e000e018 	.word	0xe000e018
 80037c4:	e000e014 	.word	0xe000e014

080037c8 <xQueueGenericReset>:
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
 80037d2:	2301      	movs	r3, #1
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <xQueueGenericReset+0x2e>
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <xQueueGenericReset+0x2c>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d05d      	beq.n	80038b8 <xQueueGenericReset+0xf0>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d059      	beq.n	80038b8 <xQueueGenericReset+0xf0>
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380c:	2100      	movs	r1, #0
 800380e:	fba3 2302 	umull	r2, r3, r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d000      	beq.n	8003818 <xQueueGenericReset+0x50>
 8003816:	2101      	movs	r1, #1
 8003818:	460b      	mov	r3, r1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d14c      	bne.n	80038b8 <xQueueGenericReset+0xf0>
 800381e:	f7ff fe2f 	bl	8003480 <vPortEnterCritical>
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	6939      	ldr	r1, [r7, #16]
 800382c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	441a      	add	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2200      	movs	r2, #0
 800383c:	639a      	str	r2, [r3, #56]	; 0x38
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	3b01      	subs	r3, #1
 8003850:	6939      	ldr	r1, [r7, #16]
 8003852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	441a      	add	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	22ff      	movs	r2, #255	; 0xff
 8003862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	22ff      	movs	r2, #255	; 0xff
 800386a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d114      	bne.n	800389e <xQueueGenericReset+0xd6>
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d01a      	beq.n	80038b2 <xQueueGenericReset+0xea>
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	3310      	adds	r3, #16
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe feb9 	bl	80025f8 <xTaskRemoveFromEventList>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d012      	beq.n	80038b2 <xQueueGenericReset+0xea>
 800388c:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <xQueueGenericReset+0x11c>)
 800388e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	e009      	b.n	80038b2 <xQueueGenericReset+0xea>
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	3310      	adds	r3, #16
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff fc48 	bl	8003138 <vListInitialise>
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	3324      	adds	r3, #36	; 0x24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fc43 	bl	8003138 <vListInitialise>
 80038b2:	f7ff fe15 	bl	80034e0 <vPortExitCritical>
 80038b6:	e001      	b.n	80038bc <xQueueGenericReset+0xf4>
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <xQueueGenericReset+0x110>
 80038c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	bf00      	nop
 80038d6:	e7fe      	b.n	80038d6 <xQueueGenericReset+0x10e>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	e000ed04 	.word	0xe000ed04

080038e8 <xQueueGenericCreate>:
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	71fb      	strb	r3, [r7, #7]
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d02e      	beq.n	800395e <xQueueGenericCreate+0x76>
 8003900:	2100      	movs	r1, #0
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	fba3 2302 	umull	r2, r3, r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d000      	beq.n	8003910 <xQueueGenericCreate+0x28>
 800390e:	2101      	movs	r1, #1
 8003910:	460b      	mov	r3, r1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d123      	bne.n	800395e <xQueueGenericCreate+0x76>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003922:	d81c      	bhi.n	800395e <xQueueGenericCreate+0x76>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	3350      	adds	r3, #80	; 0x50
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fbdc 	bl	80030f0 <pvPortMalloc>
 8003938:	61f8      	str	r0, [r7, #28]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01c      	beq.n	800397a <xQueueGenericCreate+0x92>
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3350      	adds	r3, #80	; 0x50
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	79fa      	ldrb	r2, [r7, #7]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f814 	bl	8003984 <prvInitialiseNewQueue>
 800395c:	e00d      	b.n	800397a <xQueueGenericCreate+0x92>
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xQueueGenericCreate+0x92>
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xQueueGenericCreate+0x90>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <prvInitialiseNewQueue>:
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	70fb      	strb	r3, [r7, #3]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d103      	bne.n	80039a0 <prvInitialiseNewQueue+0x1c>
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	e002      	b.n	80039a6 <prvInitialiseNewQueue+0x22>
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
 80039b2:	2101      	movs	r1, #1
 80039b4:	69b8      	ldr	r0, [r7, #24]
 80039b6:	f7ff ff07 	bl	80037c8 <xQueueGenericReset>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <xQueueReceive>:
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08c      	sub	sp, #48	; 0x30
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	2300      	movs	r3, #0
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <xQueueReceive+0x30>
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	623b      	str	r3, [r7, #32]
 80039f8:	bf00      	nop
 80039fa:	e7fe      	b.n	80039fa <xQueueReceive+0x2e>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d103      	bne.n	8003a0a <xQueueReceive+0x3e>
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <xQueueReceive+0x42>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <xQueueReceive+0x44>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xQueueReceive+0x5e>
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xQueueReceive+0x5c>
 8003a2a:	f7ff f853 	bl	8002ad4 <xTaskGetSchedulerState>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <xQueueReceive+0x6e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <xQueueReceive+0x72>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <xQueueReceive+0x74>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <xQueueReceive+0x8e>
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <xQueueReceive+0x8c>
 8003a5a:	f7ff fd11 	bl	8003480 <vPortEnterCritical>
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01f      	beq.n	8003aaa <xQueueReceive+0xde>
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a6e:	f000 f88d 	bl	8003b8c <prvCopyDataFromQueue>
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	1e5a      	subs	r2, r3, #1
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00f      	beq.n	8003aa2 <xQueueReceive+0xd6>
 8003a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a84:	3310      	adds	r3, #16
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fdb6 	bl	80025f8 <xTaskRemoveFromEventList>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <xQueueReceive+0xd6>
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <xQueueReceive+0x1bc>)
 8003a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f7ff fd1d 	bl	80034e0 <vPortExitCritical>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e069      	b.n	8003b7e <xQueueReceive+0x1b2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d103      	bne.n	8003ab8 <xQueueReceive+0xec>
 8003ab0:	f7ff fd16 	bl	80034e0 <vPortExitCritical>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e062      	b.n	8003b7e <xQueueReceive+0x1b2>
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <xQueueReceive+0x100>
 8003abe:	f107 0310 	add.w	r3, r7, #16
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fe fe70 	bl	80027a8 <vTaskInternalSetTimeOutState>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003acc:	f7ff fd08 	bl	80034e0 <vPortExitCritical>
 8003ad0:	f7fe fa0c 	bl	8001eec <vTaskSuspendAll>
 8003ad4:	f7ff fcd4 	bl	8003480 <vPortEnterCritical>
 8003ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ada:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ade:	b25b      	sxtb	r3, r3
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d103      	bne.n	8003aee <xQueueReceive+0x122>
 8003ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003af4:	b25b      	sxtb	r3, r3
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d103      	bne.n	8003b04 <xQueueReceive+0x138>
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b04:	f7ff fcec 	bl	80034e0 <vPortExitCritical>
 8003b08:	1d3a      	adds	r2, r7, #4
 8003b0a:	f107 0310 	add.w	r3, r7, #16
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fe5f 	bl	80027d4 <xTaskCheckForTimeOut>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d123      	bne.n	8003b64 <xQueueReceive+0x198>
 8003b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b1e:	f000 f8ad 	bl	8003c7c <prvIsQueueEmpty>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d017      	beq.n	8003b58 <xQueueReceive+0x18c>
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	3324      	adds	r3, #36	; 0x24
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fcf7 	bl	8002524 <vTaskPlaceOnEventList>
 8003b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b38:	f000 f84e 	bl	8003bd8 <prvUnlockQueue>
 8003b3c:	f7fe fa1a 	bl	8001f74 <xTaskResumeAll>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d189      	bne.n	8003a5a <xQueueReceive+0x8e>
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <xQueueReceive+0x1bc>)
 8003b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	e780      	b.n	8003a5a <xQueueReceive+0x8e>
 8003b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b5a:	f000 f83d 	bl	8003bd8 <prvUnlockQueue>
 8003b5e:	f7fe fa09 	bl	8001f74 <xTaskResumeAll>
 8003b62:	e77a      	b.n	8003a5a <xQueueReceive+0x8e>
 8003b64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b66:	f000 f837 	bl	8003bd8 <prvUnlockQueue>
 8003b6a:	f7fe fa03 	bl	8001f74 <xTaskResumeAll>
 8003b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b70:	f000 f884 	bl	8003c7c <prvIsQueueEmpty>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f43f af6f 	beq.w	8003a5a <xQueueReceive+0x8e>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3730      	adds	r7, #48	; 0x30
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <prvCopyDataFromQueue>:
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d018      	beq.n	8003bd0 <prvCopyDataFromQueue+0x44>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	441a      	add	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	60da      	str	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d303      	bcc.n	8003bc0 <prvCopyDataFromQueue+0x34>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68d9      	ldr	r1, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6838      	ldr	r0, [r7, #0]
 8003bcc:	f000 f928 	bl	8003e20 <memcpy>
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <prvUnlockQueue>:
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	f7ff fc4e 	bl	8003480 <vPortEnterCritical>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	e011      	b.n	8003c12 <prvUnlockQueue+0x3a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d012      	beq.n	8003c1c <prvUnlockQueue+0x44>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3324      	adds	r3, #36	; 0x24
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fcfc 	bl	80025f8 <xTaskRemoveFromEventList>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <prvUnlockQueue+0x32>
 8003c06:	f7fe fe4b 	bl	80028a0 <vTaskMissedYield>
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	73fb      	strb	r3, [r7, #15]
 8003c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	dce9      	bgt.n	8003bee <prvUnlockQueue+0x16>
 8003c1a:	e000      	b.n	8003c1e <prvUnlockQueue+0x46>
 8003c1c:	bf00      	nop
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c26:	f7ff fc5b 	bl	80034e0 <vPortExitCritical>
 8003c2a:	f7ff fc29 	bl	8003480 <vPortEnterCritical>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c34:	73bb      	strb	r3, [r7, #14]
 8003c36:	e011      	b.n	8003c5c <prvUnlockQueue+0x84>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d012      	beq.n	8003c66 <prvUnlockQueue+0x8e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3310      	adds	r3, #16
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe fcd7 	bl	80025f8 <xTaskRemoveFromEventList>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <prvUnlockQueue+0x7c>
 8003c50:	f7fe fe26 	bl	80028a0 <vTaskMissedYield>
 8003c54:	7bbb      	ldrb	r3, [r7, #14]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	73bb      	strb	r3, [r7, #14]
 8003c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	dce9      	bgt.n	8003c38 <prvUnlockQueue+0x60>
 8003c64:	e000      	b.n	8003c68 <prvUnlockQueue+0x90>
 8003c66:	bf00      	nop
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	22ff      	movs	r2, #255	; 0xff
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c70:	f7ff fc36 	bl	80034e0 <vPortExitCritical>
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <prvIsQueueEmpty>:
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	f7ff fbfc 	bl	8003480 <vPortEnterCritical>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <prvIsQueueEmpty+0x1a>
 8003c90:	2301      	movs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e001      	b.n	8003c9a <prvIsQueueEmpty+0x1e>
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	f7ff fc21 	bl	80034e0 <vPortExitCritical>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <vQueueAddToRegistry>:
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <vQueueAddToRegistry+0x2a>
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <vQueueAddToRegistry+0x28>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d024      	beq.n	8003d22 <vQueueAddToRegistry+0x7a>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	e01e      	b.n	8003d1c <vQueueAddToRegistry+0x74>
 8003cde:	4a18      	ldr	r2, [pc, #96]	; (8003d40 <vQueueAddToRegistry+0x98>)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d105      	bne.n	8003cfa <vQueueAddToRegistry+0x52>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <vQueueAddToRegistry+0x98>)
 8003cf4:	4413      	add	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	e013      	b.n	8003d22 <vQueueAddToRegistry+0x7a>
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <vQueueAddToRegistry+0x6e>
 8003d00:	4a0f      	ldr	r2, [pc, #60]	; (8003d40 <vQueueAddToRegistry+0x98>)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d104      	bne.n	8003d16 <vQueueAddToRegistry+0x6e>
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4a0b      	ldr	r2, [pc, #44]	; (8003d40 <vQueueAddToRegistry+0x98>)
 8003d12:	4413      	add	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	2b07      	cmp	r3, #7
 8003d20:	d9dd      	bls.n	8003cde <vQueueAddToRegistry+0x36>
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <vQueueAddToRegistry+0x8c>
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000248 	.word	0x20000248

08003d44 <vQueueWaitForMessageRestricted>:
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	f7ff fb94 	bl	8003480 <vPortEnterCritical>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d5e:	b25b      	sxtb	r3, r3
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d103      	bne.n	8003d6e <vQueueWaitForMessageRestricted+0x2a>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d74:	b25b      	sxtb	r3, r3
 8003d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7a:	d103      	bne.n	8003d84 <vQueueWaitForMessageRestricted+0x40>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d84:	f7ff fbac 	bl	80034e0 <vPortExitCritical>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <vQueueWaitForMessageRestricted+0x5a>
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	3324      	adds	r3, #36	; 0x24
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fe fbe7 	bl	800256c <vTaskPlaceOnEventListRestricted>
 8003d9e:	6978      	ldr	r0, [r7, #20]
 8003da0:	f7ff ff1a 	bl	8003bd8 <prvUnlockQueue>
 8003da4:	bf00      	nop
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <__errno>:
 8003dac:	4b01      	ldr	r3, [pc, #4]	; (8003db4 <__errno+0x8>)
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000014 	.word	0x20000014

08003db8 <__libc_init_array>:
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	2600      	movs	r6, #0
 8003dbc:	4d0c      	ldr	r5, [pc, #48]	; (8003df0 <__libc_init_array+0x38>)
 8003dbe:	4c0d      	ldr	r4, [pc, #52]	; (8003df4 <__libc_init_array+0x3c>)
 8003dc0:	1b64      	subs	r4, r4, r5
 8003dc2:	10a4      	asrs	r4, r4, #2
 8003dc4:	42a6      	cmp	r6, r4
 8003dc6:	d109      	bne.n	8003ddc <__libc_init_array+0x24>
 8003dc8:	f000 f904 	bl	8003fd4 <_init>
 8003dcc:	2600      	movs	r6, #0
 8003dce:	4d0a      	ldr	r5, [pc, #40]	; (8003df8 <__libc_init_array+0x40>)
 8003dd0:	4c0a      	ldr	r4, [pc, #40]	; (8003dfc <__libc_init_array+0x44>)
 8003dd2:	1b64      	subs	r4, r4, r5
 8003dd4:	10a4      	asrs	r4, r4, #2
 8003dd6:	42a6      	cmp	r6, r4
 8003dd8:	d105      	bne.n	8003de6 <__libc_init_array+0x2e>
 8003dda:	bd70      	pop	{r4, r5, r6, pc}
 8003ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de0:	4798      	blx	r3
 8003de2:	3601      	adds	r6, #1
 8003de4:	e7ee      	b.n	8003dc4 <__libc_init_array+0xc>
 8003de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dea:	4798      	blx	r3
 8003dec:	3601      	adds	r6, #1
 8003dee:	e7f2      	b.n	8003dd6 <__libc_init_array+0x1e>
 8003df0:	08004030 	.word	0x08004030
 8003df4:	08004030 	.word	0x08004030
 8003df8:	08004030 	.word	0x08004030
 8003dfc:	08004034 	.word	0x08004034

08003e00 <malloc>:
 8003e00:	4b02      	ldr	r3, [pc, #8]	; (8003e0c <malloc+0xc>)
 8003e02:	4601      	mov	r1, r0
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	f000 b86d 	b.w	8003ee4 <_malloc_r>
 8003e0a:	bf00      	nop
 8003e0c:	20000014 	.word	0x20000014

08003e10 <free>:
 8003e10:	4b02      	ldr	r3, [pc, #8]	; (8003e1c <free+0xc>)
 8003e12:	4601      	mov	r1, r0
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	f000 b819 	b.w	8003e4c <_free_r>
 8003e1a:	bf00      	nop
 8003e1c:	20000014 	.word	0x20000014

08003e20 <memcpy>:
 8003e20:	440a      	add	r2, r1
 8003e22:	4291      	cmp	r1, r2
 8003e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e28:	d100      	bne.n	8003e2c <memcpy+0xc>
 8003e2a:	4770      	bx	lr
 8003e2c:	b510      	push	{r4, lr}
 8003e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e32:	4291      	cmp	r1, r2
 8003e34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e38:	d1f9      	bne.n	8003e2e <memcpy+0xe>
 8003e3a:	bd10      	pop	{r4, pc}

08003e3c <memset>:
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4402      	add	r2, r0
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d100      	bne.n	8003e46 <memset+0xa>
 8003e44:	4770      	bx	lr
 8003e46:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4a:	e7f9      	b.n	8003e40 <memset+0x4>

08003e4c <_free_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	4605      	mov	r5, r0
 8003e50:	2900      	cmp	r1, #0
 8003e52:	d043      	beq.n	8003edc <_free_r+0x90>
 8003e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e58:	1f0c      	subs	r4, r1, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bfb8      	it	lt
 8003e5e:	18e4      	addlt	r4, r4, r3
 8003e60:	f000 f8aa 	bl	8003fb8 <__malloc_lock>
 8003e64:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <_free_r+0x94>)
 8003e66:	6813      	ldr	r3, [r2, #0]
 8003e68:	4610      	mov	r0, r2
 8003e6a:	b933      	cbnz	r3, 8003e7a <_free_r+0x2e>
 8003e6c:	6063      	str	r3, [r4, #4]
 8003e6e:	6014      	str	r4, [r2, #0]
 8003e70:	4628      	mov	r0, r5
 8003e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e76:	f000 b8a5 	b.w	8003fc4 <__malloc_unlock>
 8003e7a:	42a3      	cmp	r3, r4
 8003e7c:	d90a      	bls.n	8003e94 <_free_r+0x48>
 8003e7e:	6821      	ldr	r1, [r4, #0]
 8003e80:	1862      	adds	r2, r4, r1
 8003e82:	4293      	cmp	r3, r2
 8003e84:	bf01      	itttt	eq
 8003e86:	681a      	ldreq	r2, [r3, #0]
 8003e88:	685b      	ldreq	r3, [r3, #4]
 8003e8a:	1852      	addeq	r2, r2, r1
 8003e8c:	6022      	streq	r2, [r4, #0]
 8003e8e:	6063      	str	r3, [r4, #4]
 8003e90:	6004      	str	r4, [r0, #0]
 8003e92:	e7ed      	b.n	8003e70 <_free_r+0x24>
 8003e94:	461a      	mov	r2, r3
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	b10b      	cbz	r3, 8003e9e <_free_r+0x52>
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	d9fa      	bls.n	8003e94 <_free_r+0x48>
 8003e9e:	6811      	ldr	r1, [r2, #0]
 8003ea0:	1850      	adds	r0, r2, r1
 8003ea2:	42a0      	cmp	r0, r4
 8003ea4:	d10b      	bne.n	8003ebe <_free_r+0x72>
 8003ea6:	6820      	ldr	r0, [r4, #0]
 8003ea8:	4401      	add	r1, r0
 8003eaa:	1850      	adds	r0, r2, r1
 8003eac:	4283      	cmp	r3, r0
 8003eae:	6011      	str	r1, [r2, #0]
 8003eb0:	d1de      	bne.n	8003e70 <_free_r+0x24>
 8003eb2:	6818      	ldr	r0, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4401      	add	r1, r0
 8003eb8:	6011      	str	r1, [r2, #0]
 8003eba:	6053      	str	r3, [r2, #4]
 8003ebc:	e7d8      	b.n	8003e70 <_free_r+0x24>
 8003ebe:	d902      	bls.n	8003ec6 <_free_r+0x7a>
 8003ec0:	230c      	movs	r3, #12
 8003ec2:	602b      	str	r3, [r5, #0]
 8003ec4:	e7d4      	b.n	8003e70 <_free_r+0x24>
 8003ec6:	6820      	ldr	r0, [r4, #0]
 8003ec8:	1821      	adds	r1, r4, r0
 8003eca:	428b      	cmp	r3, r1
 8003ecc:	bf01      	itttt	eq
 8003ece:	6819      	ldreq	r1, [r3, #0]
 8003ed0:	685b      	ldreq	r3, [r3, #4]
 8003ed2:	1809      	addeq	r1, r1, r0
 8003ed4:	6021      	streq	r1, [r4, #0]
 8003ed6:	6063      	str	r3, [r4, #4]
 8003ed8:	6054      	str	r4, [r2, #4]
 8003eda:	e7c9      	b.n	8003e70 <_free_r+0x24>
 8003edc:	bd38      	pop	{r3, r4, r5, pc}
 8003ede:	bf00      	nop
 8003ee0:	200001ec 	.word	0x200001ec

08003ee4 <_malloc_r>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	1ccd      	adds	r5, r1, #3
 8003ee8:	f025 0503 	bic.w	r5, r5, #3
 8003eec:	3508      	adds	r5, #8
 8003eee:	2d0c      	cmp	r5, #12
 8003ef0:	bf38      	it	cc
 8003ef2:	250c      	movcc	r5, #12
 8003ef4:	2d00      	cmp	r5, #0
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	db01      	blt.n	8003efe <_malloc_r+0x1a>
 8003efa:	42a9      	cmp	r1, r5
 8003efc:	d903      	bls.n	8003f06 <_malloc_r+0x22>
 8003efe:	230c      	movs	r3, #12
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	2000      	movs	r0, #0
 8003f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f06:	f000 f857 	bl	8003fb8 <__malloc_lock>
 8003f0a:	4921      	ldr	r1, [pc, #132]	; (8003f90 <_malloc_r+0xac>)
 8003f0c:	680a      	ldr	r2, [r1, #0]
 8003f0e:	4614      	mov	r4, r2
 8003f10:	b99c      	cbnz	r4, 8003f3a <_malloc_r+0x56>
 8003f12:	4f20      	ldr	r7, [pc, #128]	; (8003f94 <_malloc_r+0xb0>)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	b923      	cbnz	r3, 8003f22 <_malloc_r+0x3e>
 8003f18:	4621      	mov	r1, r4
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	f000 f83c 	bl	8003f98 <_sbrk_r>
 8003f20:	6038      	str	r0, [r7, #0]
 8003f22:	4629      	mov	r1, r5
 8003f24:	4630      	mov	r0, r6
 8003f26:	f000 f837 	bl	8003f98 <_sbrk_r>
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	d123      	bne.n	8003f76 <_malloc_r+0x92>
 8003f2e:	230c      	movs	r3, #12
 8003f30:	4630      	mov	r0, r6
 8003f32:	6033      	str	r3, [r6, #0]
 8003f34:	f000 f846 	bl	8003fc4 <__malloc_unlock>
 8003f38:	e7e3      	b.n	8003f02 <_malloc_r+0x1e>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	1b5b      	subs	r3, r3, r5
 8003f3e:	d417      	bmi.n	8003f70 <_malloc_r+0x8c>
 8003f40:	2b0b      	cmp	r3, #11
 8003f42:	d903      	bls.n	8003f4c <_malloc_r+0x68>
 8003f44:	6023      	str	r3, [r4, #0]
 8003f46:	441c      	add	r4, r3
 8003f48:	6025      	str	r5, [r4, #0]
 8003f4a:	e004      	b.n	8003f56 <_malloc_r+0x72>
 8003f4c:	6863      	ldr	r3, [r4, #4]
 8003f4e:	42a2      	cmp	r2, r4
 8003f50:	bf0c      	ite	eq
 8003f52:	600b      	streq	r3, [r1, #0]
 8003f54:	6053      	strne	r3, [r2, #4]
 8003f56:	4630      	mov	r0, r6
 8003f58:	f000 f834 	bl	8003fc4 <__malloc_unlock>
 8003f5c:	f104 000b 	add.w	r0, r4, #11
 8003f60:	1d23      	adds	r3, r4, #4
 8003f62:	f020 0007 	bic.w	r0, r0, #7
 8003f66:	1ac2      	subs	r2, r0, r3
 8003f68:	d0cc      	beq.n	8003f04 <_malloc_r+0x20>
 8003f6a:	1a1b      	subs	r3, r3, r0
 8003f6c:	50a3      	str	r3, [r4, r2]
 8003f6e:	e7c9      	b.n	8003f04 <_malloc_r+0x20>
 8003f70:	4622      	mov	r2, r4
 8003f72:	6864      	ldr	r4, [r4, #4]
 8003f74:	e7cc      	b.n	8003f10 <_malloc_r+0x2c>
 8003f76:	1cc4      	adds	r4, r0, #3
 8003f78:	f024 0403 	bic.w	r4, r4, #3
 8003f7c:	42a0      	cmp	r0, r4
 8003f7e:	d0e3      	beq.n	8003f48 <_malloc_r+0x64>
 8003f80:	1a21      	subs	r1, r4, r0
 8003f82:	4630      	mov	r0, r6
 8003f84:	f000 f808 	bl	8003f98 <_sbrk_r>
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d1dd      	bne.n	8003f48 <_malloc_r+0x64>
 8003f8c:	e7cf      	b.n	8003f2e <_malloc_r+0x4a>
 8003f8e:	bf00      	nop
 8003f90:	200001ec 	.word	0x200001ec
 8003f94:	200001f0 	.word	0x200001f0

08003f98 <_sbrk_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4d05      	ldr	r5, [pc, #20]	; (8003fb4 <_sbrk_r+0x1c>)
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	602b      	str	r3, [r5, #0]
 8003fa4:	f7fc fad0 	bl	8000548 <_sbrk>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d102      	bne.n	8003fb2 <_sbrk_r+0x1a>
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	b103      	cbz	r3, 8003fb2 <_sbrk_r+0x1a>
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}
 8003fb4:	20000288 	.word	0x20000288

08003fb8 <__malloc_lock>:
 8003fb8:	4801      	ldr	r0, [pc, #4]	; (8003fc0 <__malloc_lock+0x8>)
 8003fba:	f000 b809 	b.w	8003fd0 <__retarget_lock_acquire_recursive>
 8003fbe:	bf00      	nop
 8003fc0:	20000290 	.word	0x20000290

08003fc4 <__malloc_unlock>:
 8003fc4:	4801      	ldr	r0, [pc, #4]	; (8003fcc <__malloc_unlock+0x8>)
 8003fc6:	f000 b804 	b.w	8003fd2 <__retarget_lock_release_recursive>
 8003fca:	bf00      	nop
 8003fcc:	20000290 	.word	0x20000290

08003fd0 <__retarget_lock_acquire_recursive>:
 8003fd0:	4770      	bx	lr

08003fd2 <__retarget_lock_release_recursive>:
 8003fd2:	4770      	bx	lr

08003fd4 <_init>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr

08003fe0 <_fini>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr

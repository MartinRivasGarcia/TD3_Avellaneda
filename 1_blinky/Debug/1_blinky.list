
1_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bdc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d30  08003d30  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003d30  08003d30  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d30  08003d30  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000078  08003db0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003db0  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ea2  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002796  00000000  00000000  00030f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000336e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00034568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001906c  00000000  00000000  000352c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f32e  00000000  00000000  0004e334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090013  00000000  00000000  0005d662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed675  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  000ed6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cd4 	.word	0x08003cd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003cd4 	.word	0x08003cd4

08000150 <led_ON>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


static void led_ON( void *pvParameters) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	while (1){

		//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);

		//if (HAL_GPIO_ReadPin(PULS_GPIO_Port, PULS_Pin))
		if (HAL_GPIO_ReadPin(PULS_GPIO_Port, PULS_Pin)){
 8000158:	2108      	movs	r1, #8
 800015a:	4808      	ldr	r0, [pc, #32]	; (800017c <led_ON+0x2c>)
 800015c:	f000 fccc 	bl	8000af8 <HAL_GPIO_ReadPin>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d004      	beq.n	8000170 <led_ON+0x20>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000166:	2201      	movs	r2, #1
 8000168:	2110      	movs	r1, #16
 800016a:	4804      	ldr	r0, [pc, #16]	; (800017c <led_ON+0x2c>)
 800016c:	f000 fcdb 	bl	8000b26 <HAL_GPIO_WritePin>
		}

		vTaskDelay(400 / portTICK_PERIOD_MS);
 8000170:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000174:	f001 fcdc 	bl	8001b30 <vTaskDelay>
		if (HAL_GPIO_ReadPin(PULS_GPIO_Port, PULS_Pin)){
 8000178:	e7ee      	b.n	8000158 <led_ON+0x8>
 800017a:	bf00      	nop
 800017c:	40010c00 	.word	0x40010c00

08000180 <led_OFF>:

	}

}

static void led_OFF( void *pvParameters) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	vTaskDelay(400 / portTICK_PERIOD_MS);
 8000188:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800018c:	f001 fcd0 	bl	8001b30 <vTaskDelay>
		else{
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
		}*/

		//if (HAL_GPIO_ReadPin(PULS_GPIO_Port, PULS_Pin))
		if (HAL_GPIO_ReadPin(PULS_GPIO_Port, PULS_Pin)){
 8000190:	2108      	movs	r1, #8
 8000192:	4808      	ldr	r0, [pc, #32]	; (80001b4 <led_OFF+0x34>)
 8000194:	f000 fcb0 	bl	8000af8 <HAL_GPIO_ReadPin>
 8000198:	4603      	mov	r3, r0
 800019a:	2b00      	cmp	r3, #0
 800019c:	d004      	beq.n	80001a8 <led_OFF+0x28>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800019e:	2200      	movs	r2, #0
 80001a0:	2110      	movs	r1, #16
 80001a2:	4804      	ldr	r0, [pc, #16]	; (80001b4 <led_OFF+0x34>)
 80001a4:	f000 fcbf 	bl	8000b26 <HAL_GPIO_WritePin>
		}

		vTaskDelay(600 / portTICK_PERIOD_MS);
 80001a8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80001ac:	f001 fcc0 	bl	8001b30 <vTaskDelay>
		if (HAL_GPIO_ReadPin(PULS_GPIO_Port, PULS_Pin)){
 80001b0:	e7ee      	b.n	8000190 <led_OFF+0x10>
 80001b2:	bf00      	nop
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001be:	f000 fa05 	bl	80005cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c2:	f000 f823 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c6:	f000 f867 	bl	8000298 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  xTaskCreate(led_ON,
 80001ca:	2300      	movs	r3, #0
 80001cc:	9301      	str	r3, [sp, #4]
 80001ce:	2301      	movs	r3, #1
 80001d0:	9300      	str	r3, [sp, #0]
 80001d2:	2300      	movs	r3, #0
 80001d4:	2280      	movs	r2, #128	; 0x80
 80001d6:	490a      	ldr	r1, [pc, #40]	; (8000200 <main+0x48>)
 80001d8:	480a      	ldr	r0, [pc, #40]	; (8000204 <main+0x4c>)
 80001da:	f001 fb3d 	bl	8001858 <xTaskCreate>
		  configMINIMAL_STACK_SIZE,
		  NULL,
		  1,
		  NULL);

  xTaskCreate(led_OFF,
 80001de:	2300      	movs	r3, #0
 80001e0:	9301      	str	r3, [sp, #4]
 80001e2:	2301      	movs	r3, #1
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2300      	movs	r3, #0
 80001e8:	2280      	movs	r2, #128	; 0x80
 80001ea:	4905      	ldr	r1, [pc, #20]	; (8000200 <main+0x48>)
 80001ec:	4806      	ldr	r0, [pc, #24]	; (8000208 <main+0x50>)
 80001ee:	f001 fb33 	bl	8001858 <xTaskCreate>
  /* USER CODE END 2 */

  /* Infinite loop */

    /* USER CODE BEGIN 3 */
  vTaskStartScheduler();
 80001f2:	f001 fcd1 	bl	8001b98 <vTaskStartScheduler>
 80001f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	08003cec 	.word	0x08003cec
 8000204:	08000151 	.word	0x08000151
 8000208:	08000181 	.word	0x08000181

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	; 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f003 fc8e 	bl	8003b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800022e:	2301      	movs	r3, #1
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023c:	2301      	movs	r3, #1
 800023e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000240:	2302      	movs	r3, #2
 8000242:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0318 	add.w	r3, r7, #24
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fc7f 	bl	8000b58 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000260:	f000 f8a4 	bl	80003ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2302      	movs	r3, #2
 800026a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2102      	movs	r1, #2
 800027e:	4618      	mov	r0, r3
 8000280:	f000 feea 	bl	8001058 <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800028a:	f000 f88f 	bl	80003ac <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	; 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ac:	4b33      	ldr	r3, [pc, #204]	; (800037c <MX_GPIO_Init+0xe4>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a32      	ldr	r2, [pc, #200]	; (800037c <MX_GPIO_Init+0xe4>)
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b30      	ldr	r3, [pc, #192]	; (800037c <MX_GPIO_Init+0xe4>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0310 	and.w	r3, r3, #16
 80002c0:	60fb      	str	r3, [r7, #12]
 80002c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c4:	4b2d      	ldr	r3, [pc, #180]	; (800037c <MX_GPIO_Init+0xe4>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a2c      	ldr	r2, [pc, #176]	; (800037c <MX_GPIO_Init+0xe4>)
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b2a      	ldr	r3, [pc, #168]	; (800037c <MX_GPIO_Init+0xe4>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0320 	and.w	r3, r3, #32
 80002d8:	60bb      	str	r3, [r7, #8]
 80002da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002dc:	4b27      	ldr	r3, [pc, #156]	; (800037c <MX_GPIO_Init+0xe4>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a26      	ldr	r2, [pc, #152]	; (800037c <MX_GPIO_Init+0xe4>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b24      	ldr	r3, [pc, #144]	; (800037c <MX_GPIO_Init+0xe4>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0304 	and.w	r3, r3, #4
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f4:	4b21      	ldr	r3, [pc, #132]	; (800037c <MX_GPIO_Init+0xe4>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a20      	ldr	r2, [pc, #128]	; (800037c <MX_GPIO_Init+0xe4>)
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b1e      	ldr	r3, [pc, #120]	; (800037c <MX_GPIO_Init+0xe4>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0308 	and.w	r3, r3, #8
 8000308:	603b      	str	r3, [r7, #0]
 800030a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000312:	481b      	ldr	r0, [pc, #108]	; (8000380 <MX_GPIO_Init+0xe8>)
 8000314:	f000 fc07 	bl	8000b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2110      	movs	r1, #16
 800031c:	4819      	ldr	r0, [pc, #100]	; (8000384 <MX_GPIO_Init+0xec>)
 800031e:	f000 fc02 	bl	8000b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000322:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000330:	2302      	movs	r3, #2
 8000332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	4811      	ldr	r0, [pc, #68]	; (8000380 <MX_GPIO_Init+0xe8>)
 800033c:	f000 fa58 	bl	80007f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULS_Pin */
  GPIO_InitStruct.Pin = PULS_Pin;
 8000340:	2308      	movs	r3, #8
 8000342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PULS_GPIO_Port, &GPIO_InitStruct);
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	4619      	mov	r1, r3
 8000352:	480c      	ldr	r0, [pc, #48]	; (8000384 <MX_GPIO_Init+0xec>)
 8000354:	f000 fa4c 	bl	80007f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000358:	2310      	movs	r3, #16
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035c:	2301      	movs	r3, #1
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000364:	2302      	movs	r3, #2
 8000366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	4619      	mov	r1, r3
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_GPIO_Init+0xec>)
 8000370:	f000 fa3e 	bl	80007f0 <HAL_GPIO_Init>

}
 8000374:	bf00      	nop
 8000376:	3720      	adds	r7, #32
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40021000 	.word	0x40021000
 8000380:	40011000 	.word	0x40011000
 8000384:	40010c00 	.word	0x40010c00

08000388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d101      	bne.n	800039e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800039a:	f000 f92d 	bl	80005f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40012c00 	.word	0x40012c00

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b0:	b672      	cpsid	i
}
 80003b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <Error_Handler+0x8>
	...

080003b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <HAL_MspInit+0x5c>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a14      	ldr	r2, [pc, #80]	; (8000414 <HAL_MspInit+0x5c>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <HAL_MspInit+0x5c>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <HAL_MspInit+0x5c>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <HAL_MspInit+0x5c>)
 80003dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e0:	61d3      	str	r3, [r2, #28]
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <HAL_MspInit+0x5c>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ee:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <HAL_MspInit+0x60>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_MspInit+0x60>)
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040a:	bf00      	nop
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	40021000 	.word	0x40021000
 8000418:	40010000 	.word	0x40010000

0800041c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08c      	sub	sp, #48	; 0x30
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800042c:	2200      	movs	r2, #0
 800042e:	6879      	ldr	r1, [r7, #4]
 8000430:	2019      	movs	r0, #25
 8000432:	f000 f9b2 	bl	800079a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000436:	2019      	movs	r0, #25
 8000438:	f000 f9cb 	bl	80007d2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800043c:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <HAL_InitTick+0x9c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a1d      	ldr	r2, [pc, #116]	; (80004b8 <HAL_InitTick+0x9c>)
 8000442:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <HAL_InitTick+0x9c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000454:	f107 0210 	add.w	r2, r7, #16
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	4611      	mov	r1, r2
 800045e:	4618      	mov	r0, r3
 8000460:	f000 ff62 	bl	8001328 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000464:	f000 ff4c 	bl	8001300 <HAL_RCC_GetPCLK2Freq>
 8000468:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800046c:	4a13      	ldr	r2, [pc, #76]	; (80004bc <HAL_InitTick+0xa0>)
 800046e:	fba2 2303 	umull	r2, r3, r2, r3
 8000472:	0c9b      	lsrs	r3, r3, #18
 8000474:	3b01      	subs	r3, #1
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <HAL_InitTick+0xa4>)
 800047a:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <HAL_InitTick+0xa8>)
 800047c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800047e:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <HAL_InitTick+0xa4>)
 8000480:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000484:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000486:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <HAL_InitTick+0xa4>)
 8000488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800048a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <HAL_InitTick+0xa4>)
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <HAL_InitTick+0xa4>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000498:	4809      	ldr	r0, [pc, #36]	; (80004c0 <HAL_InitTick+0xa4>)
 800049a:	f000 ff93 	bl	80013c4 <HAL_TIM_Base_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d104      	bne.n	80004ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004a4:	4806      	ldr	r0, [pc, #24]	; (80004c0 <HAL_InitTick+0xa4>)
 80004a6:	f000 ffe5 	bl	8001474 <HAL_TIM_Base_Start_IT>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e000      	b.n	80004b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004ae:	2301      	movs	r3, #1
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3730      	adds	r7, #48	; 0x30
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	431bde83 	.word	0x431bde83
 80004c0:	200001f4 	.word	0x200001f4
 80004c4:	40012c00 	.word	0x40012c00

080004c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <NMI_Handler+0x4>

080004ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d2:	e7fe      	b.n	80004d2 <HardFault_Handler+0x4>

080004d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <MemManage_Handler+0x4>

080004da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <BusFault_Handler+0x4>

080004e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <UsageFault_Handler+0x4>

080004e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
	...

080004f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004f8:	4802      	ldr	r0, [pc, #8]	; (8000504 <TIM1_UP_IRQHandler+0x10>)
 80004fa:	f001 f80d 	bl	8001518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200001f4 	.word	0x200001f4

08000508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <_sbrk+0x5c>)
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <_sbrk+0x60>)
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <_sbrk+0x64>)
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <_sbrk+0x68>)
 8000528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	429a      	cmp	r2, r3
 8000536:	d207      	bcs.n	8000548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000538:	f003 fab8 	bl	8003aac <__errno>
 800053c:	4603      	mov	r3, r0
 800053e:	220c      	movs	r2, #12
 8000540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	e009      	b.n	800055c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <_sbrk+0x64>)
 8000558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055a:	68fb      	ldr	r3, [r7, #12]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20005000 	.word	0x20005000
 8000568:	00000400 	.word	0x00000400
 800056c:	20000094 	.word	0x20000094
 8000570:	20000290 	.word	0x20000290

08000574 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000582:	490d      	ldr	r1, [pc, #52]	; (80005b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000588:	e002      	b.n	8000590 <LoopCopyDataInit>

0800058a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800058c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058e:	3304      	adds	r3, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000594:	d3f9      	bcc.n	800058a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000598:	4c0a      	ldr	r4, [pc, #40]	; (80005c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800059c:	e001      	b.n	80005a2 <LoopFillZerobss>

0800059e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a0:	3204      	adds	r2, #4

080005a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a4:	d3fb      	bcc.n	800059e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005a6:	f7ff ffe5 	bl	8000574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005aa:	f003 fa85 	bl	8003ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ae:	f7ff fe03 	bl	80001b8 <main>
  bx lr
 80005b2:	4770      	bx	lr
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005bc:	08003d38 	.word	0x08003d38
  ldr r2, =_sbss
 80005c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80005c4:	20000290 	.word	0x20000290

080005c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC1_2_IRQHandler>
	...

080005cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_Init+0x28>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <HAL_Init+0x28>)
 80005d6:	f043 0310 	orr.w	r3, r3, #16
 80005da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f8d1 	bl	8000784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ff1a 	bl	800041c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e8:	f7ff fee6 	bl	80003b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40022000 	.word	0x40022000

080005f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_IncTick+0x1c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <HAL_IncTick+0x20>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4413      	add	r3, r2
 8000608:	4a03      	ldr	r2, [pc, #12]	; (8000618 <HAL_IncTick+0x20>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	20000008 	.word	0x20000008
 8000618:	2000023c 	.word	0x2000023c

0800061c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return uwTick;
 8000620:	4b02      	ldr	r3, [pc, #8]	; (800062c <HAL_GetTick+0x10>)
 8000622:	681b      	ldr	r3, [r3, #0]
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	2000023c 	.word	0x2000023c

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4906      	ldr	r1, [pc, #24]	; (80006c8 <__NVIC_EnableIRQ+0x34>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff ff4f 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007ac:	f7ff ff64 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	68b9      	ldr	r1, [r7, #8]
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff ffb2 	bl	8000720 <NVIC_EncodePriority>
 80007bc:	4602      	mov	r2, r0
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff81 	bl	80006cc <__NVIC_SetPriority>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff57 	bl	8000694 <__NVIC_EnableIRQ>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b08b      	sub	sp, #44	; 0x2c
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000802:	e169      	b.n	8000ad8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000804:	2201      	movs	r2, #1
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	fa02 f303 	lsl.w	r3, r2, r3
 800080c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	69fa      	ldr	r2, [r7, #28]
 8000814:	4013      	ands	r3, r2
 8000816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000818:	69ba      	ldr	r2, [r7, #24]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	429a      	cmp	r2, r3
 800081e:	f040 8158 	bne.w	8000ad2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	4a9a      	ldr	r2, [pc, #616]	; (8000a90 <HAL_GPIO_Init+0x2a0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d05e      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
 800082c:	4a98      	ldr	r2, [pc, #608]	; (8000a90 <HAL_GPIO_Init+0x2a0>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d875      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 8000832:	4a98      	ldr	r2, [pc, #608]	; (8000a94 <HAL_GPIO_Init+0x2a4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d058      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
 8000838:	4a96      	ldr	r2, [pc, #600]	; (8000a94 <HAL_GPIO_Init+0x2a4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d86f      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 800083e:	4a96      	ldr	r2, [pc, #600]	; (8000a98 <HAL_GPIO_Init+0x2a8>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d052      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
 8000844:	4a94      	ldr	r2, [pc, #592]	; (8000a98 <HAL_GPIO_Init+0x2a8>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d869      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 800084a:	4a94      	ldr	r2, [pc, #592]	; (8000a9c <HAL_GPIO_Init+0x2ac>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d04c      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
 8000850:	4a92      	ldr	r2, [pc, #584]	; (8000a9c <HAL_GPIO_Init+0x2ac>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d863      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 8000856:	4a92      	ldr	r2, [pc, #584]	; (8000aa0 <HAL_GPIO_Init+0x2b0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d046      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
 800085c:	4a90      	ldr	r2, [pc, #576]	; (8000aa0 <HAL_GPIO_Init+0x2b0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d85d      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 8000862:	2b12      	cmp	r3, #18
 8000864:	d82a      	bhi.n	80008bc <HAL_GPIO_Init+0xcc>
 8000866:	2b12      	cmp	r3, #18
 8000868:	d859      	bhi.n	800091e <HAL_GPIO_Init+0x12e>
 800086a:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <HAL_GPIO_Init+0x80>)
 800086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000870:	080008eb 	.word	0x080008eb
 8000874:	080008c5 	.word	0x080008c5
 8000878:	080008d7 	.word	0x080008d7
 800087c:	08000919 	.word	0x08000919
 8000880:	0800091f 	.word	0x0800091f
 8000884:	0800091f 	.word	0x0800091f
 8000888:	0800091f 	.word	0x0800091f
 800088c:	0800091f 	.word	0x0800091f
 8000890:	0800091f 	.word	0x0800091f
 8000894:	0800091f 	.word	0x0800091f
 8000898:	0800091f 	.word	0x0800091f
 800089c:	0800091f 	.word	0x0800091f
 80008a0:	0800091f 	.word	0x0800091f
 80008a4:	0800091f 	.word	0x0800091f
 80008a8:	0800091f 	.word	0x0800091f
 80008ac:	0800091f 	.word	0x0800091f
 80008b0:	0800091f 	.word	0x0800091f
 80008b4:	080008cd 	.word	0x080008cd
 80008b8:	080008e1 	.word	0x080008e1
 80008bc:	4a79      	ldr	r2, [pc, #484]	; (8000aa4 <HAL_GPIO_Init+0x2b4>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d013      	beq.n	80008ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008c2:	e02c      	b.n	800091e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	623b      	str	r3, [r7, #32]
          break;
 80008ca:	e029      	b.n	8000920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	3304      	adds	r3, #4
 80008d2:	623b      	str	r3, [r7, #32]
          break;
 80008d4:	e024      	b.n	8000920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	3308      	adds	r3, #8
 80008dc:	623b      	str	r3, [r7, #32]
          break;
 80008de:	e01f      	b.n	8000920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	330c      	adds	r3, #12
 80008e6:	623b      	str	r3, [r7, #32]
          break;
 80008e8:	e01a      	b.n	8000920 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d102      	bne.n	80008f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008f2:	2304      	movs	r3, #4
 80008f4:	623b      	str	r3, [r7, #32]
          break;
 80008f6:	e013      	b.n	8000920 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d105      	bne.n	800090c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000900:	2308      	movs	r3, #8
 8000902:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	69fa      	ldr	r2, [r7, #28]
 8000908:	611a      	str	r2, [r3, #16]
          break;
 800090a:	e009      	b.n	8000920 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800090c:	2308      	movs	r3, #8
 800090e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	615a      	str	r2, [r3, #20]
          break;
 8000916:	e003      	b.n	8000920 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
          break;
 800091c:	e000      	b.n	8000920 <HAL_GPIO_Init+0x130>
          break;
 800091e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	2bff      	cmp	r3, #255	; 0xff
 8000924:	d801      	bhi.n	800092a <HAL_GPIO_Init+0x13a>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	e001      	b.n	800092e <HAL_GPIO_Init+0x13e>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3304      	adds	r3, #4
 800092e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	2bff      	cmp	r3, #255	; 0xff
 8000934:	d802      	bhi.n	800093c <HAL_GPIO_Init+0x14c>
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	e002      	b.n	8000942 <HAL_GPIO_Init+0x152>
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	3b08      	subs	r3, #8
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	210f      	movs	r1, #15
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	fa01 f303 	lsl.w	r3, r1, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	401a      	ands	r2, r3
 8000954:	6a39      	ldr	r1, [r7, #32]
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	431a      	orrs	r2, r3
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 80b1 	beq.w	8000ad2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000970:	4b4d      	ldr	r3, [pc, #308]	; (8000aa8 <HAL_GPIO_Init+0x2b8>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a4c      	ldr	r2, [pc, #304]	; (8000aa8 <HAL_GPIO_Init+0x2b8>)
 8000976:	f043 0301 	orr.w	r3, r3, #1
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b4a      	ldr	r3, [pc, #296]	; (8000aa8 <HAL_GPIO_Init+0x2b8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000988:	4a48      	ldr	r2, [pc, #288]	; (8000aac <HAL_GPIO_Init+0x2bc>)
 800098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	3302      	adds	r3, #2
 8000990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000994:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	f003 0303 	and.w	r3, r3, #3
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	220f      	movs	r2, #15
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	4013      	ands	r3, r2
 80009aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a40      	ldr	r2, [pc, #256]	; (8000ab0 <HAL_GPIO_Init+0x2c0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d013      	beq.n	80009dc <HAL_GPIO_Init+0x1ec>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a3f      	ldr	r2, [pc, #252]	; (8000ab4 <HAL_GPIO_Init+0x2c4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d00d      	beq.n	80009d8 <HAL_GPIO_Init+0x1e8>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a3e      	ldr	r2, [pc, #248]	; (8000ab8 <HAL_GPIO_Init+0x2c8>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d007      	beq.n	80009d4 <HAL_GPIO_Init+0x1e4>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a3d      	ldr	r2, [pc, #244]	; (8000abc <HAL_GPIO_Init+0x2cc>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d101      	bne.n	80009d0 <HAL_GPIO_Init+0x1e0>
 80009cc:	2303      	movs	r3, #3
 80009ce:	e006      	b.n	80009de <HAL_GPIO_Init+0x1ee>
 80009d0:	2304      	movs	r3, #4
 80009d2:	e004      	b.n	80009de <HAL_GPIO_Init+0x1ee>
 80009d4:	2302      	movs	r3, #2
 80009d6:	e002      	b.n	80009de <HAL_GPIO_Init+0x1ee>
 80009d8:	2301      	movs	r3, #1
 80009da:	e000      	b.n	80009de <HAL_GPIO_Init+0x1ee>
 80009dc:	2300      	movs	r3, #0
 80009de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e0:	f002 0203 	and.w	r2, r2, #3
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	4093      	lsls	r3, r2
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ee:	492f      	ldr	r1, [pc, #188]	; (8000aac <HAL_GPIO_Init+0x2bc>)
 80009f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	3302      	adds	r3, #2
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d006      	beq.n	8000a16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	492c      	ldr	r1, [pc, #176]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	600b      	str	r3, [r1, #0]
 8000a14:	e006      	b.n	8000a24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	4928      	ldr	r1, [pc, #160]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a20:	4013      	ands	r3, r2
 8000a22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d006      	beq.n	8000a3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	4922      	ldr	r1, [pc, #136]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	604b      	str	r3, [r1, #4]
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	491e      	ldr	r1, [pc, #120]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a48:	4013      	ands	r3, r2
 8000a4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d006      	beq.n	8000a66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	4918      	ldr	r1, [pc, #96]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	608b      	str	r3, [r1, #8]
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	4914      	ldr	r1, [pc, #80]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a70:	4013      	ands	r3, r2
 8000a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d021      	beq.n	8000ac4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a82:	68da      	ldr	r2, [r3, #12]
 8000a84:	490e      	ldr	r1, [pc, #56]	; (8000ac0 <HAL_GPIO_Init+0x2d0>)
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	60cb      	str	r3, [r1, #12]
 8000a8c:	e021      	b.n	8000ad2 <HAL_GPIO_Init+0x2e2>
 8000a8e:	bf00      	nop
 8000a90:	10320000 	.word	0x10320000
 8000a94:	10310000 	.word	0x10310000
 8000a98:	10220000 	.word	0x10220000
 8000a9c:	10210000 	.word	0x10210000
 8000aa0:	10120000 	.word	0x10120000
 8000aa4:	10110000 	.word	0x10110000
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010000 	.word	0x40010000
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	40011000 	.word	0x40011000
 8000abc:	40011400 	.word	0x40011400
 8000ac0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_GPIO_Init+0x304>)
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	4909      	ldr	r1, [pc, #36]	; (8000af4 <HAL_GPIO_Init+0x304>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f47f ae8e 	bne.w	8000804 <HAL_GPIO_Init+0x14>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	372c      	adds	r7, #44	; 0x2c
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40010400 	.word	0x40010400

08000af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e001      	b.n	8000b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b16:	2300      	movs	r3, #0
 8000b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	807b      	strh	r3, [r7, #2]
 8000b32:	4613      	mov	r3, r2
 8000b34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b36:	787b      	ldrb	r3, [r7, #1]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b3c:	887a      	ldrh	r2, [r7, #2]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b42:	e003      	b.n	8000b4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	041a      	lsls	r2, r3, #16
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	611a      	str	r2, [r3, #16]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
	...

08000b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e26c      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 8087 	beq.w	8000c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b78:	4b92      	ldr	r3, [pc, #584]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 030c 	and.w	r3, r3, #12
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d00c      	beq.n	8000b9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b84:	4b8f      	ldr	r3, [pc, #572]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f003 030c 	and.w	r3, r3, #12
 8000b8c:	2b08      	cmp	r3, #8
 8000b8e:	d112      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x5e>
 8000b90:	4b8c      	ldr	r3, [pc, #560]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9c:	d10b      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9e:	4b89      	ldr	r3, [pc, #548]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d06c      	beq.n	8000c84 <HAL_RCC_OscConfig+0x12c>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d168      	bne.n	8000c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e246      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bbe:	d106      	bne.n	8000bce <HAL_RCC_OscConfig+0x76>
 8000bc0:	4b80      	ldr	r3, [pc, #512]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a7f      	ldr	r2, [pc, #508]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	e02e      	b.n	8000c2c <HAL_RCC_OscConfig+0xd4>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10c      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x98>
 8000bd6:	4b7b      	ldr	r3, [pc, #492]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a7a      	ldr	r2, [pc, #488]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	4b78      	ldr	r3, [pc, #480]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a77      	ldr	r2, [pc, #476]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e01d      	b.n	8000c2c <HAL_RCC_OscConfig+0xd4>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf8:	d10c      	bne.n	8000c14 <HAL_RCC_OscConfig+0xbc>
 8000bfa:	4b72      	ldr	r3, [pc, #456]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a71      	ldr	r2, [pc, #452]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	4b6f      	ldr	r3, [pc, #444]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a6e      	ldr	r2, [pc, #440]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e00b      	b.n	8000c2c <HAL_RCC_OscConfig+0xd4>
 8000c14:	4b6b      	ldr	r3, [pc, #428]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a6a      	ldr	r2, [pc, #424]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b68      	ldr	r3, [pc, #416]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a67      	ldr	r2, [pc, #412]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d013      	beq.n	8000c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fcf2 	bl	800061c <HAL_GetTick>
 8000c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c3c:	f7ff fcee 	bl	800061c <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b64      	cmp	r3, #100	; 0x64
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e1fa      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4e:	4b5d      	ldr	r3, [pc, #372]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f0      	beq.n	8000c3c <HAL_RCC_OscConfig+0xe4>
 8000c5a:	e014      	b.n	8000c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fcde 	bl	800061c <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c64:	f7ff fcda 	bl	800061c <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b64      	cmp	r3, #100	; 0x64
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e1e6      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c76:	4b53      	ldr	r3, [pc, #332]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f0      	bne.n	8000c64 <HAL_RCC_OscConfig+0x10c>
 8000c82:	e000      	b.n	8000c86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d063      	beq.n	8000d5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c92:	4b4c      	ldr	r3, [pc, #304]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 030c 	and.w	r3, r3, #12
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00b      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c9e:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
 8000ca6:	2b08      	cmp	r3, #8
 8000ca8:	d11c      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x18c>
 8000caa:	4b46      	ldr	r3, [pc, #280]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d116      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb6:	4b43      	ldr	r3, [pc, #268]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d005      	beq.n	8000cce <HAL_RCC_OscConfig+0x176>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d001      	beq.n	8000cce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e1ba      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cce:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	4939      	ldr	r1, [pc, #228]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce2:	e03a      	b.n	8000d5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d020      	beq.n	8000d2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cec:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <HAL_RCC_OscConfig+0x270>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf2:	f7ff fc93 	bl	800061c <HAL_GetTick>
 8000cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf8:	e008      	b.n	8000d0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cfa:	f7ff fc8f 	bl	800061c <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d901      	bls.n	8000d0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e19b      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0f0      	beq.n	8000cfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d18:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	4927      	ldr	r1, [pc, #156]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
 8000d2c:	e015      	b.n	8000d5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <HAL_RCC_OscConfig+0x270>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fc72 	bl	800061c <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d3c:	f7ff fc6e 	bl	800061c <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e17a      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d03a      	beq.n	8000ddc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d019      	beq.n	8000da2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_RCC_OscConfig+0x274>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d74:	f7ff fc52 	bl	800061c <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fc4e 	bl	800061c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e15a      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f0      	beq.n	8000d7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f000 faf4 	bl	8001388 <RCC_Delay>
 8000da0:	e01c      	b.n	8000ddc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_RCC_OscConfig+0x274>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da8:	f7ff fc38 	bl	800061c <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dae:	e00f      	b.n	8000dd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fc34 	bl	800061c <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d908      	bls.n	8000dd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e140      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	42420000 	.word	0x42420000
 8000dcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd0:	4b9e      	ldr	r3, [pc, #632]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e9      	bne.n	8000db0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80a6 	beq.w	8000f36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dee:	4b97      	ldr	r3, [pc, #604]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10d      	bne.n	8000e16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b94      	ldr	r3, [pc, #592]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a93      	ldr	r2, [pc, #588]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	61d3      	str	r3, [r2, #28]
 8000e06:	4b91      	ldr	r3, [pc, #580]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e12:	2301      	movs	r3, #1
 8000e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e16:	4b8e      	ldr	r3, [pc, #568]	; (8001050 <HAL_RCC_OscConfig+0x4f8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d118      	bne.n	8000e54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e22:	4b8b      	ldr	r3, [pc, #556]	; (8001050 <HAL_RCC_OscConfig+0x4f8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a8a      	ldr	r2, [pc, #552]	; (8001050 <HAL_RCC_OscConfig+0x4f8>)
 8000e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fbf5 	bl	800061c <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e34:	e008      	b.n	8000e48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e36:	f7ff fbf1 	bl	800061c <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b64      	cmp	r3, #100	; 0x64
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e0fd      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e48:	4b81      	ldr	r3, [pc, #516]	; (8001050 <HAL_RCC_OscConfig+0x4f8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f0      	beq.n	8000e36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d106      	bne.n	8000e6a <HAL_RCC_OscConfig+0x312>
 8000e5c:	4b7b      	ldr	r3, [pc, #492]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	4a7a      	ldr	r2, [pc, #488]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6213      	str	r3, [r2, #32]
 8000e68:	e02d      	b.n	8000ec6 <HAL_RCC_OscConfig+0x36e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10c      	bne.n	8000e8c <HAL_RCC_OscConfig+0x334>
 8000e72:	4b76      	ldr	r3, [pc, #472]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e74:	6a1b      	ldr	r3, [r3, #32]
 8000e76:	4a75      	ldr	r2, [pc, #468]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	6213      	str	r3, [r2, #32]
 8000e7e:	4b73      	ldr	r3, [pc, #460]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	4a72      	ldr	r2, [pc, #456]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e84:	f023 0304 	bic.w	r3, r3, #4
 8000e88:	6213      	str	r3, [r2, #32]
 8000e8a:	e01c      	b.n	8000ec6 <HAL_RCC_OscConfig+0x36e>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d10c      	bne.n	8000eae <HAL_RCC_OscConfig+0x356>
 8000e94:	4b6d      	ldr	r3, [pc, #436]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4a6c      	ldr	r2, [pc, #432]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6213      	str	r3, [r2, #32]
 8000ea0:	4b6a      	ldr	r3, [pc, #424]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4a69      	ldr	r2, [pc, #420]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6213      	str	r3, [r2, #32]
 8000eac:	e00b      	b.n	8000ec6 <HAL_RCC_OscConfig+0x36e>
 8000eae:	4b67      	ldr	r3, [pc, #412]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a66      	ldr	r2, [pc, #408]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6213      	str	r3, [r2, #32]
 8000eba:	4b64      	ldr	r3, [pc, #400]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	4a63      	ldr	r2, [pc, #396]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	f023 0304 	bic.w	r3, r3, #4
 8000ec4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d015      	beq.n	8000efa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fba5 	bl	800061c <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fba1 	bl	800061c <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e0ab      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eec:	4b57      	ldr	r3, [pc, #348]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0ee      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x37e>
 8000ef8:	e014      	b.n	8000f24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fb8f 	bl	800061c <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f00:	e00a      	b.n	8000f18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fb8b 	bl	800061c <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e095      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f18:	4b4c      	ldr	r3, [pc, #304]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1ee      	bne.n	8000f02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d105      	bne.n	8000f36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2a:	4b48      	ldr	r3, [pc, #288]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a47      	ldr	r2, [pc, #284]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8081 	beq.w	8001042 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f40:	4b42      	ldr	r3, [pc, #264]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d061      	beq.n	8001010 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d146      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <HAL_RCC_OscConfig+0x4fc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fb5f 	bl	800061c <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f62:	f7ff fb5b 	bl	800061c <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e067      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f0      	bne.n	8000f62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f88:	d108      	bne.n	8000f9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f8a:	4b30      	ldr	r3, [pc, #192]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	492d      	ldr	r1, [pc, #180]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a19      	ldr	r1, [r3, #32]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	430b      	orrs	r3, r1
 8000fae:	4927      	ldr	r1, [pc, #156]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <HAL_RCC_OscConfig+0x4fc>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb2f 	bl	800061c <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc2:	f7ff fb2b 	bl	800061c <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e037      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f0      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x46a>
 8000fe0:	e02f      	b.n	8001042 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_RCC_OscConfig+0x4fc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fb18 	bl	800061c <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff0:	f7ff fb14 	bl	800061c <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e020      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x498>
 800100e:	e018      	b.n	8001042 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e013      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	429a      	cmp	r2, r3
 800102e:	d106      	bne.n	800103e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800103a:	429a      	cmp	r2, r3
 800103c:	d001      	beq.n	8001042 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	40007000 	.word	0x40007000
 8001054:	42420060 	.word	0x42420060

08001058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0d0      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800106c:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d910      	bls.n	800109c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	4b67      	ldr	r3, [pc, #412]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 0207 	bic.w	r2, r3, #7
 8001082:	4965      	ldr	r1, [pc, #404]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4313      	orrs	r3, r2
 8001088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800108a:	4b63      	ldr	r3, [pc, #396]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d001      	beq.n	800109c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0b8      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b4:	4b59      	ldr	r3, [pc, #356]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a58      	ldr	r2, [pc, #352]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010cc:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a52      	ldr	r2, [pc, #328]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d8:	4b50      	ldr	r3, [pc, #320]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	494d      	ldr	r1, [pc, #308]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d040      	beq.n	8001178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d107      	bne.n	800110e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b47      	ldr	r3, [pc, #284]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d115      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e07f      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d107      	bne.n	8001126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e073      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e06b      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f023 0203 	bic.w	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4936      	ldr	r1, [pc, #216]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001148:	f7ff fa68 	bl	800061c <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	e00a      	b.n	8001166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001150:	f7ff fa64 	bl	800061c <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f241 3288 	movw	r2, #5000	; 0x1388
 800115e:	4293      	cmp	r3, r2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e053      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 020c 	and.w	r2, r3, #12
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	429a      	cmp	r2, r3
 8001176:	d1eb      	bne.n	8001150 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d210      	bcs.n	80011a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 0207 	bic.w	r2, r3, #7
 800118e:	4922      	ldr	r1, [pc, #136]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e032      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d008      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4916      	ldr	r1, [pc, #88]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d009      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	490e      	ldr	r1, [pc, #56]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011e6:	f000 f821 	bl	800122c <HAL_RCC_GetSysClockFreq>
 80011ea:	4602      	mov	r2, r0
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	490a      	ldr	r1, [pc, #40]	; (8001220 <HAL_RCC_ClockConfig+0x1c8>)
 80011f8:	5ccb      	ldrb	r3, [r1, r3]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <HAL_RCC_ClockConfig+0x1cc>)
 8001200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_RCC_ClockConfig+0x1d0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f908 	bl	800041c <HAL_InitTick>

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000
 800121c:	40021000 	.word	0x40021000
 8001220:	08003d18 	.word	0x08003d18
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800122c:	b490      	push	{r4, r7}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001232:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001234:	1d3c      	adds	r4, r7, #4
 8001236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800123c:	f240 2301 	movw	r3, #513	; 0x201
 8001240:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	2300      	movs	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001256:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b04      	cmp	r3, #4
 8001264:	d002      	beq.n	800126c <HAL_RCC_GetSysClockFreq+0x40>
 8001266:	2b08      	cmp	r3, #8
 8001268:	d003      	beq.n	8001272 <HAL_RCC_GetSysClockFreq+0x46>
 800126a:	e02d      	b.n	80012c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800126e:	623b      	str	r3, [r7, #32]
      break;
 8001270:	e02d      	b.n	80012ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	0c9b      	lsrs	r3, r3, #18
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800127e:	4413      	add	r3, r2
 8001280:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001284:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	0c5b      	lsrs	r3, r3, #17
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800129e:	4413      	add	r3, r2
 80012a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012aa:	fb02 f203 	mul.w	r2, r2, r3
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
 80012b6:	e004      	b.n	80012c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	623b      	str	r3, [r7, #32]
      break;
 80012c6:	e002      	b.n	80012ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ca:	623b      	str	r3, [r7, #32]
      break;
 80012cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ce:	6a3b      	ldr	r3, [r7, #32]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc90      	pop	{r4, r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	08003cf0 	.word	0x08003cf0
 80012e0:	40021000 	.word	0x40021000
 80012e4:	007a1200 	.word	0x007a1200
 80012e8:	003d0900 	.word	0x003d0900

080012ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012f0:	4b02      	ldr	r3, [pc, #8]	; (80012fc <HAL_RCC_GetHCLKFreq+0x10>)
 80012f2:	681b      	ldr	r3, [r3, #0]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000000 	.word	0x20000000

08001300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001304:	f7ff fff2 	bl	80012ec <HAL_RCC_GetHCLKFreq>
 8001308:	4602      	mov	r2, r0
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	0adb      	lsrs	r3, r3, #11
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	4903      	ldr	r1, [pc, #12]	; (8001324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001316:	5ccb      	ldrb	r3, [r1, r3]
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	08003d28 	.word	0x08003d28

08001328 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	220f      	movs	r2, #15
 8001336:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_RCC_GetClockConfig+0x58>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_RCC_GetClockConfig+0x58>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_GetClockConfig+0x58>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_RCC_GetClockConfig+0x58>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_RCC_GetClockConfig+0x5c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0207 	and.w	r2, r3, #7
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000
 8001384:	40022000 	.word	0x40022000

08001388 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <RCC_Delay+0x34>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <RCC_Delay+0x38>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0a5b      	lsrs	r3, r3, #9
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013a4:	bf00      	nop
  }
  while (Delay --);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1e5a      	subs	r2, r3, #1
 80013aa:	60fa      	str	r2, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f9      	bne.n	80013a4 <RCC_Delay+0x1c>
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000000 	.word	0x20000000
 80013c0:	10624dd3 	.word	0x10624dd3

080013c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e041      	b.n	800145a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d106      	bne.n	80013f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f839 	bl	8001462 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2202      	movs	r2, #2
 80013f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3304      	adds	r3, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4610      	mov	r0, r2
 8001404:	f000 f9b4 	bl	8001770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b01      	cmp	r3, #1
 8001486:	d001      	beq.n	800148c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e03a      	b.n	8001502 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a18      	ldr	r2, [pc, #96]	; (800150c <HAL_TIM_Base_Start_IT+0x98>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00e      	beq.n	80014cc <HAL_TIM_Base_Start_IT+0x58>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b6:	d009      	beq.n	80014cc <HAL_TIM_Base_Start_IT+0x58>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <HAL_TIM_Base_Start_IT+0x9c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d004      	beq.n	80014cc <HAL_TIM_Base_Start_IT+0x58>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <HAL_TIM_Base_Start_IT+0xa0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d111      	bne.n	80014f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d010      	beq.n	8001500 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014ee:	e007      	b.n	8001500 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40012c00 	.word	0x40012c00
 8001510:	40000400 	.word	0x40000400
 8001514:	40000800 	.word	0x40000800

08001518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b02      	cmp	r3, #2
 800152c:	d122      	bne.n	8001574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b02      	cmp	r3, #2
 800153a:	d11b      	bne.n	8001574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f06f 0202 	mvn.w	r2, #2
 8001544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f8ed 	bl	800173a <HAL_TIM_IC_CaptureCallback>
 8001560:	e005      	b.n	800156e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f8e0 	bl	8001728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f8ef 	bl	800174c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b04      	cmp	r3, #4
 8001580:	d122      	bne.n	80015c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b04      	cmp	r3, #4
 800158e:	d11b      	bne.n	80015c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f06f 0204 	mvn.w	r2, #4
 8001598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2202      	movs	r2, #2
 800159e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f8c3 	bl	800173a <HAL_TIM_IC_CaptureCallback>
 80015b4:	e005      	b.n	80015c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f8b6 	bl	8001728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f8c5 	bl	800174c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b08      	cmp	r3, #8
 80015d4:	d122      	bne.n	800161c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d11b      	bne.n	800161c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f06f 0208 	mvn.w	r2, #8
 80015ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2204      	movs	r2, #4
 80015f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f899 	bl	800173a <HAL_TIM_IC_CaptureCallback>
 8001608:	e005      	b.n	8001616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f88c 	bl	8001728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 f89b 	bl	800174c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	2b10      	cmp	r3, #16
 8001628:	d122      	bne.n	8001670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	2b10      	cmp	r3, #16
 8001636:	d11b      	bne.n	8001670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f06f 0210 	mvn.w	r2, #16
 8001640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2208      	movs	r2, #8
 8001646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f86f 	bl	800173a <HAL_TIM_IC_CaptureCallback>
 800165c:	e005      	b.n	800166a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f862 	bl	8001728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f871 	bl	800174c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10e      	bne.n	800169c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d107      	bne.n	800169c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f06f 0201 	mvn.w	r2, #1
 8001694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7fe fe76 	bl	8000388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a6:	2b80      	cmp	r3, #128	; 0x80
 80016a8:	d10e      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b4:	2b80      	cmp	r3, #128	; 0x80
 80016b6:	d107      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f8bf 	bl	8001846 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d2:	2b40      	cmp	r3, #64	; 0x40
 80016d4:	d10e      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e0:	2b40      	cmp	r3, #64	; 0x40
 80016e2:	d107      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f835 	bl	800175e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d10e      	bne.n	8001720 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f003 0320 	and.w	r3, r3, #32
 800170c:	2b20      	cmp	r3, #32
 800170e:	d107      	bne.n	8001720 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0220 	mvn.w	r2, #32
 8001718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f88a 	bl	8001834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a29      	ldr	r2, [pc, #164]	; (8001828 <TIM_Base_SetConfig+0xb8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d00b      	beq.n	80017a0 <TIM_Base_SetConfig+0x30>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800178e:	d007      	beq.n	80017a0 <TIM_Base_SetConfig+0x30>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a26      	ldr	r2, [pc, #152]	; (800182c <TIM_Base_SetConfig+0xbc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d003      	beq.n	80017a0 <TIM_Base_SetConfig+0x30>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a25      	ldr	r2, [pc, #148]	; (8001830 <TIM_Base_SetConfig+0xc0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d108      	bne.n	80017b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <TIM_Base_SetConfig+0xb8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00b      	beq.n	80017d2 <TIM_Base_SetConfig+0x62>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c0:	d007      	beq.n	80017d2 <TIM_Base_SetConfig+0x62>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a19      	ldr	r2, [pc, #100]	; (800182c <TIM_Base_SetConfig+0xbc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d003      	beq.n	80017d2 <TIM_Base_SetConfig+0x62>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a18      	ldr	r2, [pc, #96]	; (8001830 <TIM_Base_SetConfig+0xc0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d108      	bne.n	80017e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a07      	ldr	r2, [pc, #28]	; (8001828 <TIM_Base_SetConfig+0xb8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d103      	bne.n	8001818 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	615a      	str	r2, [r3, #20]
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40012c00 	.word	0x40012c00
 800182c:	40000400 	.word	0x40000400
 8001830:	40000800 	.word	0x40000800

08001834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <xTaskCreate>:
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	; 0x30
 800185c:	af04      	add	r7, sp, #16
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4618      	mov	r0, r3
 800186c:	f001 fae8 	bl	8002e40 <pvPortMalloc>
 8001870:	6178      	str	r0, [r7, #20]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <xTaskCreate+0x48>
 8001878:	207c      	movs	r0, #124	; 0x7c
 800187a:	f001 fae1 	bl	8002e40 <pvPortMalloc>
 800187e:	61f8      	str	r0, [r7, #28]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d008      	beq.n	8001898 <xTaskCreate+0x40>
 8001886:	227c      	movs	r2, #124	; 0x7c
 8001888:	2100      	movs	r1, #0
 800188a:	69f8      	ldr	r0, [r7, #28]
 800188c:	f002 f956 	bl	8003b3c <memset>
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
 8001896:	e005      	b.n	80018a4 <xTaskCreate+0x4c>
 8001898:	6978      	ldr	r0, [r7, #20]
 800189a:	f001 fae3 	bl	8002e64 <vPortFree>
 800189e:	e001      	b.n	80018a4 <xTaskCreate+0x4c>
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d013      	beq.n	80018d2 <xTaskCreate+0x7a>
 80018aa:	2300      	movs	r3, #0
 80018ac:	9303      	str	r3, [sp, #12]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	9302      	str	r3, [sp, #8]
 80018b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f80e 	bl	80018e2 <prvInitialiseNewTask>
 80018c6:	69f8      	ldr	r0, [r7, #28]
 80018c8:	f000 f89a 	bl	8001a00 <prvAddNewTaskToReadyList>
 80018cc:	2301      	movs	r3, #1
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	e002      	b.n	80018d8 <xTaskCreate+0x80>
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	4618      	mov	r0, r3
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <prvInitialiseNewTask>:
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b088      	sub	sp, #32
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	461a      	mov	r2, r3
 80018fa:	21a5      	movs	r1, #165	; 0xa5
 80018fc:	f002 f91e 	bl	8003b3c <memset>
 8001900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800190a:	3b01      	subs	r3, #1
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	f023 0307 	bic.w	r3, r3, #7
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00a      	beq.n	800193a <prvInitialiseNewTask+0x58>
 8001924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001928:	f383 8811 	msr	BASEPRI, r3
 800192c:	f3bf 8f6f 	isb	sy
 8001930:	f3bf 8f4f 	dsb	sy
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	bf00      	nop
 8001938:	e7fe      	b.n	8001938 <prvInitialiseNewTask+0x56>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01e      	beq.n	800197e <prvInitialiseNewTask+0x9c>
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	e012      	b.n	800196c <prvInitialiseNewTask+0x8a>
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	7819      	ldrb	r1, [r3, #0]
 800194e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	4413      	add	r3, r2
 8001954:	3334      	adds	r3, #52	; 0x34
 8001956:	460a      	mov	r2, r1
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	4413      	add	r3, r2
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <prvInitialiseNewTask+0x92>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3301      	adds	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b13      	cmp	r3, #19
 8001970:	d9e9      	bls.n	8001946 <prvInitialiseNewTask+0x64>
 8001972:	e000      	b.n	8001976 <prvInitialiseNewTask+0x94>
 8001974:	bf00      	nop
 8001976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001980:	2b04      	cmp	r3, #4
 8001982:	d90a      	bls.n	800199a <prvInitialiseNewTask+0xb8>
 8001984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001988:	f383 8811 	msr	BASEPRI, r3
 800198c:	f3bf 8f6f 	isb	sy
 8001990:	f3bf 8f4f 	dsb	sy
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	bf00      	nop
 8001998:	e7fe      	b.n	8001998 <prvInitialiseNewTask+0xb6>
 800199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199c:	2b04      	cmp	r3, #4
 800199e:	d901      	bls.n	80019a4 <prvInitialiseNewTask+0xc2>
 80019a0:	2304      	movs	r3, #4
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80019aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ae:	651a      	str	r2, [r3, #80]	; 0x50
 80019b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b2:	3304      	adds	r3, #4
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 fa86 	bl	8002ec6 <vListInitialiseItem>
 80019ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019bc:	3318      	adds	r3, #24
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 fa81 	bl	8002ec6 <vListInitialiseItem>
 80019c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019cc:	f1c3 0205 	rsb	r2, r3, #5
 80019d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d2:	619a      	str	r2, [r3, #24]
 80019d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	69b8      	ldr	r0, [r7, #24]
 80019e0:	f001 fade 	bl	8002fa0 <pxPortInitialiseStack>
 80019e4:	4602      	mov	r2, r0
 80019e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <prvInitialiseNewTask+0x114>
 80019f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	bf00      	nop
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <prvAddNewTaskToReadyList>:
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	f001 fbba 	bl	8003180 <vPortEnterCritical>
 8001a0c:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <prvAddNewTaskToReadyList+0x114>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	4a40      	ldr	r2, [pc, #256]	; (8001b14 <prvAddNewTaskToReadyList+0x114>)
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <prvAddNewTaskToReadyList+0x118>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <prvAddNewTaskToReadyList+0x32>
 8001a1e:	4a3e      	ldr	r2, [pc, #248]	; (8001b18 <prvAddNewTaskToReadyList+0x118>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <prvAddNewTaskToReadyList+0x114>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d110      	bne.n	8001a4e <prvAddNewTaskToReadyList+0x4e>
 8001a2c:	f000 fe62 	bl	80026f4 <prvInitialiseTaskLists>
 8001a30:	e00d      	b.n	8001a4e <prvAddNewTaskToReadyList+0x4e>
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <prvAddNewTaskToReadyList+0x11c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <prvAddNewTaskToReadyList+0x4e>
 8001a3a:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <prvAddNewTaskToReadyList+0x118>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d802      	bhi.n	8001a4e <prvAddNewTaskToReadyList+0x4e>
 8001a48:	4a33      	ldr	r2, [pc, #204]	; (8001b18 <prvAddNewTaskToReadyList+0x118>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <prvAddNewTaskToReadyList+0x120>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	4a32      	ldr	r2, [pc, #200]	; (8001b20 <prvAddNewTaskToReadyList+0x120>)
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <prvAddNewTaskToReadyList+0x120>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	649a      	str	r2, [r3, #72]	; 0x48
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <prvAddNewTaskToReadyList+0x124>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d903      	bls.n	8001a74 <prvAddNewTaskToReadyList+0x74>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	4a2c      	ldr	r2, [pc, #176]	; (8001b24 <prvAddNewTaskToReadyList+0x124>)
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a78:	492b      	ldr	r1, [pc, #172]	; (8001b28 <prvAddNewTaskToReadyList+0x128>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	3304      	adds	r3, #4
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	3204      	adds	r2, #4
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	1d1a      	adds	r2, r3, #4
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <prvAddNewTaskToReadyList+0x128>)
 8001ab8:	441a      	add	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac2:	4919      	ldr	r1, [pc, #100]	; (8001b28 <prvAddNewTaskToReadyList+0x128>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	1c59      	adds	r1, r3, #1
 8001ad2:	4815      	ldr	r0, [pc, #84]	; (8001b28 <prvAddNewTaskToReadyList+0x128>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4403      	add	r3, r0
 8001ade:	6019      	str	r1, [r3, #0]
 8001ae0:	f001 fb7e 	bl	80031e0 <vPortExitCritical>
 8001ae4:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <prvAddNewTaskToReadyList+0x11c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00e      	beq.n	8001b0a <prvAddNewTaskToReadyList+0x10a>
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <prvAddNewTaskToReadyList+0x118>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d207      	bcs.n	8001b0a <prvAddNewTaskToReadyList+0x10a>
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <prvAddNewTaskToReadyList+0x12c>)
 8001afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	f3bf 8f4f 	dsb	sy
 8001b06:	f3bf 8f6f 	isb	sy
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000170 	.word	0x20000170
 8001b18:	20000098 	.word	0x20000098
 8001b1c:	2000017c 	.word	0x2000017c
 8001b20:	2000018c 	.word	0x2000018c
 8001b24:	20000178 	.word	0x20000178
 8001b28:	2000009c 	.word	0x2000009c
 8001b2c:	e000ed04 	.word	0xe000ed04

08001b30 <vTaskDelay>:
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d017      	beq.n	8001b72 <vTaskDelay+0x42>
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <vTaskDelay+0x60>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00a      	beq.n	8001b60 <vTaskDelay+0x30>
 8001b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4e:	f383 8811 	msr	BASEPRI, r3
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	f3bf 8f4f 	dsb	sy
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	bf00      	nop
 8001b5e:	e7fe      	b.n	8001b5e <vTaskDelay+0x2e>
 8001b60:	f000 f86c 	bl	8001c3c <vTaskSuspendAll>
 8001b64:	2100      	movs	r1, #0
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fe7a 	bl	8002860 <prvAddCurrentTaskToDelayedList>
 8001b6c:	f000 f8aa 	bl	8001cc4 <xTaskResumeAll>
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <vTaskDelay+0x58>
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <vTaskDelay+0x64>)
 8001b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f3bf 8f4f 	dsb	sy
 8001b84:	f3bf 8f6f 	isb	sy
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000198 	.word	0x20000198
 8001b94:	e000ed04 	.word	0xe000ed04

08001b98 <vTaskStartScheduler>:
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <vTaskStartScheduler+0x88>)
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	491e      	ldr	r1, [pc, #120]	; (8001c24 <vTaskStartScheduler+0x8c>)
 8001bac:	481e      	ldr	r0, [pc, #120]	; (8001c28 <vTaskStartScheduler+0x90>)
 8001bae:	f7ff fe53 	bl	8001858 <xTaskCreate>
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d102      	bne.n	8001bc0 <vTaskStartScheduler+0x28>
 8001bba:	f000 febf 	bl	800293c <xTimerCreateTimerTask>
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d116      	bne.n	8001bf4 <vTaskStartScheduler+0x5c>
 8001bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bca:	f383 8811 	msr	BASEPRI, r3
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	bf00      	nop
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <vTaskStartScheduler+0x94>)
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <vTaskStartScheduler+0x98>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <vTaskStartScheduler+0x9c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f001 fa55 	bl	800309c <xPortStartScheduler>
 8001bf2:	e00e      	b.n	8001c12 <vTaskStartScheduler+0x7a>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d10a      	bne.n	8001c12 <vTaskStartScheduler+0x7a>
 8001bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c00:	f383 8811 	msr	BASEPRI, r3
 8001c04:	f3bf 8f6f 	isb	sy
 8001c08:	f3bf 8f4f 	dsb	sy
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	bf00      	nop
 8001c10:	e7fe      	b.n	8001c10 <vTaskStartScheduler+0x78>
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <vTaskStartScheduler+0xa0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000194 	.word	0x20000194
 8001c24:	08003d00 	.word	0x08003d00
 8001c28:	08002609 	.word	0x08002609
 8001c2c:	20000190 	.word	0x20000190
 8001c30:	2000017c 	.word	0x2000017c
 8001c34:	20000174 	.word	0x20000174
 8001c38:	2000000c 	.word	0x2000000c

08001c3c <vTaskSuspendAll>:
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <vTaskSuspendAll+0x18>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	4a03      	ldr	r2, [pc, #12]	; (8001c54 <vTaskSuspendAll+0x18>)
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000198 	.word	0x20000198

08001c58 <prvGetExpectedIdleTime>:
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <prvGetExpectedIdleTime+0x58>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <prvGetExpectedIdleTime+0x16>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <prvGetExpectedIdleTime+0x5c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <prvGetExpectedIdleTime+0x26>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	e012      	b.n	8001ca4 <prvGetExpectedIdleTime+0x4c>
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <prvGetExpectedIdleTime+0x60>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d902      	bls.n	8001c8c <prvGetExpectedIdleTime+0x34>
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	e00b      	b.n	8001ca4 <prvGetExpectedIdleTime+0x4c>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <prvGetExpectedIdleTime+0x40>
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	e005      	b.n	8001ca4 <prvGetExpectedIdleTime+0x4c>
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <prvGetExpectedIdleTime+0x64>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <prvGetExpectedIdleTime+0x68>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000178 	.word	0x20000178
 8001cb4:	20000098 	.word	0x20000098
 8001cb8:	2000009c 	.word	0x2000009c
 8001cbc:	20000190 	.word	0x20000190
 8001cc0:	20000174 	.word	0x20000174

08001cc4 <xTaskResumeAll>:
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	4b71      	ldr	r3, [pc, #452]	; (8001e98 <xTaskResumeAll+0x1d4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10a      	bne.n	8001cf0 <xTaskResumeAll+0x2c>
 8001cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cde:	f383 8811 	msr	BASEPRI, r3
 8001ce2:	f3bf 8f6f 	isb	sy
 8001ce6:	f3bf 8f4f 	dsb	sy
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	bf00      	nop
 8001cee:	e7fe      	b.n	8001cee <xTaskResumeAll+0x2a>
 8001cf0:	f001 fa46 	bl	8003180 <vPortEnterCritical>
 8001cf4:	4b68      	ldr	r3, [pc, #416]	; (8001e98 <xTaskResumeAll+0x1d4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <xTaskResumeAll+0x1d4>)
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <xTaskResumeAll+0x1d4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 80c1 	bne.w	8001e8a <xTaskResumeAll+0x1c6>
 8001d08:	4b64      	ldr	r3, [pc, #400]	; (8001e9c <xTaskResumeAll+0x1d8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80bc 	beq.w	8001e8a <xTaskResumeAll+0x1c6>
 8001d12:	e08b      	b.n	8001e2c <xTaskResumeAll+0x168>
 8001d14:	4b62      	ldr	r3, [pc, #392]	; (8001ea0 <xTaskResumeAll+0x1dc>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	69fa      	ldr	r2, [r7, #28]
 8001d28:	6a12      	ldr	r2, [r2, #32]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	69d2      	ldr	r2, [r2, #28]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3318      	adds	r3, #24
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d103      	bne.n	8001d4a <xTaskResumeAll+0x86>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	6a1a      	ldr	r2, [r3, #32]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	1e5a      	subs	r2, r3, #1
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	68d2      	ldr	r2, [r2, #12]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	6892      	ldr	r2, [r2, #8]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d103      	bne.n	8001d88 <xTaskResumeAll+0xc4>
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	1e5a      	subs	r2, r3, #1
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9c:	4b41      	ldr	r3, [pc, #260]	; (8001ea4 <xTaskResumeAll+0x1e0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d903      	bls.n	8001dac <xTaskResumeAll+0xe8>
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	4a3e      	ldr	r2, [pc, #248]	; (8001ea4 <xTaskResumeAll+0x1e0>)
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db0:	493d      	ldr	r1, [pc, #244]	; (8001ea8 <xTaskResumeAll+0x1e4>)
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	440b      	add	r3, r1
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	3204      	adds	r2, #4
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	1d1a      	adds	r2, r3, #4
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4a2e      	ldr	r2, [pc, #184]	; (8001ea8 <xTaskResumeAll+0x1e4>)
 8001df0:	441a      	add	r2, r3
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	615a      	str	r2, [r3, #20]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dfa:	492b      	ldr	r1, [pc, #172]	; (8001ea8 <xTaskResumeAll+0x1e4>)
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	1c59      	adds	r1, r3, #1
 8001e0a:	4827      	ldr	r0, [pc, #156]	; (8001ea8 <xTaskResumeAll+0x1e4>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4403      	add	r3, r0
 8001e16:	6019      	str	r1, [r3, #0]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1c:	4b23      	ldr	r3, [pc, #140]	; (8001eac <xTaskResumeAll+0x1e8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d302      	bcc.n	8001e2c <xTaskResumeAll+0x168>
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <xTaskResumeAll+0x1ec>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <xTaskResumeAll+0x1dc>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f47f af6f 	bne.w	8001d14 <xTaskResumeAll+0x50>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <xTaskResumeAll+0x17c>
 8001e3c:	f000 fcd8 	bl	80027f0 <prvResetNextTaskUnblockTime>
 8001e40:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <xTaskResumeAll+0x1f0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d010      	beq.n	8001e6e <xTaskResumeAll+0x1aa>
 8001e4c:	f000 f89e 	bl	8001f8c <xTaskIncrementTick>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <xTaskResumeAll+0x198>
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <xTaskResumeAll+0x1ec>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f1      	bne.n	8001e4c <xTaskResumeAll+0x188>
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <xTaskResumeAll+0x1f0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <xTaskResumeAll+0x1ec>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <xTaskResumeAll+0x1c6>
 8001e76:	2301      	movs	r3, #1
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <xTaskResumeAll+0x1f4>)
 8001e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	f3bf 8f4f 	dsb	sy
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	f001 f9a9 	bl	80031e0 <vPortExitCritical>
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4618      	mov	r0, r3
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000198 	.word	0x20000198
 8001e9c:	20000170 	.word	0x20000170
 8001ea0:	20000130 	.word	0x20000130
 8001ea4:	20000178 	.word	0x20000178
 8001ea8:	2000009c 	.word	0x2000009c
 8001eac:	20000098 	.word	0x20000098
 8001eb0:	20000184 	.word	0x20000184
 8001eb4:	20000180 	.word	0x20000180
 8001eb8:	e000ed04 	.word	0xe000ed04

08001ebc <xTaskGetTickCount>:
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <xTaskGetTickCount+0x18>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	20000174 	.word	0x20000174

08001ed8 <vTaskStepTick>:
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <vTaskStepTick+0xa4>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	441a      	add	r2, r3
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <vTaskStepTick+0xa8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d90a      	bls.n	8001f06 <vTaskStepTick+0x2e>
 8001ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	bf00      	nop
 8001f04:	e7fe      	b.n	8001f04 <vTaskStepTick+0x2c>
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <vTaskStepTick+0xa4>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	441a      	add	r2, r3
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <vTaskStepTick+0xa8>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d128      	bne.n	8001f68 <vTaskStepTick+0x90>
 8001f16:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <vTaskStepTick+0xac>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10a      	bne.n	8001f34 <vTaskStepTick+0x5c>
 8001f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f22:	f383 8811 	msr	BASEPRI, r3
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	bf00      	nop
 8001f32:	e7fe      	b.n	8001f32 <vTaskStepTick+0x5a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <vTaskStepTick+0x78>
 8001f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3e:	f383 8811 	msr	BASEPRI, r3
 8001f42:	f3bf 8f6f 	isb	sy
 8001f46:	f3bf 8f4f 	dsb	sy
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	bf00      	nop
 8001f4e:	e7fe      	b.n	8001f4e <vTaskStepTick+0x76>
 8001f50:	f001 f916 	bl	8003180 <vPortEnterCritical>
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <vTaskStepTick+0xb0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <vTaskStepTick+0xb0>)
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	f001 f93f 	bl	80031e0 <vPortExitCritical>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <vTaskStepTick+0xa4>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a02      	ldr	r2, [pc, #8]	; (8001f7c <vTaskStepTick+0xa4>)
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	bf00      	nop
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000174 	.word	0x20000174
 8001f80:	20000190 	.word	0x20000190
 8001f84:	20000198 	.word	0x20000198
 8001f88:	20000180 	.word	0x20000180

08001f8c <xTaskIncrementTick>:
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
 8001f96:	4b7e      	ldr	r3, [pc, #504]	; (8002190 <xTaskIncrementTick+0x204>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 80ed 	bne.w	800217a <xTaskIncrementTick+0x1ee>
 8001fa0:	4b7c      	ldr	r3, [pc, #496]	; (8002194 <xTaskIncrementTick+0x208>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	4a7a      	ldr	r2, [pc, #488]	; (8002194 <xTaskIncrementTick+0x208>)
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d120      	bne.n	8001ff6 <xTaskIncrementTick+0x6a>
 8001fb4:	4b78      	ldr	r3, [pc, #480]	; (8002198 <xTaskIncrementTick+0x20c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <xTaskIncrementTick+0x48>
 8001fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc2:	f383 8811 	msr	BASEPRI, r3
 8001fc6:	f3bf 8f6f 	isb	sy
 8001fca:	f3bf 8f4f 	dsb	sy
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	bf00      	nop
 8001fd2:	e7fe      	b.n	8001fd2 <xTaskIncrementTick+0x46>
 8001fd4:	4b70      	ldr	r3, [pc, #448]	; (8002198 <xTaskIncrementTick+0x20c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	4b70      	ldr	r3, [pc, #448]	; (800219c <xTaskIncrementTick+0x210>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6e      	ldr	r2, [pc, #440]	; (8002198 <xTaskIncrementTick+0x20c>)
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4a6e      	ldr	r2, [pc, #440]	; (800219c <xTaskIncrementTick+0x210>)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b6d      	ldr	r3, [pc, #436]	; (80021a0 <xTaskIncrementTick+0x214>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	4a6c      	ldr	r2, [pc, #432]	; (80021a0 <xTaskIncrementTick+0x214>)
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	f000 fbfd 	bl	80027f0 <prvResetNextTaskUnblockTime>
 8001ff6:	4b6b      	ldr	r3, [pc, #428]	; (80021a4 <xTaskIncrementTick+0x218>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6a3a      	ldr	r2, [r7, #32]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	f0c0 80a7 	bcc.w	8002150 <xTaskIncrementTick+0x1c4>
 8002002:	4b65      	ldr	r3, [pc, #404]	; (8002198 <xTaskIncrementTick+0x20c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d104      	bne.n	8002016 <xTaskIncrementTick+0x8a>
 800200c:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <xTaskIncrementTick+0x218>)
 800200e:	f04f 32ff 	mov.w	r2, #4294967295
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	e09c      	b.n	8002150 <xTaskIncrementTick+0x1c4>
 8002016:	4b60      	ldr	r3, [pc, #384]	; (8002198 <xTaskIncrementTick+0x20c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	6a3a      	ldr	r2, [r7, #32]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	429a      	cmp	r2, r3
 800202c:	d203      	bcs.n	8002036 <xTaskIncrementTick+0xaa>
 800202e:	4a5d      	ldr	r2, [pc, #372]	; (80021a4 <xTaskIncrementTick+0x218>)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e08c      	b.n	8002150 <xTaskIncrementTick+0x1c4>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	68d2      	ldr	r2, [r2, #12]
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	6892      	ldr	r2, [r2, #8]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	3304      	adds	r3, #4
 8002058:	429a      	cmp	r2, r3
 800205a:	d103      	bne.n	8002064 <xTaskIncrementTick+0xd8>
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1e5a      	subs	r2, r3, #1
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d01e      	beq.n	80020ba <xTaskIncrementTick+0x12e>
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	6a12      	ldr	r2, [r2, #32]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	69d2      	ldr	r2, [r2, #28]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	3318      	adds	r3, #24
 800209e:	429a      	cmp	r2, r3
 80020a0:	d103      	bne.n	80020aa <xTaskIncrementTick+0x11e>
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	2200      	movs	r2, #0
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	1e5a      	subs	r2, r3, #1
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <xTaskIncrementTick+0x21c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d903      	bls.n	80020ce <xTaskIncrementTick+0x142>
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	4a37      	ldr	r2, [pc, #220]	; (80021a8 <xTaskIncrementTick+0x21c>)
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d2:	4936      	ldr	r1, [pc, #216]	; (80021ac <xTaskIncrementTick+0x220>)
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	3304      	adds	r3, #4
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	3204      	adds	r2, #4
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	1d1a      	adds	r2, r3, #4
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <xTaskIncrementTick+0x220>)
 8002112:	441a      	add	r2, r3
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	615a      	str	r2, [r3, #20]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211c:	4923      	ldr	r1, [pc, #140]	; (80021ac <xTaskIncrementTick+0x220>)
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	1c59      	adds	r1, r3, #1
 800212c:	481f      	ldr	r0, [pc, #124]	; (80021ac <xTaskIncrementTick+0x220>)
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4403      	add	r3, r0
 8002138:	6019      	str	r1, [r3, #0]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213e:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <xTaskIncrementTick+0x224>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	429a      	cmp	r2, r3
 8002146:	f67f af5c 	bls.w	8002002 <xTaskIncrementTick+0x76>
 800214a:	2301      	movs	r3, #1
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	e758      	b.n	8002002 <xTaskIncrementTick+0x76>
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <xTaskIncrementTick+0x224>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002156:	4915      	ldr	r1, [pc, #84]	; (80021ac <xTaskIncrementTick+0x220>)
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d901      	bls.n	800216c <xTaskIncrementTick+0x1e0>
 8002168:	2301      	movs	r3, #1
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <xTaskIncrementTick+0x228>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <xTaskIncrementTick+0x1f8>
 8002174:	2301      	movs	r3, #1
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	e004      	b.n	8002184 <xTaskIncrementTick+0x1f8>
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <xTaskIncrementTick+0x22c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <xTaskIncrementTick+0x22c>)
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	4618      	mov	r0, r3
 8002188:	3728      	adds	r7, #40	; 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000198 	.word	0x20000198
 8002194:	20000174 	.word	0x20000174
 8002198:	20000128 	.word	0x20000128
 800219c:	2000012c 	.word	0x2000012c
 80021a0:	20000188 	.word	0x20000188
 80021a4:	20000190 	.word	0x20000190
 80021a8:	20000178 	.word	0x20000178
 80021ac:	2000009c 	.word	0x2000009c
 80021b0:	20000098 	.word	0x20000098
 80021b4:	20000184 	.word	0x20000184
 80021b8:	20000180 	.word	0x20000180

080021bc <vTaskSwitchContext>:
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4b27      	ldr	r3, [pc, #156]	; (8002260 <vTaskSwitchContext+0xa4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <vTaskSwitchContext+0x16>
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <vTaskSwitchContext+0xa8>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e041      	b.n	8002256 <vTaskSwitchContext+0x9a>
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <vTaskSwitchContext+0xa8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <vTaskSwitchContext+0xac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e010      	b.n	8002202 <vTaskSwitchContext+0x46>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <vTaskSwitchContext+0x40>
 80021e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ea:	f383 8811 	msr	BASEPRI, r3
 80021ee:	f3bf 8f6f 	isb	sy
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	bf00      	nop
 80021fa:	e7fe      	b.n	80021fa <vTaskSwitchContext+0x3e>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3b01      	subs	r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	491a      	ldr	r1, [pc, #104]	; (800226c <vTaskSwitchContext+0xb0>)
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0e4      	beq.n	80021e0 <vTaskSwitchContext+0x24>
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4a12      	ldr	r2, [pc, #72]	; (800226c <vTaskSwitchContext+0xb0>)
 8002222:	4413      	add	r3, r2
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	3308      	adds	r3, #8
 8002238:	429a      	cmp	r2, r3
 800223a:	d104      	bne.n	8002246 <vTaskSwitchContext+0x8a>
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a08      	ldr	r2, [pc, #32]	; (8002270 <vTaskSwitchContext+0xb4>)
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4a05      	ldr	r2, [pc, #20]	; (8002268 <vTaskSwitchContext+0xac>)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000198 	.word	0x20000198
 8002264:	20000184 	.word	0x20000184
 8002268:	20000178 	.word	0x20000178
 800226c:	2000009c 	.word	0x2000009c
 8002270:	20000098 	.word	0x20000098

08002274 <vTaskPlaceOnEventList>:
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10a      	bne.n	800229a <vTaskPlaceOnEventList+0x26>
 8002284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	bf00      	nop
 8002298:	e7fe      	b.n	8002298 <vTaskPlaceOnEventList+0x24>
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <vTaskPlaceOnEventList+0x44>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3318      	adds	r3, #24
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fe1b 	bl	8002ede <vListInsert>
 80022a8:	2101      	movs	r1, #1
 80022aa:	6838      	ldr	r0, [r7, #0]
 80022ac:	f000 fad8 	bl	8002860 <prvAddCurrentTaskToDelayedList>
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000098 	.word	0x20000098

080022bc <vTaskPlaceOnEventListRestricted>:
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10a      	bne.n	80022e4 <vTaskPlaceOnEventListRestricted+0x28>
 80022ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	bf00      	nop
 80022e2:	e7fe      	b.n	80022e2 <vTaskPlaceOnEventListRestricted+0x26>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <vTaskPlaceOnEventListRestricted+0x88>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	61da      	str	r2, [r3, #28]
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <vTaskPlaceOnEventListRestricted+0x88>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	6892      	ldr	r2, [r2, #8]
 80022fa:	621a      	str	r2, [r3, #32]
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <vTaskPlaceOnEventListRestricted+0x88>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	3218      	adds	r2, #24
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <vTaskPlaceOnEventListRestricted+0x88>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f103 0218 	add.w	r2, r3, #24
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <vTaskPlaceOnEventListRestricted+0x88>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <vTaskPlaceOnEventListRestricted+0x76>
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	68b8      	ldr	r0, [r7, #8]
 8002336:	f000 fa93 	bl	8002860 <prvAddCurrentTaskToDelayedList>
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000098 	.word	0x20000098

08002348 <xTaskRemoveFromEventList>:
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	623b      	str	r3, [r7, #32]
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <xTaskRemoveFromEventList+0x2c>
 800235e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002362:	f383 8811 	msr	BASEPRI, r3
 8002366:	f3bf 8f6f 	isb	sy
 800236a:	f3bf 8f4f 	dsb	sy
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	bf00      	nop
 8002372:	e7fe      	b.n	8002372 <xTaskRemoveFromEventList+0x2a>
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	6a3a      	ldr	r2, [r7, #32]
 8002380:	6a12      	ldr	r2, [r2, #32]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	6a3a      	ldr	r2, [r7, #32]
 800238a:	69d2      	ldr	r2, [r2, #28]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	3318      	adds	r3, #24
 8002396:	429a      	cmp	r2, r3
 8002398:	d103      	bne.n	80023a2 <xTaskRemoveFromEventList+0x5a>
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	6a1a      	ldr	r2, [r3, #32]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	2200      	movs	r2, #0
 80023a6:	629a      	str	r2, [r3, #40]	; 0x28
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	1e5a      	subs	r2, r3, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	4b4b      	ldr	r3, [pc, #300]	; (80024e0 <xTaskRemoveFromEventList+0x198>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d161      	bne.n	800247e <xTaskRemoveFromEventList+0x136>
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	68d2      	ldr	r2, [r2, #12]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	6a3a      	ldr	r2, [r7, #32]
 80023d0:	6892      	ldr	r2, [r2, #8]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	3304      	adds	r3, #4
 80023dc:	429a      	cmp	r2, r3
 80023de:	d103      	bne.n	80023e8 <xTaskRemoveFromEventList+0xa0>
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fc:	4b39      	ldr	r3, [pc, #228]	; (80024e4 <xTaskRemoveFromEventList+0x19c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d903      	bls.n	800240c <xTaskRemoveFromEventList+0xc4>
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	4a36      	ldr	r2, [pc, #216]	; (80024e4 <xTaskRemoveFromEventList+0x19c>)
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	4935      	ldr	r1, [pc, #212]	; (80024e8 <xTaskRemoveFromEventList+0x1a0>)
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	3304      	adds	r3, #4
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	6a3a      	ldr	r2, [r7, #32]
 8002436:	3204      	adds	r2, #4
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	1d1a      	adds	r2, r3, #4
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <xTaskRemoveFromEventList+0x1a0>)
 8002450:	441a      	add	r2, r3
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	615a      	str	r2, [r3, #20]
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245a:	4923      	ldr	r1, [pc, #140]	; (80024e8 <xTaskRemoveFromEventList+0x1a0>)
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	1c59      	adds	r1, r3, #1
 800246a:	481f      	ldr	r0, [pc, #124]	; (80024e8 <xTaskRemoveFromEventList+0x1a0>)
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4403      	add	r3, r0
 8002476:	6019      	str	r1, [r3, #0]
 8002478:	f000 f9ba 	bl	80027f0 <prvResetNextTaskUnblockTime>
 800247c:	e01b      	b.n	80024b6 <xTaskRemoveFromEventList+0x16e>
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <xTaskRemoveFromEventList+0x1a4>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	61da      	str	r2, [r3, #28]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	621a      	str	r2, [r3, #32]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	6a3a      	ldr	r2, [r7, #32]
 8002498:	3218      	adds	r2, #24
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	f103 0218 	add.w	r2, r3, #24
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	4a10      	ldr	r2, [pc, #64]	; (80024ec <xTaskRemoveFromEventList+0x1a4>)
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <xTaskRemoveFromEventList+0x1a4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <xTaskRemoveFromEventList+0x1a4>)
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <xTaskRemoveFromEventList+0x1a8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d905      	bls.n	80024d0 <xTaskRemoveFromEventList+0x188>
 80024c4:	2301      	movs	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <xTaskRemoveFromEventList+0x1ac>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	e001      	b.n	80024d4 <xTaskRemoveFromEventList+0x18c>
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	4618      	mov	r0, r3
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000198 	.word	0x20000198
 80024e4:	20000178 	.word	0x20000178
 80024e8:	2000009c 	.word	0x2000009c
 80024ec:	20000130 	.word	0x20000130
 80024f0:	20000098 	.word	0x20000098
 80024f4:	20000184 	.word	0x20000184

080024f8 <vTaskInternalSetTimeOutState>:
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <vTaskInternalSetTimeOutState+0x24>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <vTaskInternalSetTimeOutState+0x28>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	605a      	str	r2, [r3, #4]
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000188 	.word	0x20000188
 8002520:	20000174 	.word	0x20000174

08002524 <xTaskCheckForTimeOut>:
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <xTaskCheckForTimeOut+0x26>
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	bf00      	nop
 8002548:	e7fe      	b.n	8002548 <xTaskCheckForTimeOut+0x24>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <xTaskCheckForTimeOut+0x42>
 8002550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	bf00      	nop
 8002564:	e7fe      	b.n	8002564 <xTaskCheckForTimeOut+0x40>
 8002566:	f000 fe0b 	bl	8003180 <vPortEnterCritical>
 800256a:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <xTaskCheckForTimeOut+0xc4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002582:	d102      	bne.n	800258a <xTaskCheckForTimeOut+0x66>
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	e026      	b.n	80025d8 <xTaskCheckForTimeOut+0xb4>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b17      	ldr	r3, [pc, #92]	; (80025ec <xTaskCheckForTimeOut+0xc8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d00a      	beq.n	80025ac <xTaskCheckForTimeOut+0x88>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	429a      	cmp	r2, r3
 800259e:	d305      	bcc.n	80025ac <xTaskCheckForTimeOut+0x88>
 80025a0:	2301      	movs	r3, #1
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e015      	b.n	80025d8 <xTaskCheckForTimeOut+0xb4>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d20b      	bcs.n	80025ce <xTaskCheckForTimeOut+0xaa>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	1ad2      	subs	r2, r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ff98 	bl	80024f8 <vTaskInternalSetTimeOutState>
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	e004      	b.n	80025d8 <xTaskCheckForTimeOut+0xb4>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	2301      	movs	r3, #1
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	f000 fe02 	bl	80031e0 <vPortExitCritical>
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	4618      	mov	r0, r3
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000174 	.word	0x20000174
 80025ec:	20000188 	.word	0x20000188

080025f0 <vTaskMissedYield>:
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <vTaskMissedYield+0x14>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000184 	.word	0x20000184

08002608 <prvIdleTask>:
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	f000 f8b0 	bl	8002774 <prvCheckTasksWaitingTermination>
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <prvIdleTask+0x70>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d907      	bls.n	800262c <prvIdleTask+0x24>
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <prvIdleTask+0x74>)
 800261e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f7ff fb14 	bl	8001c58 <prvGetExpectedIdleTime>
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d9eb      	bls.n	8002610 <prvIdleTask+0x8>
 8002638:	f7ff fb00 	bl	8001c3c <vTaskSuspendAll>
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <prvIdleTask+0x78>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <prvIdleTask+0x7c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d20a      	bcs.n	800265e <prvIdleTask+0x56>
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <prvIdleTask+0x54>
 800265e:	f7ff fafb 	bl	8001c58 <prvGetExpectedIdleTime>
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d902      	bls.n	8002670 <prvIdleTask+0x68>
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fe26 	bl	80032bc <vPortSuppressTicksAndSleep>
 8002670:	f7ff fb28 	bl	8001cc4 <xTaskResumeAll>
 8002674:	e7cc      	b.n	8002610 <prvIdleTask+0x8>
 8002676:	bf00      	nop
 8002678:	2000009c 	.word	0x2000009c
 800267c:	e000ed04 	.word	0xe000ed04
 8002680:	20000190 	.word	0x20000190
 8002684:	20000174 	.word	0x20000174

08002688 <eTaskConfirmSleepModeStatus>:
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	2301      	movs	r3, #1
 8002690:	603b      	str	r3, [r7, #0]
 8002692:	2301      	movs	r3, #1
 8002694:	71fb      	strb	r3, [r7, #7]
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <eTaskConfirmSleepModeStatus+0x58>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <eTaskConfirmSleepModeStatus+0x1c>
 800269e:	2300      	movs	r3, #0
 80026a0:	71fb      	strb	r3, [r7, #7]
 80026a2:	e017      	b.n	80026d4 <eTaskConfirmSleepModeStatus+0x4c>
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <eTaskConfirmSleepModeStatus+0x5c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <eTaskConfirmSleepModeStatus+0x2a>
 80026ac:	2300      	movs	r3, #0
 80026ae:	71fb      	strb	r3, [r7, #7]
 80026b0:	e010      	b.n	80026d4 <eTaskConfirmSleepModeStatus+0x4c>
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <eTaskConfirmSleepModeStatus+0x60>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <eTaskConfirmSleepModeStatus+0x38>
 80026ba:	2300      	movs	r3, #0
 80026bc:	71fb      	strb	r3, [r7, #7]
 80026be:	e009      	b.n	80026d4 <eTaskConfirmSleepModeStatus+0x4c>
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <eTaskConfirmSleepModeStatus+0x64>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <eTaskConfirmSleepModeStatus+0x68>)
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	1acb      	subs	r3, r1, r3
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d101      	bne.n	80026d4 <eTaskConfirmSleepModeStatus+0x4c>
 80026d0:	2302      	movs	r3, #2
 80026d2:	71fb      	strb	r3, [r7, #7]
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20000130 	.word	0x20000130
 80026e4:	20000184 	.word	0x20000184
 80026e8:	20000180 	.word	0x20000180
 80026ec:	2000015c 	.word	0x2000015c
 80026f0:	20000170 	.word	0x20000170

080026f4 <prvInitialiseTaskLists>:
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	e00c      	b.n	800271a <prvInitialiseTaskLists+0x26>
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <prvInitialiseTaskLists+0x60>)
 800270c:	4413      	add	r3, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fbba 	bl	8002e88 <vListInitialise>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3301      	adds	r3, #1
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d9ef      	bls.n	8002700 <prvInitialiseTaskLists+0xc>
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <prvInitialiseTaskLists+0x64>)
 8002722:	f000 fbb1 	bl	8002e88 <vListInitialise>
 8002726:	480d      	ldr	r0, [pc, #52]	; (800275c <prvInitialiseTaskLists+0x68>)
 8002728:	f000 fbae 	bl	8002e88 <vListInitialise>
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <prvInitialiseTaskLists+0x6c>)
 800272e:	f000 fbab 	bl	8002e88 <vListInitialise>
 8002732:	480c      	ldr	r0, [pc, #48]	; (8002764 <prvInitialiseTaskLists+0x70>)
 8002734:	f000 fba8 	bl	8002e88 <vListInitialise>
 8002738:	480b      	ldr	r0, [pc, #44]	; (8002768 <prvInitialiseTaskLists+0x74>)
 800273a:	f000 fba5 	bl	8002e88 <vListInitialise>
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <prvInitialiseTaskLists+0x78>)
 8002740:	4a05      	ldr	r2, [pc, #20]	; (8002758 <prvInitialiseTaskLists+0x64>)
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <prvInitialiseTaskLists+0x7c>)
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <prvInitialiseTaskLists+0x68>)
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000009c 	.word	0x2000009c
 8002758:	20000100 	.word	0x20000100
 800275c:	20000114 	.word	0x20000114
 8002760:	20000130 	.word	0x20000130
 8002764:	20000144 	.word	0x20000144
 8002768:	2000015c 	.word	0x2000015c
 800276c:	20000128 	.word	0x20000128
 8002770:	2000012c 	.word	0x2000012c

08002774 <prvCheckTasksWaitingTermination>:
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	e019      	b.n	80027b0 <prvCheckTasksWaitingTermination+0x3c>
 800277c:	f000 fd00 	bl	8003180 <vPortEnterCritical>
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <prvCheckTasksWaitingTermination+0x50>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fbde 	bl	8002f4e <uxListRemove>
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <prvCheckTasksWaitingTermination+0x54>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3b01      	subs	r3, #1
 8002798:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <prvCheckTasksWaitingTermination+0x54>)
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <prvCheckTasksWaitingTermination+0x58>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <prvCheckTasksWaitingTermination+0x58>)
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	f000 fd1b 	bl	80031e0 <vPortExitCritical>
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f810 	bl	80027d0 <prvDeleteTCB>
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <prvCheckTasksWaitingTermination+0x58>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e1      	bne.n	800277c <prvCheckTasksWaitingTermination+0x8>
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000144 	.word	0x20000144
 80027c8:	20000170 	.word	0x20000170
 80027cc:	20000158 	.word	0x20000158

080027d0 <prvDeleteTCB>:
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fb41 	bl	8002e64 <vPortFree>
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fb3e 	bl	8002e64 <vPortFree>
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <prvResetNextTaskUnblockTime>:
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <prvResetNextTaskUnblockTime+0x2c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <prvResetNextTaskUnblockTime+0x18>
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <prvResetNextTaskUnblockTime+0x30>)
 8002800:	f04f 32ff 	mov.w	r2, #4294967295
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e005      	b.n	8002814 <prvResetNextTaskUnblockTime+0x24>
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <prvResetNextTaskUnblockTime+0x2c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <prvResetNextTaskUnblockTime+0x30>)
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000128 	.word	0x20000128
 8002820:	20000190 	.word	0x20000190

08002824 <xTaskGetSchedulerState>:
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <xTaskGetSchedulerState+0x34>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <xTaskGetSchedulerState+0x14>
 8002832:	2301      	movs	r3, #1
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	e008      	b.n	800284a <xTaskGetSchedulerState+0x26>
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <xTaskGetSchedulerState+0x38>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <xTaskGetSchedulerState+0x22>
 8002840:	2302      	movs	r3, #2
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	e001      	b.n	800284a <xTaskGetSchedulerState+0x26>
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	2000017c 	.word	0x2000017c
 800285c:	20000198 	.word	0x20000198

08002860 <prvAddCurrentTaskToDelayedList>:
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <prvAddCurrentTaskToDelayedList+0xc4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3304      	adds	r3, #4
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fb69 	bl	8002f4e <uxListRemove>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002882:	d124      	bne.n	80028ce <prvAddCurrentTaskToDelayedList+0x6e>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d021      	beq.n	80028ce <prvAddCurrentTaskToDelayedList+0x6e>
 800288a:	4b28      	ldr	r3, [pc, #160]	; (800292c <prvAddCurrentTaskToDelayedList+0xcc>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	4b23      	ldr	r3, [pc, #140]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	6892      	ldr	r2, [r2, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	3204      	adds	r2, #4
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	1d1a      	adds	r2, r3, #4
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1b      	ldr	r2, [pc, #108]	; (800292c <prvAddCurrentTaskToDelayedList+0xcc>)
 80028be:	615a      	str	r2, [r3, #20]
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <prvAddCurrentTaskToDelayedList+0xcc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	4a19      	ldr	r2, [pc, #100]	; (800292c <prvAddCurrentTaskToDelayedList+0xcc>)
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	bf00      	nop
 80028cc:	e026      	b.n	800291c <prvAddCurrentTaskToDelayedList+0xbc>
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d209      	bcs.n	80028fa <prvAddCurrentTaskToDelayedList+0x9a>
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <prvAddCurrentTaskToDelayedList+0xd0>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f000 faf3 	bl	8002ede <vListInsert>
 80028f8:	e010      	b.n	800291c <prvAddCurrentTaskToDelayedList+0xbc>
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <prvAddCurrentTaskToDelayedList+0xd4>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3304      	adds	r3, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f000 fae9 	bl	8002ede <vListInsert>
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <prvAddCurrentTaskToDelayedList+0xd8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	429a      	cmp	r2, r3
 8002914:	d202      	bcs.n	800291c <prvAddCurrentTaskToDelayedList+0xbc>
 8002916:	4a08      	ldr	r2, [pc, #32]	; (8002938 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	bf00      	nop
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000174 	.word	0x20000174
 8002928:	20000098 	.word	0x20000098
 800292c:	2000015c 	.word	0x2000015c
 8002930:	2000012c 	.word	0x2000012c
 8002934:	20000128 	.word	0x20000128
 8002938:	20000190 	.word	0x20000190

0800293c <xTimerCreateTimerTask>:
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af02      	add	r7, sp, #8
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	f000 fa45 	bl	8002dd4 <prvCheckForValidListAndQueue>
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <xTimerCreateTimerTask+0x54>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <xTimerCreateTimerTask+0x2c>
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <xTimerCreateTimerTask+0x58>)
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	2303      	movs	r3, #3
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2300      	movs	r3, #0
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	490e      	ldr	r1, [pc, #56]	; (8002998 <xTimerCreateTimerTask+0x5c>)
 8002960:	480e      	ldr	r0, [pc, #56]	; (800299c <xTimerCreateTimerTask+0x60>)
 8002962:	f7fe ff79 	bl	8001858 <xTaskCreate>
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10a      	bne.n	8002984 <xTimerCreateTimerTask+0x48>
 800296e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002972:	f383 8811 	msr	BASEPRI, r3
 8002976:	f3bf 8f6f 	isb	sy
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	bf00      	nop
 8002982:	e7fe      	b.n	8002982 <xTimerCreateTimerTask+0x46>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200001cc 	.word	0x200001cc
 8002994:	200001d0 	.word	0x200001d0
 8002998:	08003d08 	.word	0x08003d08
 800299c:	08002a45 	.word	0x08002a45

080029a0 <prvReloadTimer>:
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	e008      	b.n	80029c0 <prvReloadTimer+0x20>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4413      	add	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	4798      	blx	r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	699a      	ldr	r2, [r3, #24]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	18d1      	adds	r1, r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f8db 	bl	8002b88 <prvInsertTimerInActiveList>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ea      	bne.n	80029ae <prvReloadTimer+0xe>
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <prvProcessExpiredTimer>:
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <prvProcessExpiredTimer+0x5c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3304      	adds	r3, #4
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 faa6 	bl	8002f4e <uxListRemove>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <prvProcessExpiredTimer+0x38>
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f7ff ffc3 	bl	80029a0 <prvReloadTimer>
 8002a1a:	e008      	b.n	8002a2e <prvProcessExpiredTimer+0x4a>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	4798      	blx	r3
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200001c4 	.word	0x200001c4

08002a44 <prvTimerTask>:
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	f107 0308 	add.w	r3, r7, #8
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 f857 	bl	8002b04 <prvGetNextExpireTime>
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f803 	bl	8002a68 <prvProcessTimerOrBlockTask>
 8002a62:	f000 f8d3 	bl	8002c0c <prvProcessReceivedCommands>
 8002a66:	e7f1      	b.n	8002a4c <prvTimerTask+0x8>

08002a68 <prvProcessTimerOrBlockTask>:
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	f7ff f8e3 	bl	8001c3c <vTaskSuspendAll>
 8002a76:	f107 0308 	add.w	r3, r7, #8
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f864 	bl	8002b48 <prvSampleTimeNow>
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d130      	bne.n	8002aea <prvProcessTimerOrBlockTask+0x82>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10a      	bne.n	8002aa4 <prvProcessTimerOrBlockTask+0x3c>
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d806      	bhi.n	8002aa4 <prvProcessTimerOrBlockTask+0x3c>
 8002a96:	f7ff f915 	bl	8001cc4 <xTaskResumeAll>
 8002a9a:	68f9      	ldr	r1, [r7, #12]
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ffa1 	bl	80029e4 <prvProcessExpiredTimer>
 8002aa2:	e024      	b.n	8002aee <prvProcessTimerOrBlockTask+0x86>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <prvProcessTimerOrBlockTask+0x54>
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <prvProcessTimerOrBlockTask+0x90>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <prvProcessTimerOrBlockTask+0x50>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <prvProcessTimerOrBlockTask+0x52>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <prvProcessTimerOrBlockTask+0x94>)
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f000 ffbb 	bl	8003a44 <vQueueWaitForMessageRestricted>
 8002ace:	f7ff f8f9 	bl	8001cc4 <xTaskResumeAll>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <prvProcessTimerOrBlockTask+0x86>
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <prvProcessTimerOrBlockTask+0x98>)
 8002ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	e001      	b.n	8002aee <prvProcessTimerOrBlockTask+0x86>
 8002aea:	f7ff f8eb 	bl	8001cc4 <xTaskResumeAll>
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200001c8 	.word	0x200001c8
 8002afc:	200001cc 	.word	0x200001cc
 8002b00:	e000ed04 	.word	0xe000ed04

08002b04 <prvGetNextExpireTime>:
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <prvGetNextExpireTime+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <prvGetNextExpireTime+0x16>
 8002b16:	2201      	movs	r2, #1
 8002b18:	e000      	b.n	8002b1c <prvGetNextExpireTime+0x18>
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <prvGetNextExpireTime+0x30>
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <prvGetNextExpireTime+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e001      	b.n	8002b38 <prvGetNextExpireTime+0x34>
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	200001c4 	.word	0x200001c4

08002b48 <prvSampleTimeNow>:
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	f7ff f9b4 	bl	8001ebc <xTaskGetTickCount>
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <prvSampleTimeNow+0x3c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d205      	bcs.n	8002b6c <prvSampleTimeNow+0x24>
 8002b60:	f000 f912 	bl	8002d88 <prvSwitchTimerLists>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e002      	b.n	8002b72 <prvSampleTimeNow+0x2a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	4a04      	ldr	r2, [pc, #16]	; (8002b84 <prvSampleTimeNow+0x3c>)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200001d4 	.word	0x200001d4

08002b88 <prvInsertTimerInActiveList>:
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	611a      	str	r2, [r3, #16]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d812      	bhi.n	8002bd4 <prvInsertTimerInActiveList+0x4c>
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	1ad2      	subs	r2, r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d302      	bcc.n	8002bc2 <prvInsertTimerInActiveList+0x3a>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e01b      	b.n	8002bfa <prvInsertTimerInActiveList+0x72>
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <prvInsertTimerInActiveList+0x7c>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4610      	mov	r0, r2
 8002bce:	f000 f986 	bl	8002ede <vListInsert>
 8002bd2:	e012      	b.n	8002bfa <prvInsertTimerInActiveList+0x72>
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d206      	bcs.n	8002bea <prvInsertTimerInActiveList+0x62>
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d302      	bcc.n	8002bea <prvInsertTimerInActiveList+0x62>
 8002be4:	2301      	movs	r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e007      	b.n	8002bfa <prvInsertTimerInActiveList+0x72>
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <prvInsertTimerInActiveList+0x80>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f000 f972 	bl	8002ede <vListInsert>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200001c8 	.word	0x200001c8
 8002c08:	200001c4 	.word	0x200001c4

08002c0c <prvProcessReceivedCommands>:
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	e0a6      	b.n	8002d62 <prvProcessReceivedCommands+0x156>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f2c0 80a2 	blt.w	8002d60 <prvProcessReceivedCommands+0x154>
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d004      	beq.n	8002c32 <prvProcessReceivedCommands+0x26>
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f98e 	bl	8002f4e <uxListRemove>
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff87 	bl	8002b48 <prvSampleTimeNow>
 8002c3a:	61b8      	str	r0, [r7, #24]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	f200 808e 	bhi.w	8002d62 <prvProcessReceivedCommands+0x156>
 8002c46:	a201      	add	r2, pc, #4	; (adr r2, 8002c4c <prvProcessReceivedCommands+0x40>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002c71 	.word	0x08002c71
 8002c50:	08002c71 	.word	0x08002c71
 8002c54:	08002cd9 	.word	0x08002cd9
 8002c58:	08002ced 	.word	0x08002ced
 8002c5c:	08002d37 	.word	0x08002d37
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c71 	.word	0x08002c71
 8002c68:	08002cd9 	.word	0x08002cd9
 8002c6c:	08002ced 	.word	0x08002ced
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	18d1      	adds	r1, r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	69f8      	ldr	r0, [r7, #28]
 8002c90:	f7ff ff7a 	bl	8002b88 <prvInsertTimerInActiveList>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d063      	beq.n	8002d62 <prvProcessReceivedCommands+0x156>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <prvProcessReceivedCommands+0xb0>
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	4413      	add	r3, r2
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	69f8      	ldr	r0, [r7, #28]
 8002cb6:	f7ff fe73 	bl	80029a0 <prvReloadTimer>
 8002cba:	e008      	b.n	8002cce <prvProcessReceivedCommands+0xc2>
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	69f8      	ldr	r0, [r7, #28]
 8002cd4:	4798      	blx	r3
 8002cd6:	e044      	b.n	8002d62 <prvProcessReceivedCommands+0x156>
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cea:	e03a      	b.n	8002d62 <prvProcessReceivedCommands+0x156>
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	619a      	str	r2, [r3, #24]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <prvProcessReceivedCommands+0x116>
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	bf00      	nop
 8002d20:	e7fe      	b.n	8002d20 <prvProcessReceivedCommands+0x114>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	18d1      	adds	r1, r2, r3
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	69f8      	ldr	r0, [r7, #28]
 8002d30:	f7ff ff2a 	bl	8002b88 <prvInsertTimerInActiveList>
 8002d34:	e015      	b.n	8002d62 <prvProcessReceivedCommands+0x156>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <prvProcessReceivedCommands+0x140>
 8002d44:	69f8      	ldr	r0, [r7, #28]
 8002d46:	f000 f88d 	bl	8002e64 <vPortFree>
 8002d4a:	e00a      	b.n	8002d62 <prvProcessReceivedCommands+0x156>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002d5e:	e000      	b.n	8002d62 <prvProcessReceivedCommands+0x156>
 8002d60:	bf00      	nop
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <prvProcessReceivedCommands+0x178>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f107 0108 	add.w	r1, r7, #8
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fcad 	bl	80036cc <xQueueReceive>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f47f af4d 	bne.w	8002c14 <prvProcessReceivedCommands+0x8>
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	3720      	adds	r7, #32
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200001cc 	.word	0x200001cc

08002d88 <prvSwitchTimerLists>:
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	e009      	b.n	8002da4 <prvSwitchTimerLists+0x1c>
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <prvSwitchTimerLists+0x44>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9e:	6838      	ldr	r0, [r7, #0]
 8002da0:	f7ff fe20 	bl	80029e4 <prvProcessExpiredTimer>
 8002da4:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <prvSwitchTimerLists+0x44>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <prvSwitchTimerLists+0x8>
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <prvSwitchTimerLists+0x44>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <prvSwitchTimerLists+0x48>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <prvSwitchTimerLists+0x44>)
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <prvSwitchTimerLists+0x48>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200001c4 	.word	0x200001c4
 8002dd0:	200001c8 	.word	0x200001c8

08002dd4 <prvCheckForValidListAndQueue>:
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	f000 f9d2 	bl	8003180 <vPortEnterCritical>
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <prvCheckForValidListAndQueue+0x54>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d11d      	bne.n	8002e20 <prvCheckForValidListAndQueue+0x4c>
 8002de4:	4811      	ldr	r0, [pc, #68]	; (8002e2c <prvCheckForValidListAndQueue+0x58>)
 8002de6:	f000 f84f 	bl	8002e88 <vListInitialise>
 8002dea:	4811      	ldr	r0, [pc, #68]	; (8002e30 <prvCheckForValidListAndQueue+0x5c>)
 8002dec:	f000 f84c 	bl	8002e88 <vListInitialise>
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <prvCheckForValidListAndQueue+0x60>)
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <prvCheckForValidListAndQueue+0x58>)
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <prvCheckForValidListAndQueue+0x64>)
 8002df8:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <prvCheckForValidListAndQueue+0x5c>)
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	210c      	movs	r1, #12
 8002e00:	200a      	movs	r0, #10
 8002e02:	f000 fbf1 	bl	80035e8 <xQueueGenericCreate>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <prvCheckForValidListAndQueue+0x54>)
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <prvCheckForValidListAndQueue+0x54>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <prvCheckForValidListAndQueue+0x4c>
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <prvCheckForValidListAndQueue+0x54>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4908      	ldr	r1, [pc, #32]	; (8002e3c <prvCheckForValidListAndQueue+0x68>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fdc4 	bl	80039a8 <vQueueAddToRegistry>
 8002e20:	f000 f9de 	bl	80031e0 <vPortExitCritical>
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	200001cc 	.word	0x200001cc
 8002e2c:	2000019c 	.word	0x2000019c
 8002e30:	200001b0 	.word	0x200001b0
 8002e34:	200001c4 	.word	0x200001c4
 8002e38:	200001c8 	.word	0x200001c8
 8002e3c:	08003d10 	.word	0x08003d10

08002e40 <pvPortMalloc>:
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	f7fe fef8 	bl	8001c3c <vTaskSuspendAll>
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fe57 	bl	8003b00 <malloc>
 8002e52:	4603      	mov	r3, r0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	f7fe ff35 	bl	8001cc4 <xTaskResumeAll>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <vPortFree>:
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <vPortFree+0x1c>
 8002e72:	f7fe fee3 	bl	8001c3c <vTaskSuspendAll>
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fe4a 	bl	8003b10 <free>
 8002e7c:	f7fe ff22 	bl	8001cc4 <xTaskResumeAll>
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <vListInitialise>:
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f103 0208 	add.w	r2, r3, #8
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f103 0208 	add.w	r2, r3, #8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f103 0208 	add.w	r2, r3, #8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <vListInitialiseItem>:
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <vListInsert>:
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d103      	bne.n	8002efe <vListInsert+0x20>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	e00c      	b.n	8002f18 <vListInsert+0x3a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3308      	adds	r3, #8
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e002      	b.n	8002f0c <vListInsert+0x2e>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d2f6      	bcs.n	8002f06 <vListInsert+0x28>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	605a      	str	r2, [r3, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	611a      	str	r2, [r3, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <uxListRemove>:
 8002f4e:	b480      	push	{r7}
 8002f50:	b085      	sub	sp, #20
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6892      	ldr	r2, [r2, #8]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6852      	ldr	r2, [r2, #4]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d103      	bne.n	8002f82 <uxListRemove+0x34>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	611a      	str	r2, [r3, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1e5a      	subs	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <pxPortInitialiseStack>:
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3b04      	subs	r3, #4
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3b04      	subs	r3, #4
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 0201 	bic.w	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3b04      	subs	r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	4a08      	ldr	r2, [pc, #32]	; (8002ff4 <pxPortInitialiseStack+0x54>)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3b14      	subs	r3, #20
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3b20      	subs	r3, #32
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	08002ff9 	.word	0x08002ff9

08002ff8 <prvTaskExitError>:
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <prvTaskExitError+0x54>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d00a      	beq.n	8003022 <prvTaskExitError+0x2a>
 800300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	bf00      	nop
 8003020:	e7fe      	b.n	8003020 <prvTaskExitError+0x28>
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0fc      	beq.n	8003038 <prvTaskExitError+0x40>
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000010 	.word	0x20000010

08003050 <SVC_Handler>:
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <pxCurrentTCBConst2>)
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	6808      	ldr	r0, [r1, #0]
 8003056:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800305a:	f380 8809 	msr	PSP, r0
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f380 8811 	msr	BASEPRI, r0
 800306a:	f04e 0e0d 	orr.w	lr, lr, #13
 800306e:	4770      	bx	lr

08003070 <pxCurrentTCBConst2>:
 8003070:	20000098 	.word	0x20000098
 8003074:	bf00      	nop
 8003076:	bf00      	nop

08003078 <prvPortStartFirstTask>:
 8003078:	4806      	ldr	r0, [pc, #24]	; (8003094 <prvPortStartFirstTask+0x1c>)
 800307a:	6800      	ldr	r0, [r0, #0]
 800307c:	6800      	ldr	r0, [r0, #0]
 800307e:	f380 8808 	msr	MSP, r0
 8003082:	b662      	cpsie	i
 8003084:	b661      	cpsie	f
 8003086:	f3bf 8f4f 	dsb	sy
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	df00      	svc	0
 8003090:	bf00      	nop
 8003092:	0000      	.short	0x0000
 8003094:	e000ed08 	.word	0xe000ed08
 8003098:	bf00      	nop
 800309a:	bf00      	nop

0800309c <xPortStartScheduler>:
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4b32      	ldr	r3, [pc, #200]	; (800316c <xPortStartScheduler+0xd0>)
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	22ff      	movs	r2, #255	; 0xff
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	70fb      	strb	r3, [r7, #3]
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <xPortStartScheduler+0xd4>)
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <xPortStartScheduler+0xd8>)
 80030cc:	2207      	movs	r2, #7
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e009      	b.n	80030e6 <xPortStartScheduler+0x4a>
 80030d2:	4b28      	ldr	r3, [pc, #160]	; (8003174 <xPortStartScheduler+0xd8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	4a26      	ldr	r2, [pc, #152]	; (8003174 <xPortStartScheduler+0xd8>)
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	70fb      	strb	r3, [r7, #3]
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ee:	2b80      	cmp	r3, #128	; 0x80
 80030f0:	d0ef      	beq.n	80030d2 <xPortStartScheduler+0x36>
 80030f2:	4b20      	ldr	r3, [pc, #128]	; (8003174 <xPortStartScheduler+0xd8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1c3 0307 	rsb	r3, r3, #7
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d00a      	beq.n	8003114 <xPortStartScheduler+0x78>
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	bf00      	nop
 8003112:	e7fe      	b.n	8003112 <xPortStartScheduler+0x76>
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <xPortStartScheduler+0xd8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	021b      	lsls	r3, r3, #8
 800311a:	4a16      	ldr	r2, [pc, #88]	; (8003174 <xPortStartScheduler+0xd8>)
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <xPortStartScheduler+0xd8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003126:	4a13      	ldr	r2, [pc, #76]	; (8003174 <xPortStartScheduler+0xd8>)
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	4b11      	ldr	r3, [pc, #68]	; (8003178 <xPortStartScheduler+0xdc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a10      	ldr	r2, [pc, #64]	; (8003178 <xPortStartScheduler+0xdc>)
 8003138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <xPortStartScheduler+0xdc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <xPortStartScheduler+0xdc>)
 8003144:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	f000 f981 	bl	8003450 <vPortSetupTimerInterrupt>
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <xPortStartScheduler+0xe0>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f7ff ff90 	bl	8003078 <prvPortStartFirstTask>
 8003158:	f7ff f830 	bl	80021bc <vTaskSwitchContext>
 800315c:	f7ff ff4c 	bl	8002ff8 <prvTaskExitError>
 8003160:	2300      	movs	r3, #0
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	e000e400 	.word	0xe000e400
 8003170:	200001e4 	.word	0x200001e4
 8003174:	200001e8 	.word	0x200001e8
 8003178:	e000ed20 	.word	0xe000ed20
 800317c:	20000010 	.word	0x20000010

08003180 <vPortEnterCritical>:
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	bf00      	nop
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <vPortEnterCritical+0x58>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <vPortEnterCritical+0x58>)
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <vPortEnterCritical+0x58>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d10f      	bne.n	80031cc <vPortEnterCritical+0x4c>
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <vPortEnterCritical+0x5c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <vPortEnterCritical+0x4c>
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	bf00      	nop
 80031ca:	e7fe      	b.n	80031ca <vPortEnterCritical+0x4a>
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000010 	.word	0x20000010
 80031dc:	e000ed04 	.word	0xe000ed04

080031e0 <vPortExitCritical>:
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <vPortExitCritical+0x4c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10a      	bne.n	8003204 <vPortExitCritical+0x24>
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	607b      	str	r3, [r7, #4]
 8003200:	bf00      	nop
 8003202:	e7fe      	b.n	8003202 <vPortExitCritical+0x22>
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <vPortExitCritical+0x4c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3b01      	subs	r3, #1
 800320a:	4a08      	ldr	r2, [pc, #32]	; (800322c <vPortExitCritical+0x4c>)
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <vPortExitCritical+0x4c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d105      	bne.n	8003222 <vPortExitCritical+0x42>
 8003216:	2300      	movs	r3, #0
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	20000010 	.word	0x20000010

08003230 <PendSV_Handler>:
 8003230:	f3ef 8009 	mrs	r0, PSP
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <pxCurrentTCBConst>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003240:	6010      	str	r0, [r2, #0]
 8003242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800324a:	f380 8811 	msr	BASEPRI, r0
 800324e:	f7fe ffb5 	bl	80021bc <vTaskSwitchContext>
 8003252:	f04f 0000 	mov.w	r0, #0
 8003256:	f380 8811 	msr	BASEPRI, r0
 800325a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	6808      	ldr	r0, [r1, #0]
 8003262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003266:	f380 8809 	msr	PSP, r0
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	4770      	bx	lr

08003270 <pxCurrentTCBConst>:
 8003270:	20000098 	.word	0x20000098
 8003274:	bf00      	nop
 8003276:	bf00      	nop

08003278 <SysTick_Handler>:
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	bf00      	nop
 8003292:	f7fe fe7b 	bl	8001f8c <xTaskIncrementTick>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <SysTick_Handler+0x2c>
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <SysTick_Handler+0x40>)
 800329e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	2300      	movs	r3, #0
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	e000ed04 	.word	0xe000ed04

080032bc <vPortSuppressTicksAndSleep>:
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	4b5b      	ldr	r3, [pc, #364]	; (8003434 <vPortSuppressTicksAndSleep+0x178>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d902      	bls.n	80032d4 <vPortSuppressTicksAndSleep+0x18>
 80032ce:	4b59      	ldr	r3, [pc, #356]	; (8003434 <vPortSuppressTicksAndSleep+0x178>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	b672      	cpsid	i
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f7ff f9d3 	bl	8002688 <eTaskConfirmSleepModeStatus>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <vPortSuppressTicksAndSleep+0x30>
 80032e8:	b662      	cpsie	i
 80032ea:	e09e      	b.n	800342a <vPortSuppressTicksAndSleep+0x16e>
 80032ec:	4b52      	ldr	r3, [pc, #328]	; (8003438 <vPortSuppressTicksAndSleep+0x17c>)
 80032ee:	2206      	movs	r2, #6
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	4b52      	ldr	r3, [pc, #328]	; (800343c <vPortSuppressTicksAndSleep+0x180>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <vPortSuppressTicksAndSleep+0x48>
 80032fe:	4b50      	ldr	r3, [pc, #320]	; (8003440 <vPortSuppressTicksAndSleep+0x184>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	4a4d      	ldr	r2, [pc, #308]	; (8003440 <vPortSuppressTicksAndSleep+0x184>)
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	fb02 f303 	mul.w	r3, r2, r3
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4413      	add	r3, r2
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <vPortSuppressTicksAndSleep+0x188>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <vPortSuppressTicksAndSleep+0x78>
 8003322:	4b48      	ldr	r3, [pc, #288]	; (8003444 <vPortSuppressTicksAndSleep+0x188>)
 8003324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	4b45      	ldr	r3, [pc, #276]	; (8003440 <vPortSuppressTicksAndSleep+0x184>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	4b44      	ldr	r3, [pc, #272]	; (8003448 <vPortSuppressTicksAndSleep+0x18c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69fa      	ldr	r2, [r7, #28]
 800333a:	429a      	cmp	r2, r3
 800333c:	d904      	bls.n	8003348 <vPortSuppressTicksAndSleep+0x8c>
 800333e:	4b42      	ldr	r3, [pc, #264]	; (8003448 <vPortSuppressTicksAndSleep+0x18c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	4a40      	ldr	r2, [pc, #256]	; (800344c <vPortSuppressTicksAndSleep+0x190>)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b3b      	ldr	r3, [pc, #236]	; (800343c <vPortSuppressTicksAndSleep+0x180>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	4b38      	ldr	r3, [pc, #224]	; (8003438 <vPortSuppressTicksAndSleep+0x17c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a37      	ldr	r2, [pc, #220]	; (8003438 <vPortSuppressTicksAndSleep+0x17c>)
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <vPortSuppressTicksAndSleep+0xb8>
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	bf30      	wfi
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	b662      	cpsie	i
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	b672      	cpsid	i
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <vPortSuppressTicksAndSleep+0x17c>)
 800338a:	2206      	movs	r2, #6
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <vPortSuppressTicksAndSleep+0x17c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01d      	beq.n	80033d6 <vPortSuppressTicksAndSleep+0x11a>
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <vPortSuppressTicksAndSleep+0x184>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b27      	ldr	r3, [pc, #156]	; (800343c <vPortSuppressTicksAndSleep+0x180>)
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	1acb      	subs	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3b01      	subs	r3, #1
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	4b26      	ldr	r3, [pc, #152]	; (8003448 <vPortSuppressTicksAndSleep+0x18c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d904      	bls.n	80033c0 <vPortSuppressTicksAndSleep+0x104>
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <vPortSuppressTicksAndSleep+0x184>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d903      	bls.n	80033c8 <vPortSuppressTicksAndSleep+0x10c>
 80033c0:	4b1f      	ldr	r3, [pc, #124]	; (8003440 <vPortSuppressTicksAndSleep+0x184>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	4a20      	ldr	r2, [pc, #128]	; (800344c <vPortSuppressTicksAndSleep+0x190>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	e01a      	b.n	800340c <vPortSuppressTicksAndSleep+0x150>
 80033d6:	4b19      	ldr	r3, [pc, #100]	; (800343c <vPortSuppressTicksAndSleep+0x180>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	4b18      	ldr	r3, [pc, #96]	; (8003440 <vPortSuppressTicksAndSleep+0x184>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	fb02 f203 	mul.w	r2, r2, r3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <vPortSuppressTicksAndSleep+0x184>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a10      	ldr	r2, [pc, #64]	; (8003440 <vPortSuppressTicksAndSleep+0x184>)
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	fb02 f203 	mul.w	r2, r2, r3
 8003404:	4911      	ldr	r1, [pc, #68]	; (800344c <vPortSuppressTicksAndSleep+0x190>)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	600b      	str	r3, [r1, #0]
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <vPortSuppressTicksAndSleep+0x180>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <vPortSuppressTicksAndSleep+0x17c>)
 8003414:	2207      	movs	r2, #7
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	4b09      	ldr	r3, [pc, #36]	; (8003440 <vPortSuppressTicksAndSleep+0x184>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0b      	ldr	r2, [pc, #44]	; (800344c <vPortSuppressTicksAndSleep+0x190>)
 800341e:	3b01      	subs	r3, #1
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	69b8      	ldr	r0, [r7, #24]
 8003424:	f7fe fd58 	bl	8001ed8 <vTaskStepTick>
 8003428:	b662      	cpsie	i
 800342a:	bf00      	nop
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200001dc 	.word	0x200001dc
 8003438:	e000e010 	.word	0xe000e010
 800343c:	e000e018 	.word	0xe000e018
 8003440:	200001d8 	.word	0x200001d8
 8003444:	e000ed04 	.word	0xe000ed04
 8003448:	200001e0 	.word	0x200001e0
 800344c:	e000e014 	.word	0xe000e014

08003450 <vPortSetupTimerInterrupt>:
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
 8003454:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <vPortSetupTimerInterrupt+0x58>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <vPortSetupTimerInterrupt+0x5c>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <vPortSetupTimerInterrupt+0x60>)
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <vPortSetupTimerInterrupt+0x60>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	4a10      	ldr	r2, [pc, #64]	; (80034b4 <vPortSetupTimerInterrupt+0x64>)
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <vPortSetupTimerInterrupt+0x68>)
 8003476:	225e      	movs	r2, #94	; 0x5e
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <vPortSetupTimerInterrupt+0x6c>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <vPortSetupTimerInterrupt+0x70>)
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <vPortSetupTimerInterrupt+0x58>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a08      	ldr	r2, [pc, #32]	; (80034ac <vPortSetupTimerInterrupt+0x5c>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <vPortSetupTimerInterrupt+0x74>)
 8003494:	3b01      	subs	r3, #1
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <vPortSetupTimerInterrupt+0x6c>)
 800349a:	2207      	movs	r2, #7
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	bf00      	nop
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000000 	.word	0x20000000
 80034ac:	10624dd3 	.word	0x10624dd3
 80034b0:	200001d8 	.word	0x200001d8
 80034b4:	200001dc 	.word	0x200001dc
 80034b8:	200001e0 	.word	0x200001e0
 80034bc:	e000e010 	.word	0xe000e010
 80034c0:	e000e018 	.word	0xe000e018
 80034c4:	e000e014 	.word	0xe000e014

080034c8 <xQueueGenericReset>:
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
 80034d2:	2301      	movs	r3, #1
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <xQueueGenericReset+0x2e>
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	bf00      	nop
 80034f4:	e7fe      	b.n	80034f4 <xQueueGenericReset+0x2c>
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d05d      	beq.n	80035b8 <xQueueGenericReset+0xf0>
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d059      	beq.n	80035b8 <xQueueGenericReset+0xf0>
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	2100      	movs	r1, #0
 800350e:	fba3 2302 	umull	r2, r3, r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d000      	beq.n	8003518 <xQueueGenericReset+0x50>
 8003516:	2101      	movs	r1, #1
 8003518:	460b      	mov	r3, r1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d14c      	bne.n	80035b8 <xQueueGenericReset+0xf0>
 800351e:	f7ff fe2f 	bl	8003180 <vPortEnterCritical>
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	6939      	ldr	r1, [r7, #16]
 800352c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	441a      	add	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2200      	movs	r2, #0
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354e:	3b01      	subs	r3, #1
 8003550:	6939      	ldr	r1, [r7, #16]
 8003552:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	441a      	add	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	22ff      	movs	r2, #255	; 0xff
 8003562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	22ff      	movs	r2, #255	; 0xff
 800356a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d114      	bne.n	800359e <xQueueGenericReset+0xd6>
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01a      	beq.n	80035b2 <xQueueGenericReset+0xea>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	3310      	adds	r3, #16
 8003580:	4618      	mov	r0, r3
 8003582:	f7fe fee1 	bl	8002348 <xTaskRemoveFromEventList>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d012      	beq.n	80035b2 <xQueueGenericReset+0xea>
 800358c:	4b15      	ldr	r3, [pc, #84]	; (80035e4 <xQueueGenericReset+0x11c>)
 800358e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	e009      	b.n	80035b2 <xQueueGenericReset+0xea>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3310      	adds	r3, #16
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fc70 	bl	8002e88 <vListInitialise>
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	3324      	adds	r3, #36	; 0x24
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fc6b 	bl	8002e88 <vListInitialise>
 80035b2:	f7ff fe15 	bl	80031e0 <vPortExitCritical>
 80035b6:	e001      	b.n	80035bc <xQueueGenericReset+0xf4>
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10a      	bne.n	80035d8 <xQueueGenericReset+0x110>
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	bf00      	nop
 80035d6:	e7fe      	b.n	80035d6 <xQueueGenericReset+0x10e>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <xQueueGenericCreate>:
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	71fb      	strb	r3, [r7, #7]
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d02e      	beq.n	800365e <xQueueGenericCreate+0x76>
 8003600:	2100      	movs	r1, #0
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	fba3 2302 	umull	r2, r3, r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d000      	beq.n	8003610 <xQueueGenericCreate+0x28>
 800360e:	2101      	movs	r1, #1
 8003610:	460b      	mov	r3, r1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d123      	bne.n	800365e <xQueueGenericCreate+0x76>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003622:	d81c      	bhi.n	800365e <xQueueGenericCreate+0x76>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	3350      	adds	r3, #80	; 0x50
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fc04 	bl	8002e40 <pvPortMalloc>
 8003638:	61f8      	str	r0, [r7, #28]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01c      	beq.n	800367a <xQueueGenericCreate+0x92>
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3350      	adds	r3, #80	; 0x50
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	79fa      	ldrb	r2, [r7, #7]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f814 	bl	8003684 <prvInitialiseNewQueue>
 800365c:	e00d      	b.n	800367a <xQueueGenericCreate+0x92>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <xQueueGenericCreate+0x92>
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xQueueGenericCreate+0x90>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	4618      	mov	r0, r3
 800367e:	3720      	adds	r7, #32
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <prvInitialiseNewQueue>:
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	70fb      	strb	r3, [r7, #3]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <prvInitialiseNewQueue+0x1c>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	e002      	b.n	80036a6 <prvInitialiseNewQueue+0x22>
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
 80036b2:	2101      	movs	r1, #1
 80036b4:	69b8      	ldr	r0, [r7, #24]
 80036b6:	f7ff ff07 	bl	80034c8 <xQueueGenericReset>
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <xQueueReceive>:
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	; 0x30
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	2300      	movs	r3, #0
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <xQueueReceive+0x30>
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	623b      	str	r3, [r7, #32]
 80036f8:	bf00      	nop
 80036fa:	e7fe      	b.n	80036fa <xQueueReceive+0x2e>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <xQueueReceive+0x3e>
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <xQueueReceive+0x42>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <xQueueReceive+0x44>
 800370e:	2300      	movs	r3, #0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <xQueueReceive+0x5e>
 8003714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	bf00      	nop
 8003728:	e7fe      	b.n	8003728 <xQueueReceive+0x5c>
 800372a:	f7ff f87b 	bl	8002824 <xTaskGetSchedulerState>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d102      	bne.n	800373a <xQueueReceive+0x6e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <xQueueReceive+0x72>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <xQueueReceive+0x74>
 800373e:	2300      	movs	r3, #0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <xQueueReceive+0x8e>
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <xQueueReceive+0x8c>
 800375a:	f7ff fd11 	bl	8003180 <vPortEnterCritical>
 800375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	d01f      	beq.n	80037aa <xQueueReceive+0xde>
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800376e:	f000 f88d 	bl	800388c <prvCopyDataFromQueue>
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	1e5a      	subs	r2, r3, #1
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	639a      	str	r2, [r3, #56]	; 0x38
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00f      	beq.n	80037a2 <xQueueReceive+0xd6>
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	3310      	adds	r3, #16
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fdde 	bl	8002348 <xTaskRemoveFromEventList>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <xQueueReceive+0xd6>
 8003792:	4b3d      	ldr	r3, [pc, #244]	; (8003888 <xQueueReceive+0x1bc>)
 8003794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f7ff fd1d 	bl	80031e0 <vPortExitCritical>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e069      	b.n	800387e <xQueueReceive+0x1b2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d103      	bne.n	80037b8 <xQueueReceive+0xec>
 80037b0:	f7ff fd16 	bl	80031e0 <vPortExitCritical>
 80037b4:	2300      	movs	r3, #0
 80037b6:	e062      	b.n	800387e <xQueueReceive+0x1b2>
 80037b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <xQueueReceive+0x100>
 80037be:	f107 0310 	add.w	r3, r7, #16
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fe98 	bl	80024f8 <vTaskInternalSetTimeOutState>
 80037c8:	2301      	movs	r3, #1
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037cc:	f7ff fd08 	bl	80031e0 <vPortExitCritical>
 80037d0:	f7fe fa34 	bl	8001c3c <vTaskSuspendAll>
 80037d4:	f7ff fcd4 	bl	8003180 <vPortEnterCritical>
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037de:	b25b      	sxtb	r3, r3
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d103      	bne.n	80037ee <xQueueReceive+0x122>
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037f4:	b25b      	sxtb	r3, r3
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d103      	bne.n	8003804 <xQueueReceive+0x138>
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003804:	f7ff fcec 	bl	80031e0 <vPortExitCritical>
 8003808:	1d3a      	adds	r2, r7, #4
 800380a:	f107 0310 	add.w	r3, r7, #16
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fe87 	bl	8002524 <xTaskCheckForTimeOut>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d123      	bne.n	8003864 <xQueueReceive+0x198>
 800381c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800381e:	f000 f8ad 	bl	800397c <prvIsQueueEmpty>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d017      	beq.n	8003858 <xQueueReceive+0x18c>
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	3324      	adds	r3, #36	; 0x24
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fd1f 	bl	8002274 <vTaskPlaceOnEventList>
 8003836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003838:	f000 f84e 	bl	80038d8 <prvUnlockQueue>
 800383c:	f7fe fa42 	bl	8001cc4 <xTaskResumeAll>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d189      	bne.n	800375a <xQueueReceive+0x8e>
 8003846:	4b10      	ldr	r3, [pc, #64]	; (8003888 <xQueueReceive+0x1bc>)
 8003848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	e780      	b.n	800375a <xQueueReceive+0x8e>
 8003858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385a:	f000 f83d 	bl	80038d8 <prvUnlockQueue>
 800385e:	f7fe fa31 	bl	8001cc4 <xTaskResumeAll>
 8003862:	e77a      	b.n	800375a <xQueueReceive+0x8e>
 8003864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003866:	f000 f837 	bl	80038d8 <prvUnlockQueue>
 800386a:	f7fe fa2b 	bl	8001cc4 <xTaskResumeAll>
 800386e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003870:	f000 f884 	bl	800397c <prvIsQueueEmpty>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	f43f af6f 	beq.w	800375a <xQueueReceive+0x8e>
 800387c:	2300      	movs	r3, #0
 800387e:	4618      	mov	r0, r3
 8003880:	3730      	adds	r7, #48	; 0x30
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	e000ed04 	.word	0xe000ed04

0800388c <prvCopyDataFromQueue>:
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d018      	beq.n	80038d0 <prvCopyDataFromQueue+0x44>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	441a      	add	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	60da      	str	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d303      	bcc.n	80038c0 <prvCopyDataFromQueue+0x34>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68d9      	ldr	r1, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	461a      	mov	r2, r3
 80038ca:	6838      	ldr	r0, [r7, #0]
 80038cc:	f000 f928 	bl	8003b20 <memcpy>
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <prvUnlockQueue>:
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	f7ff fc4e 	bl	8003180 <vPortEnterCritical>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ea:	73fb      	strb	r3, [r7, #15]
 80038ec:	e011      	b.n	8003912 <prvUnlockQueue+0x3a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d012      	beq.n	800391c <prvUnlockQueue+0x44>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3324      	adds	r3, #36	; 0x24
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe fd24 	bl	8002348 <xTaskRemoveFromEventList>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <prvUnlockQueue+0x32>
 8003906:	f7fe fe73 	bl	80025f0 <vTaskMissedYield>
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	3b01      	subs	r3, #1
 800390e:	b2db      	uxtb	r3, r3
 8003910:	73fb      	strb	r3, [r7, #15]
 8003912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003916:	2b00      	cmp	r3, #0
 8003918:	dce9      	bgt.n	80038ee <prvUnlockQueue+0x16>
 800391a:	e000      	b.n	800391e <prvUnlockQueue+0x46>
 800391c:	bf00      	nop
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	22ff      	movs	r2, #255	; 0xff
 8003922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003926:	f7ff fc5b 	bl	80031e0 <vPortExitCritical>
 800392a:	f7ff fc29 	bl	8003180 <vPortEnterCritical>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003934:	73bb      	strb	r3, [r7, #14]
 8003936:	e011      	b.n	800395c <prvUnlockQueue+0x84>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d012      	beq.n	8003966 <prvUnlockQueue+0x8e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3310      	adds	r3, #16
 8003944:	4618      	mov	r0, r3
 8003946:	f7fe fcff 	bl	8002348 <xTaskRemoveFromEventList>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <prvUnlockQueue+0x7c>
 8003950:	f7fe fe4e 	bl	80025f0 <vTaskMissedYield>
 8003954:	7bbb      	ldrb	r3, [r7, #14]
 8003956:	3b01      	subs	r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	73bb      	strb	r3, [r7, #14]
 800395c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003960:	2b00      	cmp	r3, #0
 8003962:	dce9      	bgt.n	8003938 <prvUnlockQueue+0x60>
 8003964:	e000      	b.n	8003968 <prvUnlockQueue+0x90>
 8003966:	bf00      	nop
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	22ff      	movs	r2, #255	; 0xff
 800396c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003970:	f7ff fc36 	bl	80031e0 <vPortExitCritical>
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <prvIsQueueEmpty>:
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	f7ff fbfc 	bl	8003180 <vPortEnterCritical>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <prvIsQueueEmpty+0x1a>
 8003990:	2301      	movs	r3, #1
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	e001      	b.n	800399a <prvIsQueueEmpty+0x1e>
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	f7ff fc21 	bl	80031e0 <vPortExitCritical>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <vQueueAddToRegistry>:
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <vQueueAddToRegistry+0x2a>
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <vQueueAddToRegistry+0x28>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d024      	beq.n	8003a22 <vQueueAddToRegistry+0x7a>
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e01e      	b.n	8003a1c <vQueueAddToRegistry+0x74>
 80039de:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <vQueueAddToRegistry+0x98>)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d105      	bne.n	80039fa <vQueueAddToRegistry+0x52>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <vQueueAddToRegistry+0x98>)
 80039f4:	4413      	add	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	e013      	b.n	8003a22 <vQueueAddToRegistry+0x7a>
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <vQueueAddToRegistry+0x6e>
 8003a00:	4a0f      	ldr	r2, [pc, #60]	; (8003a40 <vQueueAddToRegistry+0x98>)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <vQueueAddToRegistry+0x6e>
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <vQueueAddToRegistry+0x98>)
 8003a12:	4413      	add	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b07      	cmp	r3, #7
 8003a20:	d9dd      	bls.n	80039de <vQueueAddToRegistry+0x36>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <vQueueAddToRegistry+0x8c>
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000240 	.word	0x20000240

08003a44 <vQueueWaitForMessageRestricted>:
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	f7ff fb94 	bl	8003180 <vPortEnterCritical>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a5e:	b25b      	sxtb	r3, r3
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d103      	bne.n	8003a6e <vQueueWaitForMessageRestricted+0x2a>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a74:	b25b      	sxtb	r3, r3
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d103      	bne.n	8003a84 <vQueueWaitForMessageRestricted+0x40>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a84:	f7ff fbac 	bl	80031e0 <vPortExitCritical>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d106      	bne.n	8003a9e <vQueueWaitForMessageRestricted+0x5a>
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	3324      	adds	r3, #36	; 0x24
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe fc0f 	bl	80022bc <vTaskPlaceOnEventListRestricted>
 8003a9e:	6978      	ldr	r0, [r7, #20]
 8003aa0:	f7ff ff1a 	bl	80038d8 <prvUnlockQueue>
 8003aa4:	bf00      	nop
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <__errno>:
 8003aac:	4b01      	ldr	r3, [pc, #4]	; (8003ab4 <__errno+0x8>)
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000014 	.word	0x20000014

08003ab8 <__libc_init_array>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	2600      	movs	r6, #0
 8003abc:	4d0c      	ldr	r5, [pc, #48]	; (8003af0 <__libc_init_array+0x38>)
 8003abe:	4c0d      	ldr	r4, [pc, #52]	; (8003af4 <__libc_init_array+0x3c>)
 8003ac0:	1b64      	subs	r4, r4, r5
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	42a6      	cmp	r6, r4
 8003ac6:	d109      	bne.n	8003adc <__libc_init_array+0x24>
 8003ac8:	f000 f904 	bl	8003cd4 <_init>
 8003acc:	2600      	movs	r6, #0
 8003ace:	4d0a      	ldr	r5, [pc, #40]	; (8003af8 <__libc_init_array+0x40>)
 8003ad0:	4c0a      	ldr	r4, [pc, #40]	; (8003afc <__libc_init_array+0x44>)
 8003ad2:	1b64      	subs	r4, r4, r5
 8003ad4:	10a4      	asrs	r4, r4, #2
 8003ad6:	42a6      	cmp	r6, r4
 8003ad8:	d105      	bne.n	8003ae6 <__libc_init_array+0x2e>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ae0:	4798      	blx	r3
 8003ae2:	3601      	adds	r6, #1
 8003ae4:	e7ee      	b.n	8003ac4 <__libc_init_array+0xc>
 8003ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aea:	4798      	blx	r3
 8003aec:	3601      	adds	r6, #1
 8003aee:	e7f2      	b.n	8003ad6 <__libc_init_array+0x1e>
 8003af0:	08003d30 	.word	0x08003d30
 8003af4:	08003d30 	.word	0x08003d30
 8003af8:	08003d30 	.word	0x08003d30
 8003afc:	08003d34 	.word	0x08003d34

08003b00 <malloc>:
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <malloc+0xc>)
 8003b02:	4601      	mov	r1, r0
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	f000 b86d 	b.w	8003be4 <_malloc_r>
 8003b0a:	bf00      	nop
 8003b0c:	20000014 	.word	0x20000014

08003b10 <free>:
 8003b10:	4b02      	ldr	r3, [pc, #8]	; (8003b1c <free+0xc>)
 8003b12:	4601      	mov	r1, r0
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	f000 b819 	b.w	8003b4c <_free_r>
 8003b1a:	bf00      	nop
 8003b1c:	20000014 	.word	0x20000014

08003b20 <memcpy>:
 8003b20:	440a      	add	r2, r1
 8003b22:	4291      	cmp	r1, r2
 8003b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b28:	d100      	bne.n	8003b2c <memcpy+0xc>
 8003b2a:	4770      	bx	lr
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b32:	4291      	cmp	r1, r2
 8003b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b38:	d1f9      	bne.n	8003b2e <memcpy+0xe>
 8003b3a:	bd10      	pop	{r4, pc}

08003b3c <memset>:
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4402      	add	r2, r0
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d100      	bne.n	8003b46 <memset+0xa>
 8003b44:	4770      	bx	lr
 8003b46:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4a:	e7f9      	b.n	8003b40 <memset+0x4>

08003b4c <_free_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4605      	mov	r5, r0
 8003b50:	2900      	cmp	r1, #0
 8003b52:	d043      	beq.n	8003bdc <_free_r+0x90>
 8003b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b58:	1f0c      	subs	r4, r1, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bfb8      	it	lt
 8003b5e:	18e4      	addlt	r4, r4, r3
 8003b60:	f000 f8aa 	bl	8003cb8 <__malloc_lock>
 8003b64:	4a1e      	ldr	r2, [pc, #120]	; (8003be0 <_free_r+0x94>)
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	4610      	mov	r0, r2
 8003b6a:	b933      	cbnz	r3, 8003b7a <_free_r+0x2e>
 8003b6c:	6063      	str	r3, [r4, #4]
 8003b6e:	6014      	str	r4, [r2, #0]
 8003b70:	4628      	mov	r0, r5
 8003b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b76:	f000 b8a5 	b.w	8003cc4 <__malloc_unlock>
 8003b7a:	42a3      	cmp	r3, r4
 8003b7c:	d90a      	bls.n	8003b94 <_free_r+0x48>
 8003b7e:	6821      	ldr	r1, [r4, #0]
 8003b80:	1862      	adds	r2, r4, r1
 8003b82:	4293      	cmp	r3, r2
 8003b84:	bf01      	itttt	eq
 8003b86:	681a      	ldreq	r2, [r3, #0]
 8003b88:	685b      	ldreq	r3, [r3, #4]
 8003b8a:	1852      	addeq	r2, r2, r1
 8003b8c:	6022      	streq	r2, [r4, #0]
 8003b8e:	6063      	str	r3, [r4, #4]
 8003b90:	6004      	str	r4, [r0, #0]
 8003b92:	e7ed      	b.n	8003b70 <_free_r+0x24>
 8003b94:	461a      	mov	r2, r3
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	b10b      	cbz	r3, 8003b9e <_free_r+0x52>
 8003b9a:	42a3      	cmp	r3, r4
 8003b9c:	d9fa      	bls.n	8003b94 <_free_r+0x48>
 8003b9e:	6811      	ldr	r1, [r2, #0]
 8003ba0:	1850      	adds	r0, r2, r1
 8003ba2:	42a0      	cmp	r0, r4
 8003ba4:	d10b      	bne.n	8003bbe <_free_r+0x72>
 8003ba6:	6820      	ldr	r0, [r4, #0]
 8003ba8:	4401      	add	r1, r0
 8003baa:	1850      	adds	r0, r2, r1
 8003bac:	4283      	cmp	r3, r0
 8003bae:	6011      	str	r1, [r2, #0]
 8003bb0:	d1de      	bne.n	8003b70 <_free_r+0x24>
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4401      	add	r1, r0
 8003bb8:	6011      	str	r1, [r2, #0]
 8003bba:	6053      	str	r3, [r2, #4]
 8003bbc:	e7d8      	b.n	8003b70 <_free_r+0x24>
 8003bbe:	d902      	bls.n	8003bc6 <_free_r+0x7a>
 8003bc0:	230c      	movs	r3, #12
 8003bc2:	602b      	str	r3, [r5, #0]
 8003bc4:	e7d4      	b.n	8003b70 <_free_r+0x24>
 8003bc6:	6820      	ldr	r0, [r4, #0]
 8003bc8:	1821      	adds	r1, r4, r0
 8003bca:	428b      	cmp	r3, r1
 8003bcc:	bf01      	itttt	eq
 8003bce:	6819      	ldreq	r1, [r3, #0]
 8003bd0:	685b      	ldreq	r3, [r3, #4]
 8003bd2:	1809      	addeq	r1, r1, r0
 8003bd4:	6021      	streq	r1, [r4, #0]
 8003bd6:	6063      	str	r3, [r4, #4]
 8003bd8:	6054      	str	r4, [r2, #4]
 8003bda:	e7c9      	b.n	8003b70 <_free_r+0x24>
 8003bdc:	bd38      	pop	{r3, r4, r5, pc}
 8003bde:	bf00      	nop
 8003be0:	200001ec 	.word	0x200001ec

08003be4 <_malloc_r>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	1ccd      	adds	r5, r1, #3
 8003be8:	f025 0503 	bic.w	r5, r5, #3
 8003bec:	3508      	adds	r5, #8
 8003bee:	2d0c      	cmp	r5, #12
 8003bf0:	bf38      	it	cc
 8003bf2:	250c      	movcc	r5, #12
 8003bf4:	2d00      	cmp	r5, #0
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	db01      	blt.n	8003bfe <_malloc_r+0x1a>
 8003bfa:	42a9      	cmp	r1, r5
 8003bfc:	d903      	bls.n	8003c06 <_malloc_r+0x22>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	6033      	str	r3, [r6, #0]
 8003c02:	2000      	movs	r0, #0
 8003c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c06:	f000 f857 	bl	8003cb8 <__malloc_lock>
 8003c0a:	4921      	ldr	r1, [pc, #132]	; (8003c90 <_malloc_r+0xac>)
 8003c0c:	680a      	ldr	r2, [r1, #0]
 8003c0e:	4614      	mov	r4, r2
 8003c10:	b99c      	cbnz	r4, 8003c3a <_malloc_r+0x56>
 8003c12:	4f20      	ldr	r7, [pc, #128]	; (8003c94 <_malloc_r+0xb0>)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	b923      	cbnz	r3, 8003c22 <_malloc_r+0x3e>
 8003c18:	4621      	mov	r1, r4
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	f000 f83c 	bl	8003c98 <_sbrk_r>
 8003c20:	6038      	str	r0, [r7, #0]
 8003c22:	4629      	mov	r1, r5
 8003c24:	4630      	mov	r0, r6
 8003c26:	f000 f837 	bl	8003c98 <_sbrk_r>
 8003c2a:	1c43      	adds	r3, r0, #1
 8003c2c:	d123      	bne.n	8003c76 <_malloc_r+0x92>
 8003c2e:	230c      	movs	r3, #12
 8003c30:	4630      	mov	r0, r6
 8003c32:	6033      	str	r3, [r6, #0]
 8003c34:	f000 f846 	bl	8003cc4 <__malloc_unlock>
 8003c38:	e7e3      	b.n	8003c02 <_malloc_r+0x1e>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	1b5b      	subs	r3, r3, r5
 8003c3e:	d417      	bmi.n	8003c70 <_malloc_r+0x8c>
 8003c40:	2b0b      	cmp	r3, #11
 8003c42:	d903      	bls.n	8003c4c <_malloc_r+0x68>
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	441c      	add	r4, r3
 8003c48:	6025      	str	r5, [r4, #0]
 8003c4a:	e004      	b.n	8003c56 <_malloc_r+0x72>
 8003c4c:	6863      	ldr	r3, [r4, #4]
 8003c4e:	42a2      	cmp	r2, r4
 8003c50:	bf0c      	ite	eq
 8003c52:	600b      	streq	r3, [r1, #0]
 8003c54:	6053      	strne	r3, [r2, #4]
 8003c56:	4630      	mov	r0, r6
 8003c58:	f000 f834 	bl	8003cc4 <__malloc_unlock>
 8003c5c:	f104 000b 	add.w	r0, r4, #11
 8003c60:	1d23      	adds	r3, r4, #4
 8003c62:	f020 0007 	bic.w	r0, r0, #7
 8003c66:	1ac2      	subs	r2, r0, r3
 8003c68:	d0cc      	beq.n	8003c04 <_malloc_r+0x20>
 8003c6a:	1a1b      	subs	r3, r3, r0
 8003c6c:	50a3      	str	r3, [r4, r2]
 8003c6e:	e7c9      	b.n	8003c04 <_malloc_r+0x20>
 8003c70:	4622      	mov	r2, r4
 8003c72:	6864      	ldr	r4, [r4, #4]
 8003c74:	e7cc      	b.n	8003c10 <_malloc_r+0x2c>
 8003c76:	1cc4      	adds	r4, r0, #3
 8003c78:	f024 0403 	bic.w	r4, r4, #3
 8003c7c:	42a0      	cmp	r0, r4
 8003c7e:	d0e3      	beq.n	8003c48 <_malloc_r+0x64>
 8003c80:	1a21      	subs	r1, r4, r0
 8003c82:	4630      	mov	r0, r6
 8003c84:	f000 f808 	bl	8003c98 <_sbrk_r>
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d1dd      	bne.n	8003c48 <_malloc_r+0x64>
 8003c8c:	e7cf      	b.n	8003c2e <_malloc_r+0x4a>
 8003c8e:	bf00      	nop
 8003c90:	200001ec 	.word	0x200001ec
 8003c94:	200001f0 	.word	0x200001f0

08003c98 <_sbrk_r>:
 8003c98:	b538      	push	{r3, r4, r5, lr}
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	4d05      	ldr	r5, [pc, #20]	; (8003cb4 <_sbrk_r+0x1c>)
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	602b      	str	r3, [r5, #0]
 8003ca4:	f7fc fc30 	bl	8000508 <_sbrk>
 8003ca8:	1c43      	adds	r3, r0, #1
 8003caa:	d102      	bne.n	8003cb2 <_sbrk_r+0x1a>
 8003cac:	682b      	ldr	r3, [r5, #0]
 8003cae:	b103      	cbz	r3, 8003cb2 <_sbrk_r+0x1a>
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	bd38      	pop	{r3, r4, r5, pc}
 8003cb4:	20000280 	.word	0x20000280

08003cb8 <__malloc_lock>:
 8003cb8:	4801      	ldr	r0, [pc, #4]	; (8003cc0 <__malloc_lock+0x8>)
 8003cba:	f000 b809 	b.w	8003cd0 <__retarget_lock_acquire_recursive>
 8003cbe:	bf00      	nop
 8003cc0:	20000288 	.word	0x20000288

08003cc4 <__malloc_unlock>:
 8003cc4:	4801      	ldr	r0, [pc, #4]	; (8003ccc <__malloc_unlock+0x8>)
 8003cc6:	f000 b804 	b.w	8003cd2 <__retarget_lock_release_recursive>
 8003cca:	bf00      	nop
 8003ccc:	20000288 	.word	0x20000288

08003cd0 <__retarget_lock_acquire_recursive>:
 8003cd0:	4770      	bx	lr

08003cd2 <__retarget_lock_release_recursive>:
 8003cd2:	4770      	bx	lr

08003cd4 <_init>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	bf00      	nop
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr

08003ce0 <_fini>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr
